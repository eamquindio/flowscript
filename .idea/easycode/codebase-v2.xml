<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/main/java/com/flowscript/ide/components/CodeEditorPane.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/ide/components/ConsolePane.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/ide/components/IconFactory.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/ide/components/ProjectExplorer.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/ide/components/StatusBar.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/ide/components/TokenTablePane.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/ide/services/ProjectService.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/ide/services/ThemeService.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/ide/syntax/FlowScriptSyntaxHighlighter.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/ide/FlowScriptIDE.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/afd/CommentRecognizer.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/afd/DecimalLiteralRecognizer.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/afd/IdentifierRecognizer.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/afd/IntegerLiteralRecognizer.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/afd/KeywordRecognizer.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/afd/OperatorRecognizer.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/afd/StringLiteralRecognizer.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/afd/TokenRecognizer.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/ComprehensiveDemo.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/Lexer.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/LexerDemo.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/Token.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/lexer/TokenType.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/control_ejecucion/BlockNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/control_ejecucion/StatementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ForStatementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/IfStatementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ReturnStatementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ThrowStatementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/TryStatementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/AdditiveExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ArgumentListNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/BinaryExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/EqualityExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/FunctionCallNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/IdentifierNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/IndexAccessNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LiteralNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LogicalAndExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LogicalOrExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/MultiplicativeExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ObjectMemberNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PostfixExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PostfixOperatorNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PrimaryExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PropertyAccessNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/RelationalExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/TernaryExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/UnaryExpressionNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/listas_argumentos/ExpressionListNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/listas_argumentos/ObjectMemberListNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/literales/BooleanLiteralNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/literales/DecimalLiteralNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/literales/IntegerLiteralNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/literales/ListLiteralNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/literales/NullLiteralNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/literales/ObjectLiteralNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/literales/StringLiteralNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/DeclarationNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/FunctionDeclarationNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/ImportDeclarationNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/ProgramNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/VariableDeclarationNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/ElseIfClauseNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/ExpressionStatementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/VariableDeclarationStatementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/tipos_parametros/ParameterNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/functions/tipos_parametros/TypeNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/ElseClauseNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/JoinClauseNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/ParallelBranchNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/WhenClauseNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/EndElementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ExclusiveGatewayNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ParallelGatewayNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ProcessDeclarationNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ProcessElementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/StartElementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/TaskElementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/process/navegacion/GotoStatementNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ast/ASTNode.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/BlockParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/StatementListParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/StatementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ForStatementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/IfStatementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ReturnStatementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ThrowStatementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/TryStatementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/AdditiveExpressionParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/EqualityExpressionParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/ExpressionParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalAndExpressionParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalOrExpressionParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/MultiplicativeExpressionParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixExpressionParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixOperatorParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PrimaryExpressionParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/RelationalExpressionParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/TernaryExpressionParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/UnaryExpressionParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ArgumentListParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ExpressionListParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberListParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/literales/BooleanLiteralParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/literales/DecimalLiteralParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/literales/IntegerLiteralParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/literales/ListLiteralParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/literales/LiteralParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/literales/NullLiteralParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/literales/ObjectLiteralParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/literales/StringLiteralParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/DeclarationParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/FunctionDeclarationParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ImportDeclarationParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ProgramParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/ExpressionStatementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationStatementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterListParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/TypeParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/ElseClauseParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/JoinClauseParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/ParallelBranchParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/WhenClauseParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/control_flujo/ExclusiveGatewayParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/control_flujo/ParallelGatewayParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/elementos_core/EndElementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/elementos_core/StartElementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/elementos_trabajo/TaskElementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessBodyParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessDeclarationParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/parsers/process/navegacion/GotoStatementParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/diagram.md;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/IParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/Parser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ParserContext.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/java/com/flowscript/sintactic/ParserExample.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/resources/css/base.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/resources/css/console.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/resources/css/dark-theme.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/resources/css/light-theme.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/resources/css/monokai-theme.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/resources/css/syntax-highlighting.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/resources/styles/token-table.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/tlf/evalprompt.md;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/tlf/FlowScript-Grammar.md;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/main/tlf/flowscriptsummary.md;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/ide/components/TokenTablePaneTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/lexer/LexerTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/BlockParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ForStatementParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/IfStatementParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ReturnStatementParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ThrowStatementParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/TryStatementParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/AdditiveExpressionParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/EqualityExpressionParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalAndExpressionParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalOrExpressionParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/MultiplicativeExpressionParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixExpressionParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/PrimaryExpressionParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/RelationalExpressionParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/TernaryExpressionParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/UnaryExpressionParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/literales/BooleanLiteralParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/literales/DecimalLiteralParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/literales/IntegerLiteralParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/literales/ListLiteralParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/literales/LiteralParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/literales/NullLiteralParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/literales/ObjectLiteralParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/literales/StringLiteralParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/FunctionDeclarationParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ImportDeclarationParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ProgramParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterListParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/TypeParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/ElseClauseParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/JoinClauseParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/ParallelBranchParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/WhenClauseParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/control_flujo/ExclusiveGatewayParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/control_flujo/ParallelGatewayParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/elementos_core/EndElementParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/elementos_core/StartElementParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/elementos_trabajo/TaskElementParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessBodyParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessDeclarationParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/com/flowscript/sintactic/parsers/process/navegacion/GotoStatementParserTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/edu/eam/ingesoft/tlf/tester/FlowScriptFunctionsTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/java/edu/eam/ingesoft/tlf/tester/FlowScriptProcessesTest.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/resources/flowscript-functions.yaml;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/src/test/resources/flowscript-processes.yaml;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/classes/css/base.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/classes/css/console.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/classes/css/dark-theme.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/classes/css/light-theme.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/classes/css/monokai-theme.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/classes/css/syntax-highlighting.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/classes/styles/token-table.css;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/generated-sources/antlr4/FlowScriptFunctionsBaseListener.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/generated-sources/antlr4/FlowScriptFunctionsListener.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/generated-sources/antlr4/FlowScriptFunctionsParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/generated-sources/antlr4/FlowScriptProcessesBaseListener.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/generated-sources/antlr4/FlowScriptProcessesListener.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/target/generated-sources/antlr4/FlowScriptProcessesParser.java;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/CLAUDE.md;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/README-TokenAnalysis.md;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/README.md;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript/RUN_IDE.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript&quot;:&quot;{\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/ParallelBranchNode.java\&quot;:\&quot;This file defines a single class, `ParallelBranchNode`, which represents a parallel branch in a parallel gateway in a process flow script.\\n\\n`ParallelBranchNode`: Represents a parallel branch in a parallel gateway, defining one of multiple concurrent execution paths.\\n\\n`getTargetTask()`: Returns the target task for the parallel branch.\\n\\n`getNodeType()`: Returns the node type as \\\&quot;ParallelBranch\\\&quot;.\\n\\n`toString()`: Returns a string representation of the parallel branch in the format \\\&quot;branch -\\u003e {targetTask}\\\&quot;.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/IntegerLiteralParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`IntegerLiteralParser`: A parser that recognizes integer literal expressions in a programming language.\\n\\nThe file also contains the following function:\\n\\n`parse(ParserContext context)`: Implements the parsing of integer literal expressions according to the provided BNF grammar.\\n\\nThe purpose of this file is to provide an implementation of a parser for integer literal expressions in a programming language, as part of a larger syntactic analysis framework.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/WhenClauseNode.java\&quot;:\&quot;This file defines a class `WhenClauseNode` that represents a \\\&quot;when\\\&quot; clause in an exclusive gateway in a process flow. The class has two fields: `condition` (an `ExpressionNode` object) and `targetTask` (a `String` representing the target task). The class also has a `getNodeType()` method that returns the string \\\&quot;WhenClause\\\&quot; and a `toString()` method that returns a string representation of the \\\&quot;when\\\&quot; clause.\\n\\n`WhenClauseNode`: Represents a \\\&quot;when\\\&quot; clause in an exclusive gateway, which defines a conditional branch in the process flow.\\n\\n`getCondition()`: Returns the `ExpressionNode` object representing the condition of the \\\&quot;when\\\&quot; clause.\\n\\n`getTargetTask()`: Returns the `String` representing the target task of the \\\&quot;when\\\&quot; clause.\\n\\n`getNodeType()`: Returns the string \\\&quot;WhenClause\\\&quot; as the node type.\\n\\n`toString()`: Returns a string representation of the \\\&quot;when\\\&quot; clause.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/RelationalExpressionParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`RelationalExpressionParser`: A parser for relational expressions, which supports the less than, greater than, less than or equal to, and greater than or equal to operators.\\n\\nThe file also contains a single function:\\n\\n`parse(ParserContext context)`: This function is responsible for parsing the relational expression according to the provided BNF grammar.\&quot;,\&quot;/src/main/resources/styles/token-table.css\&quot;:\&quot;This file contains CSS styles for a JavaFX application\\u0027s token table. It defines the styling for various elements of the table, including the header, controls, checkboxes, buttons, table rows, and scrollbars. The styles are designed to provide a consistent and visually appealing user interface for the application.\&quot;,\&quot;/target/generated-sources/antlr4/FlowScriptProcessesBaseListener.java\&quot;:\&quot;This file appears to be an empty implementation of the `FlowScriptProcessesListener` interface, which is generated from the `FlowScriptProcesses.g4` ANTLR grammar file. The file does not contain any classes or functions, but rather provides default implementations for the methods defined in the `FlowScriptProcessesListener` interface, which can be extended to create a listener that only needs to handle a subset of the available methods.\\n\\nThe file serves as a base class for implementing a listener that can be used to process the abstract syntax tree (AST) generated by the `FlowScriptProcessesParser`. The default implementations of the methods in this class do nothing, and they can be overridden in a subclass to provide the desired functionality.\&quot;,\&quot;/src/test/java/com/flowscript/ide/components/TokenTablePaneTest.java\&quot;:\&quot;This file contains a test suite for the `TokenTablePane` class, which is part of the `com.flowscript.ide.components` package. The test suite focuses on the integration between the `TokenTablePane` and the `Lexer` class from the `com.flowscript.lexer` package, rather than testing the JavaFX components directly.\\n\\n`TokenTablePaneTest`: A test suite for the `TokenTablePane` class, which tests the functionality of the lexer integration.\\n\\n`testEmptyCodeTokenization()`: Tests the tokenization of an empty code string.\\n`testSimpleFunctionTokenization()`: Tests the tokenization of a simple function declaration.\\n`testCodeWithLexicalError()`: Tests that the lexer throws a `LexicalException` when encountering an invalid character.\\n`testComplexFlowScriptTokenization()`: Tests the tokenization of a complex FlowScript code snippet.\\n`testCommentsTokenization()`: Tests the tokenization of code with single-line and multi-line comments.\\n`testTokenRowCreation()`: Tests the creation of `TokenRow` objects, which represent individual tokens in the `TokenTablePane`.\\n`testLiteralsTokenization()`: Tests the tokenization of various literal types, such as integers, decimals, strings, booleans, and `null`.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/AdditiveExpressionNode.java\&quot;:\&quot;This file defines the `AdditiveExpressionNode` class, which represents additive expressions in the abstract syntax tree (AST) of a programming language.\\n\\n`AdditiveExpressionNode`: Represents additive expressions in the AST, such as `expr + expr` and `expr - expr`.\\n\\n`AdditiveExpressionNode(Token, ExpressionNode)`: Constructs a new `AdditiveExpressionNode` with the first token and the first operand.\\n\\n`addOperand(Token, ExpressionNode)`: Adds a new operand and the corresponding operator token to the expression.\\n\\n`getOperands()`: Returns a list of all the operands in the expression.\\n\\n`getOperators()`: Returns a list of all the operator tokens in the expression.\\n\\n`isSingleOperand()`: Checks if the expression has only a single operand.\\n\\n`getSingleOperand()`: Returns the single operand if the expression has only one operand, otherwise throws an exception.\\n\\n`getSimplified()`: Returns a simplified version of the expression, which is the single operand if there is only one.\\n\\n`getNodeType()`: Returns the node type as \\\&quot;AdditiveExpression\\\&quot;.\\n\\n`getExpressionType()`: Returns the expression type as \\\&quot;numeric\\\&quot;.\\n\\n`toString()`: Returns a string representation of the `AdditiveExpressionNode`.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/VariableDeclarationStatementNode.java\&quot;:\&quot;This file defines a single class:\\n\\n`VariableDeclarationStatementNode`: Represents a variable declaration statement within functions and processes, where a variable is assigned an initial value.\\n\\nThe file does not contain any functions, but rather defines a class that represents a specific type of statement in the abstract syntax tree (AST) of a programming language.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/ExpressionParser.java\&quot;:\&quot;This file contains the implementation of the `ExpressionParser` class, which is responsible for parsing expressions in a programming language.\\n\\n`ExpressionParser`: This class is the coordinator parser for expressions, which serves as the entry point for the expression parsing system.\\n\\n`parse()`: This function is responsible for parsing an expression, and it delegates the parsing to the `TernaryExpressionParser`.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/FunctionDeclarationParser.java\&quot;:\&quot;This file contains a parser for function declarations in the FlowScript programming language.\\n\\n`FunctionDeclarationParser`: A parser that handles the parsing of function declarations, including parameters, return types, and function bodies.\\n\\n`parse(ParserContext context)`: Parses a function declaration from the given `ParserContext` and returns a `FunctionDeclarationNode` representing the parsed function.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/LiteralParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `LiteralParser` class, which is responsible for parsing different types of literal values in a programming language.\\n\\n`LiteralParserTest`: This class contains a series of test cases to verify the functionality of the `LiteralParser` class.\\n\\n`testIntegerLiteral()`: This test verifies that the `LiteralParser` can correctly parse an integer literal.\\n`testDecimalLiteral()`: This test verifies that the `LiteralParser` can correctly parse a decimal literal.\\n`testBooleanLiteralTrue()`: This test verifies that the `LiteralParser` can correctly parse the boolean literal `true`.\\n`testBooleanLiteralFalse()`: This test verifies that the `LiteralParser` can correctly parse the boolean literal `false`.\\n`testStringLiteral()`: This test verifies that the `LiteralParser` can correctly parse a string literal.\\n`testNullLiteral()`: This test verifies that the `LiteralParser` can correctly parse the `null` literal.\\n`testInvalidInput_Identifier()`: This test verifies that the `LiteralParser` throws an exception when given an invalid input (an identifier).\\n`testInvalidInput_Operator()`: This test verifies that the `LiteralParser` throws an exception when given an invalid input (an operator).\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/DeclarationParser.java\&quot;:\&quot;This file contains a parser for declarations in the FlowScript programming language, including import declarations, function declarations, process declarations, and variable declarations.\\n\\n`DeclarationParser`: A parser that coordinates the parsing of different types of declarations in FlowScript.\\n\\n`parse(ParserContext)`: Parses a declaration in the FlowScript language, dispatching to the appropriate sub-parser based on the type of declaration.\\n\\n`ImportDeclarationParser`: Parses import declarations in FlowScript.\\n\\n`FunctionDeclarationParser`: Parses function declarations in FlowScript.\\n\\n`ProcessDeclarationParser`: Parses process declarations in FlowScript.\\n\\n`VariableDeclarationParser`: Parses variable declarations in FlowScript.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/StringLiteralParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`StringLiteralParser`: A parser that recognizes string literal expressions in a programming language, following a specific BNF grammar.\\n\\nThe file also contains one function:\\n\\n`parse(ParserContext context)`: This function is responsible for parsing a string literal expression from the given parser context, and returning a corresponding `StringLiteralNode` object.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ImportDeclarationParserTest.java\&quot;:\&quot;This file contains a test suite for the `ImportDeclarationParser` class, which is responsible for parsing import declarations in the FlowScript programming language.\\n\\n`ImportDeclarationParserTest`: This class contains a series of unit tests to verify the behavior of the `ImportDeclarationParser`.\\n\\n`testSimpleImport()`: This test verifies that the parser correctly parses a simple import statement without an alias.\\n\\n`testImportWithAlias()`: This test verifies that the parser correctly parses an import statement with an alias.\\n\\n`testImportJar()`: This test verifies that the parser correctly parses an import statement for a JAR file.\\n\\n`testMultipleImports()`: This test verifies that the parser can handle multiple import statements in a single input.\&quot;,\&quot;/src/main/resources/css/base.css\&quot;:\&quot;This file contains CSS styles for the FlowScript IDE, a user interface for a programming language. It defines the styles for various UI elements such as the menu bar, context menu, tool bar, split panes, tab pane, tree view, text fields, buttons, labels, progress indicators, scroll bars, and tooltips. The styles are used to create a consistent and visually appealing user interface for the FlowScript IDE.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/StringLiteralParserTest.java\&quot;:\&quot;This file contains a test suite for the `StringLiteralParser` class, which is responsible for parsing string literals in a programming language.\\n\\n`StringLiteralParserTest`: A test suite for the `StringLiteralParser` class, which verifies the parser\\u0027s ability to handle various string literal inputs, including simple strings, empty strings, strings with escape characters, and strings with Unicode escape characters.\\n\\n`testSimpleString()`: Tests the parser\\u0027s ability to correctly parse a simple string literal.\\n`testEmptyString()`: Tests the parser\\u0027s ability to correctly parse an empty string literal.\\n`testStringWithEscapes()`: Tests the parser\\u0027s ability to correctly parse a string literal with escape characters.\\n`testStringWithQuotes()`: Tests the parser\\u0027s ability to correctly parse a string literal with embedded quotes.\\n`testStringWithMultipleEscapes()`: Tests the parser\\u0027s ability to correctly parse a string literal with multiple escape characters.\\n`testStringWithUnicodeEscape()`: Tests the parser\\u0027s ability to correctly parse a string literal with a Unicode escape character.\\n`testInvalidInput_Identifier()`: Tests the parser\\u0027s ability to handle an invalid input, such as an identifier.\\n`testInvalidInput_Integer()`: Tests the parser\\u0027s ability to handle an invalid input, such as an integer.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/elementos_trabajo/TaskElementParserTest.java\&quot;:\&quot;This file contains a test suite for the `TaskElementParser` class, which is responsible for parsing task elements in a process flow script. The test suite includes two test cases that validate the parsing of simple task elements and task elements with multiple statements.\\n\\n`TaskElementParserTest`: A test suite for the `TaskElementParser` class.\\n\\n`testSimpleTask()`: Tests the parsing of a simple task element with a single statement.\\n\\n`testTaskWithMultipleStatements()`: Tests the parsing of a task element with multiple statements.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/afd/OperatorRecognizer.java\&quot;:\&quot;This file contains a single class, `OperatorRecognizer`, which is responsible for recognizing operators and delimiters using a finite automaton approach.\\n\\n`OperatorRecognizer`: A class that recognizes operators and delimiters in a given input string using a finite automaton approach.\\n\\n`recognize(String input, int startPos, int line, int column)`: A method that takes an input string, a starting position, and line and column information, and returns a `Token` object representing the recognized operator or delimiter, or `null` if no operator or delimiter is found.\\n\\n`getPriority()`: A method that returns the priority of the `OperatorRecognizer` class, which is used to determine the order in which recognizers are applied.\&quot;,\&quot;/target/generated-sources/antlr4/FlowScriptProcessesListener.java\&quot;:\&quot;This file defines a listener interface for a parse tree produced by the `FlowScriptProcessesParser`. The interface has two methods:\\n\\n`FlowScriptProcessesListener`: This interface defines a complete listener for a parse tree produced by the `FlowScriptProcessesParser`.\\n\\n`enterProgram(FlowScriptProcessesParser.ProgramContext ctx)`: This method is called when the parser enters a program node in the parse tree.\\n\\n`exitProgram(FlowScriptProcessesParser.ProgramContext ctx)`: This method is called when the parser exits a program node in the parse tree.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/StringLiteralNode.java\&quot;:\&quot;This file contains a single class:\\n\\n`StringLiteralNode`: Represents a string literal expression in the abstract syntax tree (AST) of a programming language.\\n\\nThe file also contains the following functions:\\n\\n`parseStringLiteral(String raw)`: Parses a raw string literal and replaces escape sequences with their corresponding characters.\\n\\n`getRawValue()`: Returns the raw value of the string literal.\\n\\n`getValue()`: Returns the parsed value of the string literal.\\n\\n`length()`: Returns the length of the parsed string literal.\\n\\n`getNodeType()`: Returns the type of the AST node as a string.\\n\\n`getExpressionType()`: Returns the type of the expression as a string.\\n\\n`toString()`: Returns a string representation of the string literal node.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/IfStatementParser.java\&quot;:\&quot;This file contains the implementation of the `IfStatementParser` class, which is responsible for parsing `if-else-if-else` statements in a programming language.\\n\\n`IfStatementParser`: This class is responsible for parsing `if-else-if-else` statements in the programming language.\\n\\n`parse(ParserContext context)`: This function parses an `if-else-if-else` statement from the given `ParserContext` and returns an `IfStatementNode` object representing the parsed statement.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/elementos_core/EndElementParserTest.java\&quot;:\&quot;This file contains a test suite for the `EndElementParser` class, which is responsible for parsing the `end` element in a process definition language. The test suite covers various scenarios, including parsing a simple `end` element, an `end` element with an underscore in the name, and multiple `end` elements.\\n\\n`EndElementParserTest`: A test suite for the `EndElementParser` class.\\n\\n`testSimpleEnd()`: Tests parsing a simple `end` element.\\n\\n`testEndWithUnderscoreInName()`: Tests parsing an `end` element with an underscore in the name.\\n\\n`testMultipleEnds()`: Tests parsing multiple `end` elements.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/TokenType.java\&quot;:\&quot;This file defines the `TokenType` enumeration, which represents the different types of tokens in the FlowScript language. The file does not contain any classes or functions, but rather a comprehensive list of token types, including:\\n\\n- Structure Keywords: Keywords related to the structure of the FlowScript language, such as `PROCESS`, `FUNCTION`, `IMPORT`, and `RETURN`.\\n- Flow Control Keywords: Keywords related to the control flow of the FlowScript language, such as `START`, `END`, `TASK`, `GATEWAY`, and `BRANCH`.\\n- Control Flow Keywords: Keywords related to the control flow of the FlowScript language, such as `IF`, `WHILE`, `FOR`, and `BREAK`.\\n- Data Type Keywords: Keywords related to the data types in the FlowScript language, such as `INTEGER_TYPE`, `DECIMAL_TYPE`, and `LIST_TYPE`.\\n- Literal Values: Keywords representing literal values, such as `NULL`, `TRUE`, and `FALSE`.\\n- Operators: Keywords representing various operators, such as `PLUS`, `LESS_THAN`, and `ASSIGN`.\\n- Delimiters: Keywords representing various delimiters, such as `LEFT_PAREN`, `RIGHT_BRACE`, and `COMMA`.\\n- Literals: Placeholders for various literal values, such as `INTEGER_LITERAL`, `DECIMAL_LITERAL`, and `STRING_LITERAL`.\\n- Identifier: A placeholder for identifiers in the FlowScript language.\\n- Special: A special context object in processes, `INPUT`.\\n- Comments: Placeholders for single-line and multi-line comments.\\n- EOF: The end-of-file token.\\n- ERROR: The error token.\\n\\nThe file also includes several utility methods to check the properties of each token type, such as whether it is a keyword, an operator, a delimiter, a literal, or a data type.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/ComprehensiveDemo.java\&quot;:\&quot;This file is a comprehensive demo for the FlowScript lexer. It demonstrates various features of the lexer, including analyzing token statistics, finding function and process declarations, and analyzing string and numeric literals. The file does not contain any classes, but it has the following functions:\\n\\n`main(String[] args)`: The main entry point of the demo, which reads a FlowScript example file, tokenizes the code, and performs various analyses on the tokens.\\n\\n`analyzeTokenStatistics(List\\u003cToken\\u003e tokens)`: Analyzes the token statistics, including the total number of tokens, unique token types, and the top token types.\\n\\n`printTokenTable(List\\u003cToken\\u003e tokens)`: Prints a formatted table of the first 50 tokens.\\n\\n`findFunctionDeclarations(List\\u003cToken\\u003e tokens)`: Finds and displays the function declarations in the code.\\n\\n`findProcessDeclarations(List\\u003cToken\\u003e tokens)`: Finds and displays the process declarations in the code.\\n\\n`analyzeStringLiterals(List\\u003cToken\\u003e tokens)`: Analyzes the string literals in the code, including the total number, average length, and the longest string literal.\\n\\n`analyzeNumericLiterals(List\\u003cToken\\u003e tokens)`: Analyzes the integer and decimal literals in the code, displaying the first 15 of each.\\n\\n`formatValue(String value)`: Formats the value of a token for display, truncating long values.\\n\\n`getCategoryForToken(TokenType type)`: Determines the category (e.g., keyword, operator, literal) for a given token type.\&quot;,\&quot;/src/main/tlf/evalprompt.md\&quot;:\&quot;The file `@src/main/tlf/flowscriptsummary.md` does not contain any classes or functions. It appears to be a markdown file that provides instructions for a course work assignment. The key points from the instructions are:\\n\\n1. Each student should work on the assignment in a separate feature branch with the naming convention `feature/antlrfunctions_\\u003cstudent_code\\u003e`.\\n2. For each student branch, you should:\\n   - Identify the work done by checking if `@src/main/tlf/FlowScriptFunctions.g4` or `@src/main/tlf/FlowScriptProcesses.g4` are complete.\\n   - Review the deliverables (BNF and ANTLR) in the `src/main/tlf` or `tlf` directory.\\n   - Assign a grade and provide observations for the student.\\n3. Identify the best deliverable for the assignment.\\n4. Create a summary markdown file with a table of the results.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/ASTNode.java\&quot;:\&quot;This file defines the `ASTNode` class, which is the base class for all Abstract Syntax Tree nodes in the FlowScript programming language. It provides position information for each node in the parse tree.\\n\\n`ASTNode`: The base class for all Abstract Syntax Tree nodes in FlowScript, representing a node in the parse tree with position information.\\n\\n`getNodeType()`: Returns a string representation of the AST node type.\\n\\n`toString()`: Returns a detailed string representation of the AST node for debugging purposes.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ParserExample.java\&quot;:\&quot;This file is an example of how to use the FlowScript parser to analyze and parse FlowScript code. It demonstrates the process of converting source code to tokens using the Lexer, and then parsing the tokens to construct an Abstract Syntax Tree (AST) using the Parser. The file also includes examples of parsing simple and complex FlowScript programs, and handling syntax errors.\\n\\n`ParserExample`: This class demonstrates how to use the FlowScript parser to analyze and parse FlowScript code.\\n\\n`parseAndPrint`: This function parses the given source code, constructs an AST, and prints information about the generated AST.\\n\\n`errorExample`: This function demonstrates how to handle syntax errors when parsing FlowScript code.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/WhenClauseParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `WhenClauseParser` class, which is responsible for parsing \\\&quot;when\\\&quot; clauses in a process definition language.\\n\\n`WhenClauseParserTest`: This class contains a set of test cases to verify the functionality of the `WhenClauseParser`.\\n\\n`testSimpleWhenClause()`: This test verifies that the parser can correctly parse a simple \\\&quot;when\\\&quot; clause with a simple condition and a target task.\\n\\n`testWhenClauseWithComplexCondition()`: This test verifies that the parser can correctly parse a \\\&quot;when\\\&quot; clause with a more complex condition involving multiple expressions.\\n\\n`testWhenClauseWithFunctionCall()`: This test verifies that the parser can correctly parse a \\\&quot;when\\\&quot; clause with a function call as the condition.\\n\\n`testWhenClauseWithBoolean()`: This test verifies that the parser can correctly parse a \\\&quot;when\\\&quot; clause with a boolean condition.\\n\\n`testInvalidWhenClause_MissingArrow()`: This test verifies that the parser correctly throws an exception when a \\\&quot;when\\\&quot; clause is missing the arrow (`-\\u003e`).\\n\\n`testInvalidWhenClause_MissingCondition()`: This test verifies that the parser correctly throws an exception when a \\\&quot;when\\\&quot; clause is missing the condition.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/TernaryExpressionParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`TernaryExpressionParser`: A parser for ternary expressions (conditional operator) in a programming language.\\n\\nThe file also contains one function:\\n\\n`parse(ParserContext context)`: Implements the parsing of a ternary expression according to the provided BNF grammar.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalOrExpressionParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`LogicalOrExpressionParser`: A parser for logical OR expressions in a programming language, following a specific BNF grammar.\\n\\nThe file also contains one function:\\n\\n`parse(ParserContext context)`: Implements the parsing of logical OR expressions according to the provided BNF grammar.\&quot;,\&quot;/target/classes/css/light-theme.css\&quot;:\&quot;This file appears to be a CSS stylesheet for a light theme for a FlowScript IDE (Integrated Development Environment). It defines the styles for various UI elements such as the menu bar, context menu, tool bar, tab pane, tree view, text fields, buttons, labels, progress indicators, scroll bars, tooltips, status bar, and console. The stylesheet aims to provide a consistent and visually appealing user interface for the FlowScript IDE.\&quot;,\&quot;/src/main/java/com/flowscript/ide/components/ConsolePane.java\&quot;:\&quot;This file contains a single class `ConsolePane` which represents a console-like user interface component for a FlowScript IDE (Integrated Development Environment).\\n\\n`ConsolePane`: A JavaFX-based console component that provides a text-based interface for interacting with a FlowScript application, including executing commands, displaying output, and managing command history.\\n\\n`initializeComponents()`: Initializes the various UI components of the `ConsolePane`, such as the output area, input field, and toolbar.\\n\\n`setupEventHandlers()`: Sets up event handlers for the console, including handling key presses and automatically scrolling the output area.\\n\\n`setupStyling()`: Applies custom CSS styling to the console\\u0027s output area.\\n\\n`handleKeyPress(KeyEvent)`: Handles key press events in the input field, executing commands, navigating command history, and performing auto-completion.\\n\\n`executeCommand()`: Executes the command entered in the input field, adding it to the command history, displaying the command in the output, and processing built-in commands.\\n\\n`processBuiltInCommand(String)`: Handles the execution of built-in console commands, such as `clear`, `help`, `version`, `time`, `echo`, and `history`.\\n\\n`addToHistory(String)`: Adds a command to the command history.\\n\\n`navigateHistory(int)`: Allows the user to navigate through the command history using the up and down arrow keys.\\n\\n`autoComplete()`: Provides basic auto-completion functionality for console commands.\\n\\n`printWelcomeMessage()`: Prints a welcome message to the console.\\n\\n`printCommand(String)`: Prints a command to the console, including a timestamp.\\n\\n`println(String, String)`: Prints a message to the console with a specified style class.\\n\\n`print(String, String)`: Prints a message to the console without a newline, with a specified style class.\\n\\n`printError(String)`, `printWarning(String)`, `printSuccess(String)`: Convenience methods for printing messages with specific styles.\\n\\n`clear()`: Clears the console output and prints the welcome message.\\n\\n`showHelp()`, `showVersion()`, `showTime()`, `showHistory()`: Implement the logic for displaying various help and information messages in the console.\\n\\n`saveOutput()`: Provides functionality to save the console output to a text file.\\n\\n`setOnCommand(Consumer\\u003cString\\u003e)`, `focusInput()`, `getOutputText()`, `executeCommand(String)`: Public API methods for interacting with the `ConsolePane`.\\n\\n`logInfo(String)`, `logError(String)`, `logWarning(String)`, `logSuccess(String)`: Convenience methods for logging messages with different severity levels.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/AdditiveExpressionParser.java\&quot;:\&quot;This file contains the implementation of the `AdditiveExpressionParser` class, which is responsible for parsing additive expressions (addition and subtraction) in a programming language.\\n\\n`AdditiveExpressionParser`: A parser that implements the grammar for additive expressions, supporting the `+` (addition) and `-` (subtraction) operators.\\n\\n`parse(ParserContext context)`: The main method of the `AdditiveExpressionParser` class, which is responsible for parsing an additive expression according to the provided grammar.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/BlockParser.java\&quot;:\&quot;This file contains a parser implementation for a block of code in a programming language. It defines the following classes and functions:\\n\\n`BlockParser`: A parser that parses a block of code delimited by curly braces, including a list of statements within the block.\\n\\n`parse(ParserContext context)`: Parses a block of code from the given `ParserContext`, consuming the opening and closing braces and parsing the list of statements within the block.\\n\\nThe file also includes a detailed description of the BNF grammar for the block syntax, as well as examples of how the block syntax can be used in different contexts, such as within functions, if statements, and try-catch blocks.\&quot;,\&quot;/src/main/resources/css/console.css\&quot;:\&quot;This file contains CSS styles for a console-like user interface in a JavaFX application. It defines styles for the text area, console text, and the console input field. There are no classes or functions defined in this file. The file provides a consistent and visually appealing styling for the console-specific elements of the application.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/FunctionDeclarationParserTest.java\&quot;:\&quot;This file contains a test suite for the `FunctionDeclarationParser` class, which is responsible for parsing function declarations in a programming language.\\n\\n`FunctionDeclarationParserTest`: This class contains a series of unit tests to verify the functionality of the `FunctionDeclarationParser`.\\n\\n`testFunctionWithoutParameters()`: This test verifies that the parser correctly parses a function declaration without any parameters.\\n\\n`testFunctionWithReturnType()`: This test verifies that the parser correctly parses a function declaration with a return type.\\n\\n`testFunctionWithSingleParameter()`: This test verifies that the parser correctly parses a function declaration with a single parameter.\\n\\n`testFunctionWithMultipleParameters()`: This test verifies that the parser correctly parses a function declaration with multiple parameters.\\n\\n`testFunctionWithComplexBody()`: This test verifies that the parser correctly parses a function declaration with a complex body.\&quot;,\&quot;/src/main/tlf/flowscriptsummary.md\&quot;:\&quot;This file does not contain any classes or functions. It is a language specification document that provides a detailed summary of the FlowScript language, including its language philosophy, lexical elements, data types, operators, language constructs, functions, processes, control flow, error handling, modules and imports, and syntax examples. The document also outlines the grammar design requirements for the FlowScript language.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/TryStatementParser.java\&quot;:\&quot;This file contains a single class, `TryStatementParser`, which is responsible for parsing try-catch statements in a programming language.\\n\\n`TryStatementParser`: A parser for try-catch statements in a programming language, following a specific BNF grammar.\\n\\n`parse(ParserContext)`: Implements the parsing logic for try-catch statements, following the steps outlined in the documentation.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/control_flujo/ParallelGatewayParserTest.java\&quot;:\&quot;This file contains a test suite for the `ParallelGatewayParser` class, which is responsible for parsing parallel gateway constructs in a process definition language.\\n\\n`ParallelGatewayParserTest`: This class contains unit tests for the `ParallelGatewayParser` class, which verifies the parsing of simple and complex parallel gateway constructs.\\n\\n`testSimpleParallelGateway()`: This test method checks the parsing of a simple parallel gateway with two branches and a join clause.\\n\\n`testParallelGatewayWithMultipleBranches()`: This test method checks the parsing of a parallel gateway with multiple branches and a join clause.\&quot;,\&quot;/target/classes/styles/token-table.css\&quot;:\&quot;This file contains CSS styles for a JavaFX application\\u0027s token table. It defines the styling for various elements of the table, including the header, controls, checkboxes, buttons, table rows, and scrollbars. The styles are designed to provide a consistent and visually appealing user interface for the application.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/IndexAccessNode.java\&quot;:\&quot;This file defines a class `IndexAccessNode` that represents array or object index access expressions in a programming language\\u0027s abstract syntax tree (AST).\\n\\n`IndexAccessNode`: Represents an array or object index access expression, containing an object expression and an index expression.\\n\\n`getObject()`: Returns the object expression of the index access.\\n\\n`getIndex()`: Returns the index expression of the index access.\\n\\n`getNodeType()`: Returns the node type as \\\&quot;IndexAccess\\\&quot;.\\n\\n`getExpressionType()`: Returns the expression type as \\\&quot;element\\\&quot;, which would typically be determined by a symbol table lookup during semantic analysis.\\n\\n`toString()`: Returns a string representation of the index access expression.\&quot;,\&quot;/src/main/resources/css/monokai-theme.css\&quot;:\&quot;This file appears to be a CSS stylesheet for a Monokai theme for a FlowScript IDE. It does not contain any classes or functions, but rather defines the visual styles for various UI elements of the IDE, such as the root, menu bar, context menu, tool bar, tab pane, tree view, text fields, buttons, labels, progress indicators, scroll bars, tooltips, status bar, and console. The stylesheet aims to provide a consistent and visually appealing Monokai-inspired theme for the FlowScript IDE.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/ObjectLiteralParser.java\&quot;:\&quot;This file contains the implementation of the `ObjectLiteralParser` class, which is responsible for parsing object literals in a programming language.\\n\\n`ObjectLiteralParser`: A parser that recognizes object literals in a programming language, such as `{ name: \\\&quot;Ana\\\&quot;, age: 25 }`.\\n\\n`parse(ParserContext context)`: Implements the parsing of an object literal according to the provided BNF grammar.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/ElseClauseParserTest.java\&quot;:\&quot;This file contains a test suite for the `ElseClauseParser` class, which is responsible for parsing the \\\&quot;else\\\&quot; clause in a process flow script.\\n\\n`ElseClauseParserTest`: A test suite for the `ElseClauseParser` class, which verifies the correct parsing of various \\\&quot;else\\\&quot; clause scenarios.\\n\\n`testSimpleElseClause()`: Tests the parsing of a simple \\\&quot;else\\\&quot; clause with a target task.\\n`testElseClauseWithLongIdentifier()`: Tests the parsing of an \\\&quot;else\\\&quot; clause with a long target task identifier.\\n`testInvalidElseClause_MissingArrow()`: Tests the parsing of an \\\&quot;else\\\&quot; clause with a missing arrow.\\n`testInvalidElseClause_MissingTarget()`: Tests the parsing of an \\\&quot;else\\\&quot; clause with a missing target task.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/IdentifierNode.java\&quot;:\&quot;This file defines a single class, `IdentifierNode`, which represents an identifier (variable name, function name, etc.) in the abstract syntax tree (AST) of a programming language.\\n\\n`IdentifierNode`: Represents an identifier (variable name, function name, etc.) in the AST of a programming language.\\n\\n`getName()`: Returns the name of the identifier.\\n\\n`getNodeType()`: Returns the type of the node, which is \\\&quot;Identifier\\\&quot;.\\n\\n`getExpressionType()`: Returns the type of the expression, which is \\\&quot;identifier\\\&quot;.\\n\\n`toString()`: Returns a string representation of the identifier node.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/StatementListParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`StatementListParser`: A parser that parses a list of statements in a programming language.\\n\\nThe file also contains the following functions:\\n\\n`parse(ParserContext context)`: Parses a list of statements from the given `ParserContext` and returns them as a list of `StatementNode` objects.\\n\\nThis file is part of a larger project that implements a programming language parser. The `StatementListParser` class is responsible for parsing a list of statements, which can include various types of statements such as variable declarations, if statements, for statements, and expression statements.\&quot;,\&quot;/src/main/java/com/flowscript/ide/services/ThemeService.java\&quot;:\&quot;This file contains a `ThemeService` class that manages the theme preferences for a JavaFX application. It provides functionality to set, load, and apply different themes (Light, Dark, and Monokai) to the application\\u0027s scene.\\n\\n`ThemeService`: Manages the theme preferences and applies the selected theme to the application\\u0027s scene.\\n\\n`loadThemePreference()`: Loads the user\\u0027s theme preference from the preferences store.\\n\\n`setTheme(Theme theme)`: Sets the current theme and saves the preference to the preferences store.\\n\\n`getCurrentTheme()`: Returns the currently selected theme.\\n\\n`applyTheme(Scene scene)`: Applies the current theme to the provided scene by clearing existing stylesheets and adding the appropriate CSS files.\\n\\n`addStylesheet(Scene scene, String cssPath)`: Adds a CSS stylesheet to the provided scene.\\n\\n`getAvailableThemes()`: Returns an array of all available themes.\&quot;,\&quot;/src/test/java/com/flowscript/lexer/LexerTest.java\&quot;:\&quot;This file contains a test suite for the `Lexer` class, which is responsible for tokenizing input strings into a sequence of tokens. The test suite covers various aspects of the lexer\\u0027s functionality, including handling of keywords, identifiers, literals, operators, delimiters, comments, and more.\\n\\n`LexerTest`: A test suite for the `Lexer` class, which verifies the correctness of the lexer\\u0027s behavior.\\n\\n`testKeywords()`: Tests the lexer\\u0027s ability to correctly identify and tokenize various keywords.\\n`testIdentifiers()`: Tests the lexer\\u0027s handling of identifier tokens.\\n`testIntegerLiterals()`: Tests the lexer\\u0027s handling of integer literal tokens.\\n`testDecimalLiterals()`: Tests the lexer\\u0027s handling of decimal literal tokens.\\n`testStringLiterals()`: Tests the lexer\\u0027s handling of string literal tokens.\\n`testOperators()`: Tests the lexer\\u0027s handling of various operator tokens.\\n`testDelimiters()`: Tests the lexer\\u0027s handling of various delimiter tokens.\\n`testComments()`: Tests the lexer\\u0027s handling of single-line and multi-line comments.\\n`testComplexFunction()`: Tests the lexer\\u0027s handling of a more complex function declaration.\\n`testProcessSyntax()`: Tests the lexer\\u0027s handling of the \\\&quot;process\\\&quot; syntax.\\n`testBooleanLiterals()`: Tests the lexer\\u0027s handling of boolean literal tokens.\\n`testLineAndColumnTracking()`: Tests the lexer\\u0027s ability to track the line and column information of tokens.\\n`testInvalidCharacter()`: Tests the lexer\\u0027s handling of invalid characters in the input.\\n`testGatewayKeywords()`: Tests the lexer\\u0027s handling of gateway-related keywords.\\n`testListAndObjectLiterals()`: Tests the lexer\\u0027s handling of list and object literal tokens.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/control_flujo/ExclusiveGatewayParserTest.java\&quot;:\&quot;This file contains a test suite for the `ExclusiveGatewayParser` class, which is responsible for parsing the syntax of an exclusive gateway in a process flow. The test suite includes two test cases that verify the parsing of a simple gateway and a gateway without an else clause.\\n\\n`ExclusiveGatewayParserTest`: A test suite for the `ExclusiveGatewayParser` class.\\n\\n`testSimpleGateway()`: Tests the parsing of a simple exclusive gateway with multiple when clauses and an else clause.\\n\\n`testGatewayWithoutElse()`: Tests the parsing of an exclusive gateway with a single when clause and no else clause.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberParser.java\&quot;:\&quot;This file contains the implementation of the `ObjectMemberParser` class, which is responsible for parsing object members (key-value pairs) in a programming language.\\n\\n`ObjectMemberParser`: A parser that recognizes object members in a programming language, such as `name: \\\&quot;Ana\\\&quot;`, `age: 25`, and `active: true`.\\n\\n`parse(ParserContext context)`: This method is responsible for implementing the parsing logic for object members, following the provided BNF grammar.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/elementos_trabajo/TaskElementParser.java\&quot;:\&quot;This file contains a single class and several functions:\\n\\n`TaskElementParser`: A parser for task elements within a process, which can include simple tasks and tasks with conditional logic.\\n\\n`parse(ParserContext context)`: Parses a task element, including the task name and the list of statements within the task\\u0027s action.\\n\\n`parseStatementList(ParserContext context)`: Parses a list of statements within the task\\u0027s action.\\n\\nThis file is part of a larger project that implements a domain-specific language for orchestrating processes, using a BPMN-style syntax. The `TaskElementParser` class is responsible for parsing the task elements within a process definition.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LiteralNode.java\&quot;:\&quot;`LiteralNode`: Represents literal values (numbers, strings, booleans, null) in the abstract syntax tree (AST) of a programming language.\\n\\n`parseLiteralValue`: Parses the literal value from a token based on its type.\\n`getValue`: Returns the value of the literal.\\n`getLiteralType`: Returns the type of the literal.\\n`getNodeType`: Returns the node type as \\\&quot;Literal\\\&quot;.\\n`getExpressionType`: Returns the expression type of the literal based on its type.\\n`toString`: Returns a string representation of the literal node.\\n\\nThis file defines the `LiteralNode` class, which is responsible for representing literal values (such as numbers, strings, booleans, and null) in the abstract syntax tree (AST) of a programming language. The class provides methods to parse the literal value from a token, retrieve the value and type of the literal, and generate a string representation of the node.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/BooleanLiteralNode.java\&quot;:\&quot;`BooleanLiteralNode`: Represents a boolean literal expression in the abstract syntax tree (AST) of the language.\\n\\n`getValue()`: Returns the boolean value of the literal expression.\\n\\n`getNodeType()`: Returns the node type as \\\&quot;BooleanLiteral\\\&quot;.\\n\\n`getExpressionType()`: Returns the expression type as \\\&quot;booleano\\\&quot;.\\n\\n`toString()`: Returns a string representation of the boolean literal expression.\\n\\nThis file defines a class `BooleanLiteralNode` that represents a boolean literal expression in the abstract syntax tree (AST) of the language. The class provides methods to access the boolean value, node type, expression type, and a string representation of the literal expression.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PrimaryExpressionParser.java\&quot;:\&quot;`PrimaryExpressionParser`: A parser for primary expressions in a programming language, which can be identifiers, literals, or expressions in parentheses.\\n\\n`parse(ParserContext context)`: Implements the parsing of primary expressions according to the provided BNF grammar.\\n\\nThis file contains a parser implementation for primary expressions in a programming language, which are the basic building blocks of expressions, including identifiers, literals, and expressions in parentheses. The parser is designed to follow the provided BNF grammar for primary expressions.\&quot;,\&quot;/target/classes/css/base.css\&quot;:\&quot;This file contains CSS styles for the FlowScript IDE, a user interface for a programming language. It defines the styles for various UI elements such as the menu bar, context menu, tool bar, split panes, tab pane, tree view, text fields, buttons, labels, progress indicators, scroll bars, and tooltips. The styles are used to create a consistent and visually appealing user interface for the FlowScript IDE.\&quot;,\&quot;/target/generated-sources/antlr4/FlowScriptProcessesParser.java\&quot;:\&quot;This file appears to be an ANTLR-generated parser for a language called \\\&quot;FlowScriptProcesses\\\&quot;. It does not contain any classes or functions, but rather defines a single rule called \\\&quot;program\\\&quot; which simply matches the end-of-file token. The purpose of this parser is to parse a program written in the FlowScriptProcesses language, but the grammar for this language is not provided in the given code.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/BlockParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `BlockParser` class, which is responsible for parsing block statements in a programming language.\\n\\n`BlockParserTest`: This class contains a set of test cases to verify the functionality of the `BlockParser`.\\n\\n`testEmptyBlock()`: This test verifies that the `BlockParser` can correctly parse an empty block.\\n`testBlockWithSingleStatement()`: This test verifies that the `BlockParser` can correctly parse a block with a single statement.\\n`testBlockWithMultipleStatements()`: This test verifies that the `BlockParser` can correctly parse a block with multiple statements.\\n`testBlockWithIfStatement()`: This test verifies that the `BlockParser` can correctly parse a block that contains an `if` statement.\\n`testNestedBlocks()`: This test verifies that the `BlockParser` can correctly parse nested blocks.\\n`testInvalidBlock_MissingClosingBrace()`: This test verifies that the `BlockParser` throws an exception when a block is missing a closing brace.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/afd/TokenRecognizer.java\&quot;:\&quot;This file defines an interface called `TokenRecognizer` that is used for token recognition in a lexer using finite automata.\\n\\n`TokenRecognizer`: An interface that defines the contract for token recognizers using finite automata.\\n\\n`recognize(String, int, int, int)`: Attempts to recognize a token from the input starting at the given position and returns the recognized token or `null` if no token is recognized.\\n\\n`getPriority()`: Gets the priority of this recognizer, which is used to resolve conflicts when multiple recognizers can match.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessDeclarationParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `ProcessDeclarationParser` class, which is responsible for parsing the process declaration in a process flow script.\\n\\n`ProcessDeclarationParserTest`: This class contains unit tests to verify the functionality of the `ProcessDeclarationParser`.\\n\\n`testSimpleProcess()`: This test verifies that the parser can correctly parse a simple process declaration with a single task.\\n\\n`testProcessWithMultipleElements()`: This test verifies that the parser can correctly parse a process declaration with multiple tasks and elements.\\n\\n`testProcessWithGateway()`: This test verifies that the parser can correctly parse a process declaration with a gateway element.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ObjectMemberNode.java\&quot;:\&quot;`ObjectMemberNode`: Represents a single key-value pair in an object literal, with the key being either a string or an identifier, and the value being an expression node.\\n\\n`getKey()`: Returns the key of the object member.\\n`isKeyString()`: Returns whether the key is a string or an identifier.\\n`getValue()`: Returns the value expression node of the object member.\\n`getNodeType()`: Returns the node type as \\\&quot;ObjectMember\\\&quot;.\\n`toString()`: Returns a string representation of the object member, with the key and the value expression node type.\\n\\nThis file defines the `ObjectMemberNode` class, which is part of the abstract syntax tree (AST) for object literal expressions in the FlowScript programming language. The class represents a single key-value pair within an object literal, with the key being either a string or an identifier, and the value being an expression node.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessBodyParserTest.java\&quot;:\&quot;This file contains a set of test cases for the `ProcessBodyParser` class, which is responsible for parsing the body of a process in a domain-specific language. The tests cover various scenarios, including empty process bodies, process bodies with start and end elements, process bodies with tasks, and process bodies with gateways.\\n\\n`ProcessBodyParserTest`: A test suite for the `ProcessBodyParser` class.\\n\\n`testEmptyProcessBody()`: Tests that the parser correctly handles an empty process body.\\n`testProcessBodyWithStartAndEnd()`: Tests that the parser correctly handles a process body with start and end elements.\\n`testProcessBodyWithStartTaskEnd()`: Tests that the parser correctly handles a process body with start, task, and end elements.\\n`testProcessBodyWithMultipleTasks()`: Tests that the parser correctly handles a process body with multiple tasks.\\n`testProcessBodyWithGateway()`: Tests that the parser correctly handles a process body with a gateway element.\\n`testProcessBodyWithParallelGateway()`: Tests that the parser correctly handles a process body with a parallel gateway element.\\n`testProcessBodyWithSpanishKeywords()`: Tests that the parser correctly handles a process body with Spanish keywords.\\n`testInvalidProcessBody_UnexpectedToken()`: Tests that the parser correctly throws an exception when an unexpected token is encountered.\&quot;,\&quot;/src/test/java/edu/eam/ingesoft/tlf/tester/FlowScriptProcessesTest.java\&quot;:\&quot;This file is a test suite for the FlowScriptProcesses grammar, which tests the complete system of processes and structure of the FlowScript program using reflection and test cases defined in a YAML file.\\n\\n`FlowScriptProcessesTest`: A class that tests the FlowScriptProcesses grammar, including imports, processes, nodes, gateways, and global variables.\\n\\n`createTestsFromYaml()`: A method that creates dynamic tests from the FlowScript Processes YAML file.\\n\\n`parseWithReflection()`: A method that parses an input using reflection to load the FlowScriptProcesses lexer and parser dynamically.\\n\\n`ParseResult`: A class that stores the result of parsing the FlowScriptProcesses grammar, including whether the input is valid, the list of errors, the parse tree, and the grammar name.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/JoinClauseParserTest.java\&quot;:\&quot;This file contains a test suite for the `JoinClauseParser` class, which is responsible for parsing a join clause in a process definition. The test suite covers various scenarios, including a simple join clause, a join clause with a complex target task name, and invalid join clauses.\\n\\n`JoinClauseParserTest`: A test suite for the `JoinClauseParser` class.\\n\\n`testSimpleJoinClause()`: Tests the parsing of a simple join clause with a target task name.\\n`testJoinClauseWithComplexName()`: Tests the parsing of a join clause with a complex target task name.\\n`testInvalidJoinClause_MissingArrow()`: Tests the parsing of an invalid join clause with a missing arrow.\\n`testInvalidJoinClause_MissingTarget()`: Tests the parsing of an invalid join clause with a missing target task name.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `VariableDeclarationParser` class, which is responsible for parsing variable declarations in a programming language.\\n\\n`VariableDeclarationParserTest`: This class contains a series of test cases to ensure the correct parsing of various types of variable declarations, including simple assignments, string values, expressions, function calls, object literals, and array literals.\\n\\n`testSimpleVariableDeclaration()`: This test checks the parsing of a simple variable declaration with a numeric value.\\n\\n`testVariableWithStringValue()`: This test checks the parsing of a variable declaration with a string value.\\n\\n`testVariableWithExpression()`: This test checks the parsing of a variable declaration with an expression as the initializer.\\n\\n`testVariableWithFunctionCall()`: This test checks the parsing of a variable declaration with a function call as the initializer.\\n\\n`testVariableWithObjectLiteral()`: This test checks the parsing of a variable declaration with an object literal as the initializer.\\n\\n`testVariableWithArrayLiteral()`: This test checks the parsing of a variable declaration with an array literal as the initializer.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/ObjectLiteralNode.java\&quot;:\&quot;This file defines the `ObjectLiteralNode` class, which represents an object literal expression in the abstract syntax tree (AST) of a programming language.\\n\\n`ObjectLiteralNode`: Represents an object literal expression in the AST, with an optional list of object members.\\n\\n`getMemberList()`: Returns the list of object members in the object literal expression.\\n`isEmpty()`: Checks if the object literal expression is empty (has no members).\\n`size()`: Returns the number of members in the object literal expression.\\n`getMembers()`: Returns the list of object members in the object literal expression.\\n`getNodeType()`: Returns the type of the AST node as a string.\\n`getExpressionType()`: Returns the type of the expression as a string.\\n`toString()`: Returns a string representation of the object literal expression.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LogicalOrExpressionNode.java\&quot;:\&quot;This file defines a class `LogicalOrExpressionNode` that represents a logical OR expression in an abstract syntax tree (AST) for a programming language.\\n\\n`LogicalOrExpressionNode`: Represents a logical OR expression with one or more operands and operators.\\n\\n`getOperands()`: Returns a list of the operands in the logical OR expression.\\n\\n`getOperators()`: Returns a list of the operator tokens (in this case, \\u0027or\\u0027) in the logical OR expression.\\n\\n`isSingleOperand()`: Checks if the logical OR expression has only a single operand.\\n\\n`getSingleOperand()`: If the logical OR expression has only a single operand, returns that operand.\\n\\n`getSimplified()`: Returns a simplified version of the logical OR expression, which is the single operand if there is only one.\\n\\n`getNodeType()`: Returns the type of the node, which is \\\&quot;LogicalOrExpression\\\&quot;.\\n\\n`getExpressionType()`: Returns the type of the expression, which is \\\&quot;boolean\\\&quot;.\\n\\n`toString()`: Returns a string representation of the logical OR expression.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ThrowStatementParserTest.java\&quot;:\&quot;This file contains a test suite for the `ThrowStatementParser` class, which is responsible for parsing the `throw` statement in the FlowScript programming language.\\n\\n`ThrowStatementParserTest`: This class contains unit tests for the `ThrowStatementParser` class, which verifies the correct parsing of `throw` statements with different types of expressions, such as objects, strings, and variables.\\n\\n`testThrowWithObject()`: This test verifies that the `ThrowStatementParser` can correctly parse a `throw` statement with an object expression.\\n\\n`testThrowWithString()`: This test verifies that the `ThrowStatementParser` can correctly parse a `throw` statement with a string expression.\\n\\n`testThrowWithVariable()`: This test verifies that the `ThrowStatementParser` can correctly parse a `throw` statement with a variable expression.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationStatementParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`VariableDeclarationStatementParser`: A parser that handles the declaration and assignment of variables within functions or processes in a programming language.\\n\\nThe file also contains the following functions:\\n\\n`parse()`: Implements the parsing of a variable declaration statement, following a specific set of steps.\\n\\nThis file is part of a larger project that deals with the syntactic parsing of a programming language. The `VariableDeclarationStatementParser` class is responsible for parsing variable declaration statements within functions or processes, as defined by the provided BNF grammar.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/StartElementNode.java\&quot;:\&quot;This file defines a single class:\\n\\n`StartElementNode`: This class represents the start element of a process in the abstract syntax tree (AST) of a flow script.\\n\\nThe file also defines the following functions:\\n\\n`getTargetNodeName()`: This function returns the name of the target node for the start element.\\n\\n`getNodeType()`: This function returns the type of the AST node, which is \\\&quot;StartElement\\\&quot; in this case.\\n\\n`toString()`: This function returns a string representation of the start element node, which includes the target node name.\\n\\nOverall, this file defines a class that represents the start element of a process in the AST of a flow script, and provides methods to access and represent the properties of this node.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/MultiplicativeExpressionParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`MultiplicativeExpressionParser`: A parser for multiplicative expressions in a programming language, following a specific BNF grammar.\\n\\nThe file also contains a single function:\\n\\n`parse(ParserContext context)`: Implements the parsing of multiplicative expressions according to the provided BNF grammar, supporting the operators `*` (multiplication), `/` (division), and `%` (modulo).\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/IntegerLiteralParserTest.java\&quot;:\&quot;This file contains a test suite for the `IntegerLiteralParser` class, which is responsible for parsing integer literals in a programming language.\\n\\n`IntegerLiteralParserTest`: This class contains a set of test cases to verify the functionality of the `IntegerLiteralParser`.\\n\\n`testSimpleInteger()`: This test case checks if the parser correctly parses a simple integer literal.\\n`testZero()`: This test case checks if the parser correctly parses the integer literal \\\&quot;0\\\&quot;.\\n`testIntegerWithUnderscore()`: This test case checks if the parser correctly parses an integer literal with underscores.\\n`testLargeInteger()`: This test case checks if the parser correctly parses a large integer literal.\\n`testIntegerWithMultipleUnderscores()`: This test case checks if the parser correctly parses an integer literal with multiple underscores.\\n`testInvalidInput_DecimalNumber()`: This test case checks if the parser correctly throws an exception when an invalid input (a decimal number) is provided.\\n`testInvalidInput_Identifier()`: This test case checks if the parser correctly throws an exception when an invalid input (an identifier) is provided.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/EqualityExpressionParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `EqualityExpressionParser` class, which is responsible for parsing equality expressions in a programming language.\\n\\n`EqualityExpressionParserTest`: This class contains a series of test cases to verify the functionality of the `EqualityExpressionParser`.\\n\\n`testEquals()`: This test verifies that the parser correctly parses an equality expression with the `\\u003d\\u003d` operator.\\n\\n`testNotEquals()`: This test verifies that the parser correctly parses an inequality expression with the `!\\u003d` operator.\\n\\n`testEqualsWithNumbers()`: This test verifies that the parser correctly parses an equality expression with numeric operands.\\n\\n`testNotEqualsWithStrings()`: This test verifies that the parser correctly parses an inequality expression with string operands.\\n\\n`testChainedEquality()`: This test verifies that the parser correctly parses a chained equality expression.\\n\\n`testEqualityWithComparison()`: This test verifies that the parser correctly parses an equality expression with a comparison operation.\\n\\n`testSingleRelationalExpression()`: This test verifies that the parser correctly parses a single relational expression.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/LexerDemo.java\&quot;:\&quot;This file is a demo class that showcases the functionality of the FlowScript lexer. It contains several examples of FlowScript code, including function declarations, process declarations, and expressions with various literals, and demonstrates how the lexer tokenizes and prints the tokens for each example.\\n\\n`LexerDemo`: A demo class that showcases the FlowScript lexer functionality.\\n\\n`tokenizeAndPrint(String code)`: Tokenizes the given code and prints the tokens.\\n\\n`tokenizeAndPrint(String code, boolean includeComments)`: Tokenizes the given code, including comments if specified, and prints the tokens.\\n\\n`formatValue(String value)`: Formats the value of a token for display, truncating long values and escaping special characters.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/afd/DecimalLiteralRecognizer.java\&quot;:\&quot;This file contains a single class `DecimalLiteralRecognizer` that implements the `TokenRecognizer` interface to recognize decimal (floating-point) literals in a programming language\\u0027s lexer.\\n\\n`DecimalLiteralRecognizer`: A class that recognizes decimal (floating-point) literals in a programming language\\u0027s lexer, supporting formats like `3.14`, `1.23e-5`, `-0.5`, and `1e10`.\\n\\n`recognize(String, int, int, int)`: A method that takes an input string, starting position, line, and column, and attempts to recognize a decimal literal, returning a `Token` object if successful, or `null` if not.\\n\\n`isDigit(char)`: A helper method that checks if a given character is a digit (0-9).\\n\\n`getPriority()`: A method that returns the priority of the decimal literal recognizer, which is higher than the integer literal recognizer to ensure that decimal literals are recognized first.\&quot;,\&quot;/target/classes/css/console.css\&quot;:\&quot;This file contains CSS styles for a console-like user interface in a JavaFX application. It defines styles for the text area, console text, and the console input field. There are no classes or functions defined in this file. The file provides a consistent and visually appealing styling for the console-specific elements of the application.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/control_flujo/ParallelGatewayParser.java\&quot;:\&quot;This file contains a parser for parallel gateways in a process control flow language. It defines the following classes and functions:\\n\\n`ParallelGatewayParser`: A parser that handles the parsing of parallel gateways in the process control flow language.\\n\\n`parse(ParserContext context)`: Parses a parallel gateway from the given parser context, including the gateway name, parallel branches, and join clause.\\n\\nThe file also imports several other classes and interfaces related to the parsing of the process control flow language, such as `Token`, `TokenType`, `IParser`, `Parser`, `ParserContext`, and various AST node classes.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessDeclarationParser.java\&quot;:\&quot;This file contains a single class and several functions:\\n\\n`ProcessDeclarationParser`: A parser that handles the declaration of a process in a process-oriented programming language.\\n\\n`parse(ParserContext context)`: Parses a process declaration, including the process name and the process body, and returns a `ProcessDeclarationNode` object representing the parsed process.\\n\\nThis file is part of a larger project that implements a process-oriented programming language, specifically focused on the parsing of process declarations. The `ProcessDeclarationParser` class is responsible for parsing the structure of a process, including the process name and the process body, which is then parsed by the `ProcessBodyParser` class.\&quot;,\&quot;/src/main/java/com/flowscript/ide/components/TokenTablePane.java\&quot;:\&quot;This file contains a single class `TokenTablePane` which is a JavaFX component that displays tokens in a table format. The file also contains several helper functions to initialize the UI, update the token table, format token values, and load CSS styles.\\n\\n`TokenTablePane`: A JavaFX component that displays tokens in a table format, with features like auto-update, inclusion of comments, and color-coding of token categories.\\n\\n`initializeUI()`: Initializes the UI components, including the header, controls, and the token table.\\n`updateTokens(String code)`: Updates the token table with the provided code, handling errors and displaying the token information.\\n`formatValue(String value)`: Formats the token value for display, truncating long values and escaping special characters.\\n`getCategoryForToken(TokenType type)`: Determines the category of a token based on its type.\\n`getErrorPosition(String errorMessage)`: Extracts the error position from the error message.\\n`setOnRefresh(Runnable action)`: Sets the action handler for the refresh button.\\n`isAutoUpdate()`: Returns whether auto-update is enabled.\\n`loadStyles()`: Loads the CSS styles for the token table.\\n`TokenRow`: An inner class representing a row in the token table, containing information about the token.\&quot;,\&quot;/target/classes/css/syntax-highlighting.css\&quot;:\&quot;This file contains CSS styles for syntax highlighting in a RichTextFX-based code editor for the FlowScript programming language. It defines various styles for different language elements, such as keywords, function names, process names, task names, gateways, numbers, strings, comments, operators, punctuation, braces, parentheses, brackets, and identifiers. It also includes styles for the console output, matching brackets/braces, current line highlight, selection, and search highlight.\\n\\nThere are no classes or functions defined in this file. The file is focused on providing a comprehensive set of CSS styles to enable syntax highlighting for the FlowScript programming language within a RichTextFX-based code editor.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/afd/StringLiteralRecognizer.java\&quot;:\&quot;This file contains a single class, `StringLiteralRecognizer`, which implements the `TokenRecognizer` interface to recognize string literals with escape sequences in a programming language.\\n\\n`StringLiteralRecognizer`: A class that recognizes string literals with escape sequences, such as `\\\&quot;Hello World\\\&quot;`, `\\\&quot;Line 1\\\\nLine 2\\\&quot;`, and `\\\&quot;Quote: \\\\\\\&quot;Hello\\\\\\\&quot;\\\&quot;`.\\n\\n`recognize(String, int, int, int)`: A method that takes an input string, a starting position, a line number, and a column number, and returns a `Token` object representing the recognized string literal, or `null` if the input is not a valid string literal.\\n\\n`isHexDigit(char)`: A helper method that checks if a given character is a hexadecimal digit.\\n\\n`getPriority()`: A method that returns the priority of the `StringLiteralRecognizer` class, which is used to determine the order in which recognizers are applied.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/EqualityExpressionParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`EqualityExpressionParser`: A parser for equality expressions in a programming language, following a specific BNF grammar.\\n\\nThe file also contains one function:\\n\\n`parse(ParserContext context)`: Implements the parsing of equality expressions according to the provided BNF grammar, but the implementation is not provided and is marked as a task for the student.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/BooleanLiteralParserTest.java\&quot;:\&quot;This file contains a test suite for the `BooleanLiteralParser` class, which is responsible for parsing boolean literal expressions in a programming language.\\n\\n`BooleanLiteralParserTest`: This class contains unit tests to verify the behavior of the `BooleanLiteralParser` class.\\n\\n`testTrueLiteral()`: This test verifies that the `BooleanLiteralParser` correctly parses the boolean literal \\\&quot;true\\\&quot;.\\n\\n`testFalseLiteral()`: This test verifies that the `BooleanLiteralParser` correctly parses the boolean literal \\\&quot;false\\\&quot;.\\n\\n`testInvalidInput_Identifier()`: This test verifies that the `BooleanLiteralParser` throws a `Parser.ParseException` when an invalid input (an identifier) is provided.\\n\\n`testInvalidInput_Integer()`: This test verifies that the `BooleanLiteralParser` throws a `Parser.ParseException` when an invalid input (an integer) is provided.\\n\\n`testInvalidInput_CapitalizedTrue()`: This test verifies that the `BooleanLiteralParser` throws a `Parser.ParseException` when an invalid input (a capitalized \\\&quot;true\\\&quot;) is provided.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ExclusiveGatewayNode.java\&quot;:\&quot;This file defines an `ExclusiveGatewayNode` class, which represents an exclusive gateway (XOR) in a process flow. The class contains information about the gateway name, a list of `WhenClauseNode` objects, and an optional `ElseClauseNode` object.\\n\\n`ExclusiveGatewayNode`: Represents an exclusive gateway (XOR) in a process flow, with a name, a list of when clauses, and an optional else clause.\\n\\n`getGatewayName()`: Returns the name of the exclusive gateway.\\n\\n`getWhenClauses()`: Returns a list of `WhenClauseNode` objects representing the when clauses of the exclusive gateway.\\n\\n`getElseClause()`: Returns the `ElseClauseNode` object representing the else clause of the exclusive gateway, if present.\\n\\n`getNodeType()`: Returns the string \\\&quot;ExclusiveGateway\\\&quot; as the node type.\\n\\n`toString()`: Returns a string representation of the exclusive gateway, including its name and the number of when clauses and whether an else clause is present.\&quot;,\&quot;/src/main/java/com/flowscript/ide/syntax/FlowScriptSyntaxHighlighter.java\&quot;:\&quot;This file contains a single class `FlowScriptSyntaxHighlighter` that provides syntax highlighting for the FlowScript programming language.\\n\\n`FlowScriptSyntaxHighlighter`: This class is responsible for highlighting the syntax of FlowScript code, including keywords, function/process/task/gateway names, numbers, strings, comments, and other language constructs.\\n\\n`computeHighlighting(String text)`: This function takes a FlowScript code snippet as input and returns a `StyleSpans` object that contains the highlighted text.\\n\\n`isKeyword(String word)`: This helper function checks if a given word is a FlowScript keyword.\\n\\n`isStructureKeyword(String word)`, `isFlowKeyword(String word)`, `isControlKeyword(String word)`, `isTypeKeyword(String word)`, `isValueKeyword(String word)`, `isOperatorKeyword(String word)`, `isFutureKeyword(String word)`: These helper functions check if a given word belongs to a specific category of FlowScript keywords.\\n\\n`getAllKeywords()`, `getStructureKeywords()`, `getFlowKeywords()`, `getControlKeywords()`, `getTypeKeywords()`, `getValueKeywords()`, `getOperatorKeywords()`, `getFutureKeywords()`: These helper functions return the lists of FlowScript keywords for various categories.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/EqualityExpressionNode.java\&quot;:\&quot;This file defines the `EqualityExpressionNode` class, which represents equality expressions in the abstract syntax tree (AST) of a programming language.\\n\\n`EqualityExpressionNode`: Represents equality expressions in the AST, such as `expr \\u003d\\u003d expr` and `expr !\\u003d expr`.\\n\\n`EqualityExpressionNode(Token, ExpressionNode)`: Constructs a new `EqualityExpressionNode` with the first token and the first operand.\\n\\n`addOperand(Token, ExpressionNode)`: Adds a new operand and operator to the `EqualityExpressionNode`.\\n\\n`getOperands()`: Returns a list of all the operands in the `EqualityExpressionNode`.\\n\\n`getOperators()`: Returns a list of all the operators in the `EqualityExpressionNode`.\\n\\n`isSingleOperand()`: Checks if the `EqualityExpressionNode` has only a single operand.\\n\\n`getSingleOperand()`: Returns the single operand of the `EqualityExpressionNode`, if it has only one.\\n\\n`getSimplified()`: Returns a simplified version of the `EqualityExpressionNode`, which is the single operand if there is only one.\\n\\n`getNodeType()`: Returns the node type of the `EqualityExpressionNode`, which is \\\&quot;EqualityExpression\\\&quot;.\\n\\n`getExpressionType()`: Returns the expression type of the `EqualityExpressionNode`, which is \\\&quot;boolean\\\&quot;.\\n\\n`toString()`: Returns a string representation of the `EqualityExpressionNode`.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/MultiplicativeExpressionNode.java\&quot;:\&quot;This file defines the `MultiplicativeExpressionNode` class, which represents multiplicative expressions in the abstract syntax tree (AST) of a programming language.\\n\\n`MultiplicativeExpressionNode`: Represents multiplicative expressions (e.g., `expr * expr`, `expr / expr`, `expr % expr`) in the AST.\\n\\n`MultiplicativeExpressionNode(Token, ExpressionNode)`: Constructs a new `MultiplicativeExpressionNode` with the first token and the first operand.\\n\\n`addOperand(Token, ExpressionNode)`: Adds a new operand and operator to the expression.\\n\\n`getOperands()`: Returns a list of all operands in the expression.\\n\\n`getOperators()`: Returns a list of all operators in the expression.\\n\\n`isSingleOperand()`: Checks if the expression has only a single operand.\\n\\n`getSingleOperand()`: Returns the single operand if the expression has only one operand.\\n\\n`getSimplified()`: Returns a simplified version of the expression, which is the single operand if there is only one.\\n\\n`getNodeType()`: Returns the node type as \\\&quot;MultiplicativeExpression\\\&quot;.\\n\\n`getExpressionType()`: Returns the expression type as \\\&quot;numeric\\\&quot;.\\n\\n`toString()`: Returns a string representation of the `MultiplicativeExpressionNode`.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/ImportDeclarationNode.java\&quot;:\&quot;This file defines the `ImportDeclarationNode` class, which represents import declarations (both standard imports and JAR imports) in the FlowScript programming language.\\n\\n`ImportDeclarationNode`: Represents an import declaration, which can be either a standard import or a JAR import, and includes the module path and an optional alias.\\n\\n`isJarImport()`: Returns whether the import declaration is for a JAR file.\\n`getModulePath()`: Returns the module path for the import declaration.\\n`getAlias()`: Returns the alias for the import declaration, if any.\\n`getDeclaredName()`: Returns the declared name of the import, which is the alias if present, or the module name extracted from the path.\\n`getNodeType()`: Returns the type of the import declaration node, either \\\&quot;JarImportDeclaration\\\&quot; or \\\&quot;ImportDeclaration\\\&quot;.\\n`toString()`: Returns a string representation of the import declaration node.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/listas_argumentos/ExpressionListNode.java\&quot;:\&quot;This file defines a single class:\\n\\n`ExpressionListNode`: Represents a list of expression nodes, which can be used within list literals and other constructs requiring expression sequences.\\n\\nThe file also defines the following functions:\\n\\n`ExpressionListNode(Token, List\\u003cExpressionNode\\u003e)`: Constructs an `ExpressionListNode` with the given first token and list of expression nodes.\\n\\n`ExpressionListNode(ExpressionNode)`: Constructs an `ExpressionListNode` with a single expression node.\\n\\n`addExpression(ExpressionNode)`: Adds an expression node to the list of expressions.\\n\\n`getExpressions()`: Returns a new list containing all the expression nodes.\\n\\n`size()`: Returns the number of expression nodes in the list.\\n\\n`isEmpty()`: Returns `true` if the list of expressions is empty.\\n\\n`getExpression(int)`: Returns the expression node at the specified index.\\n\\n`getNodeType()`: Returns the string `\\\&quot;ExpressionList\\\&quot;`.\\n\\n`toString()`: Returns a string representation of the `ExpressionListNode`.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/Lexer.java\&quot;:\&quot;This file contains the main `Lexer` class for the FlowScript language, which uses multiple `TokenRecognizer` classes to tokenize the input. Here\\u0027s a summary of the classes and functions in the file:\\n\\n`Lexer`: The main lexer class that tokenizes the input string using a set of `TokenRecognizer` instances.\\n\\n`Lexer.initializeRecognizers()`: Initializes the list of `TokenRecognizer` instances and sorts them by priority.\\n`Lexer.tokenize()`: Tokenizes the input string and returns a list of `Token` objects.\\n`Lexer.skipWhitespace()`: Skips over whitespace characters in the input string.\\n`Lexer.recognizeNextToken()`: Tries to recognize the next token in the input string using the `TokenRecognizer` instances.\\n`Lexer.getTokenLength()`: Calculates the length of a token based on its value and type.\\n`Lexer.updatePosition()`: Updates the current position, line, and column based on the token\\u0027s value.\\n`Lexer.LexicalException`: A custom exception class for lexical errors.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/TryStatementParserTest.java\&quot;:\&quot;This file contains a test suite for the `TryStatementParser` class, which is responsible for parsing the syntax of a try-catch statement in a programming language.\\n\\n`TryStatementParserTest`: This class contains unit tests to verify the functionality of the `TryStatementParser`.\\n\\n`testSimpleTryCatch()`: This test verifies that the parser correctly parses a simple try-catch statement with a single statement in the try block and a single statement in the catch block.\\n\\n`testTryCatchWithMultipleStatements()`: This test verifies that the parser correctly parses a try-catch statement with multiple statements in the try and catch blocks.\\n\\n`testNestedTryCatch()`: This test verifies that the parser correctly parses a try-catch statement that contains a nested try-catch statement.\\n\\n`testInvalidTry_MissingCatch()`: This test verifies that the parser correctly throws an exception when a try statement is missing a catch block.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/NullLiteralNode.java\&quot;:\&quot;This file defines a single class:\\n\\n`NullLiteralNode`: Represents a null literal expression in the abstract syntax tree (AST) of a programming language.\\n\\nThe file also defines the following functions:\\n\\n`getValue()`: Returns the value of the null literal, which is always `null`.\\n\\n`getNodeType()`: Returns the type of the node, which is \\\&quot;NullLiteral\\\&quot;.\\n\\n`getExpressionType()`: Returns the expression type of the node, which is \\\&quot;nulo\\\&quot;.\\n\\n`toString()`: Returns a string representation of the null literal node.\\n\\nThis file is part of a larger project that implements a programming language\\u0027s abstract syntax tree and related functionality.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/ProgramNode.java\&quot;:\&quot;This file defines the `ProgramNode` class, which represents the root node of the FlowScript Abstract Syntax Tree (AST) and contains all top-level declarations (imports, functions, processes, variables).\\n\\n`ProgramNode`: Represents the root node of the FlowScript AST, containing all top-level declarations.\\n\\n`addDeclaration(DeclarationNode declaration)`: Adds a new declaration node to the list of declarations in the program.\\n\\n`getDeclarations()`: Returns a new list of all the declaration nodes in the program.\\n\\n`getNodeType()`: Returns the string \\\&quot;Program\\\&quot; as the node type.\\n\\n`toString()`: Returns a string representation of the program, indicating the number of declarations it contains.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/TryStatementNode.java\&quot;:\&quot;`TryStatementNode`: Represents a try/catch statement for error handling in the abstract syntax tree (AST) of a programming language.\\n\\n`getTryBlock()`: Returns the try block of the try/catch statement.\\n\\n`getCatchVariable()`: Returns the catch variable of the try/catch statement.\\n\\n`getCatchBlock()`: Returns the catch block of the try/catch statement.\\n\\n`getNodeType()`: Returns the node type of the try/catch statement, which is \\\&quot;TryStatement\\\&quot;.\\n\\n`toString()`: Returns a string representation of the try/catch statement, including the catch variable.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/TernaryExpressionParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `TernaryExpressionParser` class, which is responsible for parsing ternary expressions in a programming language.\\n\\n`TernaryExpressionParserTest`: This class contains a series of test cases to verify the functionality of the `TernaryExpressionParser`.\\n\\n`testSimpleTernary()`: This test verifies that the parser can correctly parse a simple ternary expression.\\n`testTernaryWithBooleans()`: This test verifies that the parser can correctly parse a ternary expression with boolean values.\\n`testTernaryWithStrings()`: This test verifies that the parser can correctly parse a ternary expression with string values.\\n`testTernaryWithExpressions()`: This test verifies that the parser can correctly parse a ternary expression with more complex expressions.\\n`testNestedTernary()`: This test verifies that the parser can correctly parse a nested ternary expression.\\n`testTernaryWithLogicalOr()`: This test verifies that the parser can correctly parse a ternary expression with a logical OR expression.\\n`testPlainLogicalOrExpression()`: This test verifies that the parser can correctly parse a plain logical OR expression.\\n`testTernaryWithFunctionCalls()`: This test verifies that the parser can correctly parse a ternary expression with function calls.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ArgumentListNode.java\&quot;:\&quot;`ArgumentListNode`: Represents an argument list in a function call, containing a list of expression nodes.\\n\\n`getNodeType()`: Returns the node type as \\\&quot;ArgumentList\\\&quot;.\\n\\n`toString()`: Returns a string representation of the argument list, including the number of arguments.\\n\\n`getArguments()`: Returns a new list containing the arguments in the argument list.\\n\\n`size()`: Returns the number of arguments in the argument list.\\n\\n`isEmpty()`: Returns true if the argument list is empty.\\n\\n`getArgument(int index)`: Returns the argument at the specified index.\\n\\n`addArgument(ExpressionNode argument)`: Adds a new argument to the argument list.\\n\\nThis file defines the `ArgumentListNode` class, which represents an argument list in a function call. The class contains a list of `ExpressionNode` objects, which represent the individual arguments. The class provides methods to access and manipulate the arguments in the list.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/LiteralParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`LiteralParser`: A parser that determines the type of a literal (integer, decimal, boolean, string, null, object, or list) and delegates to the appropriate parser to parse the literal.\\n\\nThe file also contains the following function:\\n\\n`parse()`: Implements the parsing of a literal according to the provided BNF grammar, and delegates to the appropriate parser based on the type of the literal.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessBodyParser.java\&quot;:\&quot;This file contains the `ProcessBodyParser` class and several parser functions for parsing the elements of a process in a BPMN-style process definition language.\\n\\n`ProcessBodyParser`: Coordinates the parsing of all the elements that make up a BPMN process.\\n\\n`parse(ParserContext context)`: Parses the process body, which consists of a sequence of process elements (start, task, gateway, end).\\n\\n`parseProcessElement(ParserContext context)`: Parses a single process element based on the current token in the parser context.\\n\\nThe file also imports several other parser classes for parsing specific process elements, such as `StartElementParser`, `TaskElementParser`, `EndElementParser`, `ExclusiveGatewayParser`, and `ParallelGatewayParser`.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/afd/KeywordRecognizer.java\&quot;:\&quot;This file contains a single class:\\n\\n`KeywordRecognizer`: A class that recognizes keywords and reserved words using a finite automaton approach.\\n\\nThe file also contains the following functions:\\n\\n`recognize(String input, int startPos, int line, int column)`: Recognizes a keyword or reserved word from the input string, starting at the given position, and returns a `Token` object if a keyword is found.\\n\\n`isIdentifierStart(char c)`: Checks if the given character is a valid start character for an identifier (letter or underscore).\\n\\n`isIdentifierPart(char c)`: Checks if the given character is a valid part of an identifier (letter, underscore, or digit).\\n\\n`getPriority()`: Returns the priority of the `KeywordRecognizer` class, which is used to determine the order in which recognizers are applied.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ReturnStatementParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`ReturnStatementParser`: A parser for return statements in a programming language, which can handle return statements with or without expressions.\\n\\nThe file also contains the following functions:\\n\\n`parse(ParserContext context)`: Implements the parsing logic for return statements, following the steps outlined in the documentation.\\n\\nThis file is part of a larger project that implements a syntactic parser for a programming language, specifically handling return statements as part of the control flow functionality.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ExpressionListParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`ExpressionListParser`: A parser that recognizes lists of expressions, such as those used in list literals (e.g., `[1, 2, 3]`).\\n\\nThe file also contains one function:\\n\\n`parse(ParserContext context)`: Parses a list of expressions and returns a list of `ExpressionListNode` objects.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalAndExpressionParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `LogicalAndExpressionParser` class, which is responsible for parsing logical AND expressions in a programming language.\\n\\n`LogicalAndExpressionParserTest`: This class contains a series of test cases to verify the functionality of the `LogicalAndExpressionParser`.\\n\\n`testSimpleAnd()`: This test verifies that the parser can correctly parse a simple logical AND expression with boolean literals.\\n\\n`testAndWithIdentifiers()`: This test verifies that the parser can correctly parse a logical AND expression with identifiers.\\n\\n`testChainedAnd()`: This test verifies that the parser can correctly parse a chained logical AND expression.\\n\\n`testAndWithComparisons()`: This test verifies that the parser can correctly parse a logical AND expression with comparison operators.\\n\\n`testAndWithEquality()`: This test verifies that the parser can correctly parse a logical AND expression with equality operators.\\n\\n`testComplexAndExpression()`: This test verifies that the parser can correctly parse a complex logical AND expression with a combination of comparison and equality operators.\\n\\n`testSingleEqualityExpression()`: This test verifies that the parser can correctly parse a single equality expression.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/EndElementNode.java\&quot;:\&quot;`EndElementNode`: A class that represents the end element of a process in the abstract syntax tree (AST).\\n\\n`getEndName()`: Returns the name of the end element.\\n\\n`getNodeType()`: Returns the type of the AST node, which is \\\&quot;EndElement\\\&quot;.\\n\\n`toString()`: Returns a string representation of the end element node, including its name.\\n\\nThis file defines a class `EndElementNode` that represents the end element of a process in the abstract syntax tree (AST) of a programming language. The class has methods to retrieve the name of the end element, the type of the AST node, and a string representation of the node.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixExpressionParser.java\&quot;:\&quot;`PostfixExpressionParser`: A parser for postfix expressions, which are expressions consisting of a primary expression followed by zero or more postfix operators (member access, indexing, function calls).\\n\\n`parse(ParserContext context)`: Implements the parsing of a postfix expression according to the provided BNF grammar, which is a task for the student to complete.\\n\\nThis file defines a parser for postfix expressions, which are a type of expression used in programming languages. The parser is responsible for parsing and constructing the abstract syntax tree (AST) representation of a postfix expression, following a specific BNF grammar. The implementation of the `parse()` method is left as a task for the student.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/afd/IdentifierRecognizer.java\&quot;:\&quot;This file contains the implementation of the `IdentifierRecognizer` class, which is responsible for recognizing identifiers in a programming language.\\n\\n`IdentifierRecognizer`: A class that implements the `TokenRecognizer` interface to recognize identifiers in a programming language.\\n\\n`recognize(String, int, int, int)`: A method that takes an input string, a starting position, a line number, and a column number, and returns a `Token` object if the input matches the identifier pattern, or `null` if it does not.\\n\\n`isIdentifierStart(char)`: A helper method that checks if a given character is a valid start character for an identifier.\\n\\n`isIdentifierPart(char)`: A helper method that checks if a given character is a valid part of an identifier.\\n\\n`getPriority()`: A method that returns the priority of the `IdentifierRecognizer` class, which is used to determine the order in which token recognizers are applied.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/BooleanLiteralParser.java\&quot;:\&quot;`BooleanLiteralParser`: A parser that recognizes boolean literals in English (true/false) and Spanish (verdadero/falso).\\n\\n`parse(ParserContext context)`: Implements the parsing of boolean literals according to the provided BNF grammar.\\n\\nThis file contains a parser implementation for boolean literals, which is part of a larger syntactic analysis framework. The parser is responsible for recognizing and parsing boolean literal expressions in the input, following the provided BNF grammar.\&quot;,\&quot;/src/test/java/edu/eam/ingesoft/tlf/tester/FlowScriptFunctionsTest.java\&quot;:\&quot;This file is a test suite for the FlowScriptFunctions grammar. It uses reflection to dynamically load the lexer and parser classes, and then runs a series of test cases defined in a YAML file to validate the functionality of the FlowScript Functions language.\\n\\n`FlowScriptFunctionsTest`: A class that tests the FlowScriptFunctions grammar using dynamic tests loaded from a YAML file.\\n\\n`createTestsFromYaml()`: A method that creates dynamic tests from the examples defined in the YAML file.\\n\\n`parseWithReflection(String)`: A method that uses reflection to parse a given input string using the FlowScriptFunctions grammar.\\n\\n`ParseResult`: A class that stores the result of parsing an input string, including whether the parse was successful, the list of errors, the parse tree, and the name of the grammar.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/TaskElementNode.java\&quot;:\&quot;This file defines a single class:\\n\\n`TaskElementNode`: Represents a task within a process, containing a task name and a list of action statements.\\n\\nThe file does not contain any functions. It appears to be part of a larger codebase that represents an abstract syntax tree (AST) for a process-oriented programming language.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/VariableDeclarationNode.java\&quot;:\&quot;`VariableDeclarationNode`: Represents a top-level variable declaration (global constant) in the abstract syntax tree (AST) of the program.\\n\\n`getVariableName()`: Returns the name of the declared variable.\\n\\n`getInitializer()`: Returns the initializer expression for the variable declaration.\\n\\n`getDeclaredName()`: Returns the name of the declared variable.\\n\\n`getNodeType()`: Returns the type of the AST node, which is \\\&quot;VariableDeclaration\\\&quot;.\\n\\n`toString()`: Returns a string representation of the variable declaration node.\\n\\nThis file defines a class `VariableDeclarationNode` that represents a top-level variable declaration (global constant) in the abstract syntax tree (AST) of a program. The class provides methods to access the name of the declared variable, the initializer expression, and other information about the node.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalOrExpressionParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `LogicalOrExpressionParser` class, which is responsible for parsing logical OR expressions in a programming language.\\n\\n`LogicalOrExpressionParserTest`: This class contains a series of test cases to verify the functionality of the `LogicalOrExpressionParser`.\\n\\n`testSimpleOr()`: This test verifies that the parser can correctly parse a simple logical OR expression with boolean literals.\\n\\n`testOrWithIdentifiers()`: This test verifies that the parser can correctly parse a logical OR expression with identifiers.\\n\\n`testChainedOr()`: This test verifies that the parser can correctly parse a chained logical OR expression.\\n\\n`testOrWithComparisons()`: This test verifies that the parser can correctly parse a logical OR expression with comparison operators.\\n\\n`testOrWithAndPrecedence()`: This test verifies that the parser correctly handles the precedence between logical AND and logical OR operators.\\n\\n`testComplexOrExpression()`: This test verifies that the parser can correctly parse a complex logical OR expression with multiple comparisons.\\n\\n`testSingleAndExpression()`: This test verifies that the parser can correctly handle a single expression without any logical OR operators.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PostfixOperatorNode.java\&quot;:\&quot;This file defines the abstract `PostfixOperatorNode` class and its three concrete subclasses: `PropertyAccessOperatorNode`, `IndexAccessOperatorNode`, and `FunctionCallOperatorNode`. These classes represent different types of postfix operators in the abstract syntax tree (AST) of a programming language.\\n\\n`PostfixOperatorNode`: An abstract class that represents postfix operators in the AST.\\n\\n`PropertyAccessOperatorNode`: Represents the property access operator (`.`) in the AST.\\n\\n`IndexAccessOperatorNode`: Represents the index access operator (`[]`) in the AST.\\n\\n`FunctionCallOperatorNode`: Represents the function call operator (`()`) in the AST.\&quot;,\&quot;/target/classes/css/dark-theme.css\&quot;:\&quot;This file appears to be a CSS stylesheet that defines a dark theme for a FlowScript IDE (Integrated Development Environment). It does not contain any classes or functions, but rather a set of CSS rules that style various UI elements of the IDE, such as the menu bar, context menu, tool bar, tab pane, tree view, text fields, buttons, labels, progress indicators, scroll bars, tooltips, status bar, and console. The overall purpose of this file is to provide a consistent and visually appealing dark theme for the FlowScript IDE.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/ListLiteralParserTest.java\&quot;:\&quot;This file contains a test suite for the `ListLiteralParser` class, which is responsible for parsing list literals in a programming language.\\n\\n`ListLiteralParserTest`: A test suite for the `ListLiteralParser` class, which verifies the parser\\u0027s ability to handle various list literal scenarios, including empty lists, lists with single elements, lists with multiple elements of different types, lists with identifiers, nested lists, and lists with expressions.\\n\\n`testEmptyList()`: Tests the parser\\u0027s ability to handle an empty list.\\n`testListWithSingleElement()`: Tests the parser\\u0027s ability to handle a list with a single element.\\n`testListWithMultipleIntegers()`: Tests the parser\\u0027s ability to handle a list with multiple integer elements.\\n`testListWithMixedTypes()`: Tests the parser\\u0027s ability to handle a list with elements of mixed types (integer, string, boolean, null).\\n`testListWithIdentifiers()`: Tests the parser\\u0027s ability to handle a list with identifiers as elements.\\n`testNestedList()`: Tests the parser\\u0027s ability to handle a nested list.\\n`testListWithExpressions()`: Tests the parser\\u0027s ability to handle a list with expressions as elements.\\n`testInvalidInput_MissingClosingBracket()`: Tests the parser\\u0027s ability to handle an invalid input with a missing closing bracket.\\n`testInvalidInput_NotAList()`: Tests the parser\\u0027s ability to handle an invalid input that is not a list.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationParser.java\&quot;:\&quot;This file contains a parser implementation for variable declaration statements in a programming language. It includes the following classes and functions:\\n\\n`VariableDeclarationParser`: A parser that handles the declaration and assignment of variables in the programming language.\\n\\n`parse(ParserContext context)`: This function is responsible for parsing a variable declaration statement, including consuming the variable identifier, the assignment operator, and the expression for the variable\\u0027s value.\\n\\nThe file also includes a detailed BNF grammar and examples for the variable declaration syntax, as well as instructions for the student to implement the `parse()` method.\&quot;,\&quot;/CLAUDE.md\&quot;:\&quot;This file does not contain any classes or functions. Instead, it provides a detailed specification for the FlowScript programming language, which is a language for modeling and executing workflow processes. The file covers the general description, design principles, lexical structure and syntax, functions, processes, error handling, modularity, and a complete example of an e-commerce process. The file serves as a comprehensive reference for the FlowScript language.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/FunctionCallNode.java\&quot;:\&quot;`FunctionCallNode`: Represents a function call expression, with a function and a list of arguments.\\n\\n`getFunction()`: Returns the function expression.\\n`getArguments()`: Returns a list of argument expressions.\\n`getArgumentCount()`: Returns the number of arguments.\\n`getNodeType()`: Returns the node type as \\\&quot;FunctionCall\\\&quot;.\\n`getExpressionType()`: Returns the expression type as \\\&quot;function_result\\\&quot;.\\n`toString()`: Returns a string representation of the function call.\\n\\nThis file defines a `FunctionCallNode` class that represents a function call expression in an abstract syntax tree (AST). The class holds the function expression and a list of argument expressions, and provides methods to access and manipulate these elements.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PostfixExpressionNode.java\&quot;:\&quot;This file defines a class `PostfixExpressionNode` that represents a postfix expression in an abstract syntax tree (AST) for a programming language.\\n\\n`PostfixExpressionNode`: Represents a postfix expression in an AST, consisting of a primary expression and a list of postfix operators.\\n\\n`getPrimary()`: Returns the primary expression of the postfix expression.\\n`getOperators()`: Returns a list of the postfix operators applied to the primary expression.\\n`hasOperators()`: Checks if the postfix expression has any operators.\\n`getSimplified()`: Returns the primary expression if there are no postfix operators, or the postfix expression itself if there are operators.\\n`getNodeType()`: Returns the node type as \\\&quot;PostfixExpression\\\&quot;.\\n`getExpressionType()`: Returns the expression type as \\\&quot;postfix_result\\\&quot;.\\n`toString()`: Returns a string representation of the postfix expression.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/IntegerLiteralNode.java\&quot;:\&quot;This file defines a single class:\\n\\n`IntegerLiteralNode`: Represents an integer literal expression in the abstract syntax tree (AST) of a programming language.\\n\\nThe file also defines the following functions:\\n\\n`getRawValue()`: Returns the raw string value of the integer literal as it appears in the source code.\\n`getValue()`: Returns the parsed numeric value of the integer literal as a `BigInteger`.\\n`getLongValue()`: Returns the parsed numeric value of the integer literal as a `long`.\\n`getIntValue()`: Returns the parsed numeric value of the integer literal as an `int`.\\n`fitsInInt()`: Checks if the parsed numeric value of the integer literal can fit in an `int` data type.\\n`fitsInLong()`: Checks if the parsed numeric value of the integer literal can fit in a `long` data type.\\n`getNodeType()`: Returns the type of the AST node as a string.\\n`getExpressionType()`: Returns the type of the expression as a string.\\n`toString()`: Returns a string representation of the integer literal node.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/navegacion/GotoStatementParser.java\&quot;:\&quot;This file contains a single class and one function:\\n\\n`GotoStatementParser`: A parser for handling \\\&quot;goto\\\&quot; statements in a process navigation context, which allows for jumping between different nodes in a process.\\n\\n`parse`: Parses a \\\&quot;goto\\\&quot; statement, which consists of the \\\&quot;go_to\\\&quot; keyword followed by an identifier representing the target node to jump to, and returns a `GotoStatementNode` object representing the parsed statement.\\n\\nThe file also provides a detailed description of the grammar and usage of the \\\&quot;goto\\\&quot; statement, as well as its categorization within the context of process orchestration (BPMN-style) grammars.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_ejecucion/StatementNode.java\&quot;:\&quot;This file defines a base class for all statement nodes in the FlowScript Abstract Syntax Tree (AST).\\n\\n`StatementNode`: This is an abstract class that serves as the base class for all statement nodes in the FlowScript AST. Statements are executable units that perform actions but don\\u0027t return values.\\n\\n`getNodeType()`: This method returns the node type as a string, which in this case is \\\&quot;Statement\\\&quot;.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/WhenClauseParser.java\&quot;:\&quot;This file contains a single class, `WhenClauseParser`, which is responsible for parsing \\\&quot;when\\\&quot; clauses in exclusive gateways in a process flow. The file also includes a `parse` method that is not yet implemented, which is the main task for the student.\\n\\n`WhenClauseParser`: A parser for \\\&quot;when\\\&quot; clauses in exclusive gateways in a process flow.\\n\\n`parse`: Parses a \\\&quot;when\\\&quot; clause and returns a `WhenClauseNode` object.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_ejecucion/BlockNode.java\&quot;:\&quot;`BlockNode`: Represents a block of statements enclosed in braces, containing a list of `StatementNode` objects.\\n\\n`addStatement(StatementNode statement)`: Adds a `StatementNode` to the list of statements in the `BlockNode`.\\n\\n`getStatements()`: Returns a new `ArrayList` containing the list of `StatementNode` objects in the `BlockNode`.\\n\\n`getNodeType()`: Returns the string \\\&quot;Block\\\&quot; as the node type.\\n\\n`toString()`: Returns a string representation of the `BlockNode` with the number of statements it contains.\\n\\nThis file defines a `BlockNode` class that represents a block of statements enclosed in braces, with methods to add and retrieve the statements within the block.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/ObjectLiteralParserTest.java\&quot;:\&quot;This file contains a test suite for the `ObjectLiteralParser` class, which is responsible for parsing object literal expressions in a programming language.\\n\\n`ObjectLiteralParserTest`: A test suite for the `ObjectLiteralParser` class, which verifies the parser\\u0027s ability to handle various object literal expressions, including empty objects, objects with single and multiple members, objects with string keys, nested objects, objects with array values, and objects with expression values.\\n\\n`testEmptyObject()`: Tests the parser\\u0027s ability to handle an empty object literal.\\n`testObjectWithSingleMember()`: Tests the parser\\u0027s ability to handle an object literal with a single member.\\n`testObjectWithMultipleMembers()`: Tests the parser\\u0027s ability to handle an object literal with multiple members.\\n`testObjectWithStringKeys()`: Tests the parser\\u0027s ability to handle an object literal with string keys.\\n`testNestedObject()`: Tests the parser\\u0027s ability to handle a nested object literal.\\n`testObjectWithArrayValue()`: Tests the parser\\u0027s ability to handle an object literal with an array value.\\n`testObjectWithExpressionValues()`: Tests the parser\\u0027s ability to handle an object literal with expression values.\\n`testObjectWithMixedKeyTypes()`: Tests the parser\\u0027s ability to handle an object literal with a mix of string and non-string keys.\\n`testInvalidInput_MissingClosingBrace()`: Tests the parser\\u0027s ability to handle an invalid input with a missing closing brace.\\n`testInvalidInput_NotAnObject()`: Tests the parser\\u0027s ability to handle an invalid input that is not an object literal.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterListParserTest.java\&quot;:\&quot;This file contains a test suite for the `ParameterListParser` class, which is responsible for parsing a list of function parameters in a programming language.\\n\\n`ParameterListParserTest`: This class contains unit tests for the `ParameterListParser` class, which verifies the correct parsing of single parameters, multiple parameters, and parameters with different types, as well as handling invalid parameter lists.\\n\\n`testSingleParameter()`: This test verifies that the `ParameterListParser` correctly parses a single parameter.\\n\\n`testMultipleParameters()`: This test verifies that the `ParameterListParser` correctly parses multiple parameters.\\n\\n`testParametersWithDifferentTypes()`: This test verifies that the `ParameterListParser` correctly parses parameters with different types.\\n\\n`testInvalidParameterList_MissingComma()`: This test verifies that the `ParameterListParser` correctly throws a `Parser.ParseException` when encountering an invalid parameter list (missing comma).\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ForStatementParserTest.java\&quot;:\&quot;This file contains a test suite for the `ForStatementParser` class, which is responsible for parsing `for each` loop statements in a programming language.\\n\\n`ForStatementParserTest`: A test suite for the `ForStatementParser` class, which verifies the correct parsing of various `for each` loop constructs.\\n\\n`testSimpleForLoop()`: Tests the parsing of a simple `for each` loop with a single statement in the loop body.\\n\\n`testForLoopWithArray()`: Tests the parsing of a `for each` loop that iterates over an array.\\n\\n`testForLoopWithMultipleStatements()`: Tests the parsing of a `for each` loop with multiple statements in the loop body.\\n\\n`testNestedForLoop()`: Tests the parsing of a nested `for each` loop.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/tipos_parametros/ParameterNode.java\&quot;:\&quot;This file defines a single class:\\n\\n`ParameterNode`: Represents a function parameter with a name and a type.\\n\\nThe file does not contain any functions. It appears to be part of a larger codebase that deals with the abstract syntax tree (AST) representation of function parameters in a programming language.\&quot;,\&quot;/target/classes/css/monokai-theme.css\&quot;:\&quot;This file appears to be a CSS stylesheet for a Monokai theme for a FlowScript IDE. It does not contain any classes or functions, but rather defines the visual styles for various UI elements of the IDE, such as the root, menu bar, context menu, tool bar, tab pane, tree view, text fields, buttons, labels, progress indicators, scroll bars, tooltips, status bar, and console. The stylesheet aims to provide a consistent and visually appealing Monokai-inspired theme for the FlowScript IDE.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/RelationalExpressionParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `RelationalExpressionParser` class, which is responsible for parsing relational expressions in a programming language.\\n\\n`RelationalExpressionParserTest`: This class contains a series of test cases to verify the functionality of the `RelationalExpressionParser`.\\n\\n`testLessThan()`: This test case checks if the parser correctly parses a less-than comparison expression.\\n\\n`testGreaterThan()`: This test case checks if the parser correctly parses a greater-than comparison expression.\\n\\n`testLessThanOrEqual()`: This test case checks if the parser correctly parses a less-than-or-equal-to comparison expression.\\n\\n`testGreaterThanOrEqual()`: This test case checks if the parser correctly parses a greater-than-or-equal-to comparison expression.\\n\\n`testChainedComparison()`: This test case checks if the parser correctly parses a chained comparison expression.\\n\\n`testComparisonWithExpression()`: This test case checks if the parser correctly parses a comparison expression with additional expressions.\\n\\n`testSingleAdditiveExpression()`: This test case checks if the parser correctly parses a single additive expression.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/ElseClauseParser.java\&quot;:\&quot;This file contains the implementation of the `ElseClauseParser` class, which is responsible for parsing the \\\&quot;else\\\&quot; clause in exclusive gateways in a process flow.\\n\\n`ElseClauseParser`: This class implements the `IParser\\u003cElseClauseNode\\u003e` interface and is responsible for parsing the \\\&quot;else\\\&quot; clause in exclusive gateways.\\n\\n`parse(ParserContext context)`: This method is responsible for parsing the \\\&quot;else\\\&quot; clause and creating an `ElseClauseNode` object.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/elementos_core/StartElementParser.java\&quot;:\&quot;This file contains a single class and one function:\\n\\n`StartElementParser`: A parser for the start element of a process in a BPMN-style process orchestration grammar.\\n\\n`parse`: Parses the start element of a process, which consists of the \\u0027start\\u0027 keyword, an arrow \\u0027-\\u003e\\u0027, and an identifier for the target element.\\n\\nThe file also includes a detailed description of the BNF grammar for the start element, the category of the grammar, and examples of its usage.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/TernaryExpressionNode.java\&quot;:\&quot;`TernaryExpressionNode`: Represents a ternary conditional expression in the abstract syntax tree (AST) of a programming language.\\n\\n`getCondition()`: Returns the condition expression of the ternary expression.\\n`getTrueExpression()`: Returns the expression to be evaluated if the condition is true.\\n`getFalseExpression()`: Returns the expression to be evaluated if the condition is false.\\n`getNodeType()`: Returns the type of the AST node as a string.\\n`getExpressionType()`: Returns the type of the expression, determined by the true/false branches.\\n`toString()`: Returns a string representation of the ternary expression.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/PrimaryExpressionParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `PrimaryExpressionParser` class, which is responsible for parsing primary expressions in a programming language.\\n\\n`PrimaryExpressionParserTest`: This class contains a series of test cases to verify the functionality of the `PrimaryExpressionParser` class.\\n\\n`testIdentifier()`: This test case verifies that the parser can correctly parse an identifier.\\n`testIntegerLiteral()`: This test case verifies that the parser can correctly parse an integer literal.\\n`testStringLiteral()`: This test case verifies that the parser can correctly parse a string literal.\\n`testBooleanLiteral()`: This test case verifies that the parser can correctly parse a boolean literal.\\n`testListLiteral()`: This test case verifies that the parser can correctly parse a list literal.\\n`testObjectLiteral()`: This test case verifies that the parser can correctly parse an object literal.\\n`testParenthesizedExpression()`: This test case verifies that the parser can correctly parse a parenthesized expression.\\n`testNestedParenthesizedExpression()`: This test case verifies that the parser can correctly parse a nested parenthesized expression.\\n`testComplexParenthesizedExpression()`: This test case verifies that the parser can correctly parse a complex parenthesized expression.\\n`testInvalidInput_MissingClosingParen()`: This test case verifies that the parser correctly handles an invalid input with a missing closing parenthesis.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/ExpressionStatementNode.java\&quot;:\&quot;`ExpressionStatementNode`: Represents a statement that consists of a single expression, such as a function call or variable assignment.\\n\\n`getExpression()`: Returns the expression associated with the statement.\\n\\n`getNodeType()`: Returns the type of the node, which is \\\&quot;ExpressionStatement\\\&quot;.\\n\\n`toString()`: Returns a string representation of the node, including the type of the expression.\\n\\nThis file defines a class called `ExpressionStatementNode` that represents a statement in a programming language that consists of a single expression, such as a function call or variable assignment. The class extends the `StatementNode` class and contains a reference to the expression being represented.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixExpressionParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `PostfixExpressionParser` class, which is responsible for parsing postfix expressions in a programming language.\\n\\n`PostfixExpressionParserTest`: This class contains a series of test cases that verify the functionality of the `PostfixExpressionParser` class, including property access, array access, function calls, and method calls.\\n\\n`testPropertyAccess()`: This test verifies that the parser can correctly parse a simple property access expression.\\n\\n`testChainedPropertyAccess()`: This test verifies that the parser can correctly parse a chained property access expression.\\n\\n`testArrayAccess()`: This test verifies that the parser can correctly parse a simple array access expression.\\n\\n`testArrayAccessWithExpression()`: This test verifies that the parser can correctly parse an array access expression with a more complex expression as the index.\\n\\n`testFunctionCall()`: This test verifies that the parser can correctly parse a simple function call expression.\\n\\n`testFunctionCallWithArguments()`: This test verifies that the parser can correctly parse a function call expression with arguments.\\n\\n`testMethodCall()`: This test verifies that the parser can correctly parse a simple method call expression.\\n\\n`testMethodCallWithArguments()`: This test verifies that the parser can correctly parse a method call expression with arguments.\\n\\n`testChainedOperators()`: This test verifies that the parser can correctly parse a complex expression with chained operators.\\n\\n`testComplexChaining()`: This test verifies that the parser can correctly parse a complex expression with multiple levels of chaining.\\n\\n`testArrayOfFunctionCalls()`: This test verifies that the parser can correctly parse an expression that involves an array of function calls.\\n\\n`testPlainPrimaryExpression()`: This test verifies that the parser can correctly parse a simple primary expression.\&quot;,\&quot;/src/main/java/com/flowscript/ide/components/CodeEditorPane.java\&quot;:\&quot;This file contains a single class `CodeEditorPane` which is a JavaFX component that provides a code editor with syntax highlighting, auto-completion, and smart indentation for the FlowScript programming language. The class handles creating and managing tabs for new and opened files, as well as providing functionality for saving and opening files.\\n\\n`CodeEditorPane`: A JavaFX component that provides a code editor with syntax highlighting, auto-completion, and smart indentation for the FlowScript programming language.\\n\\n`initializeComponents()`: Initializes the components of the `CodeEditorPane`, including creating the tab pane and the welcome tab.\\n\\n`setupEventHandlers()`: Sets up event handlers for the tab pane, such as handling tab selection.\\n\\n`newFile()`: Creates a new tab with a default FlowScript template.\\n\\n`openFile()`: Opens a file chooser dialog to select a FlowScript file and creates a new tab with the file\\u0027s contents.\\n\\n`openFile(File file)`: Opens a FlowScript file and creates a new tab with its contents.\\n\\n`saveFile()`: Saves the current file, either to the existing file path or by prompting the user to choose a new file path.\\n\\n`saveAsFile()`: Prompts the user to choose a file path and saves the current file to the selected location.\\n\\n`createNewTab(String title, String content)`: Creates a new tab with the given title and content.\\n\\n`createNewTab(String title, String content, String filePath)`: Creates a new tab with the given title, content, and file path.\\n\\n`computeHighlighting(String text)`: Computes the syntax highlighting for the given text using the `FlowScriptSyntaxHighlighter`.\\n\\n`setupAutoCompletion(CodeArea codeArea)`: Sets up auto-completion functionality for the given `CodeArea`.\\n\\n`setupSmartIndentation(CodeArea codeArea)`: Sets up smart indentation functionality for the given `CodeArea`.\\n\\n`showAutoCompletion(CodeArea codeArea)`: Displays a context menu with FlowScript keywords for auto-completion.\\n\\n`getCurrentLine(String textBeforeCaret)`: Retrieves the current line from the given text before the caret position.\\n\\n`getIndentation(String line)`: Retrieves the indentation of the given line.\\n\\n`getFlowScriptTemplate()`: Returns a default FlowScript template.\\n\\n`showError(String title, String message)`: Displays an error dialog with the given title and message.\\n\\n`setOnTextChanged(Runnable onTextChanged)`: Sets a callback function to be executed when the text in the code editor changes.\\n\\n`getCurrentText()`: Retrieves the current text in the selected code editor tab.\\n\\n`insertText(String text)`: Inserts the given text at the current caret position in the selected code editor tab.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalAndExpressionParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`LogicalAndExpressionParser`: A parser for logical AND expressions in a programming language, following a specific BNF grammar.\\n\\nThe file also contains one function:\\n\\n`parse(ParserContext context)`: Implements the parsing of logical AND expressions according to the provided BNF grammar.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ArgumentListParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`ArgumentListParser`: A parser for argument lists in function calls, following a specific BNF grammar.\\n\\nThe file also contains one function:\\n\\n`parse(ParserContext context)`: Parses a list of arguments, returning a list of `ArgumentListNode` objects.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterParser.java\&quot;:\&quot;`ParameterParser`: A parser that handles the parsing of individual function parameters, which consist of an identifier and a type.\\n\\n`parse(ParserContext context)`: Parses a function parameter, consuming the identifier, the colon, and the type, and returns a `ParameterNode` representing the parsed parameter.\\n\\nThis file contains a parser implementation for parsing individual function parameters in a programming language. The parser follows a specific grammar and can be used to parse parameters in the context of function declarations.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberParserTest.java\&quot;:\&quot;This file contains a test suite for the `ObjectMemberParser` class, which is responsible for parsing object member expressions in a programming language.\\n\\n`ObjectMemberParserTest`: This class contains a series of test cases to verify the functionality of the `ObjectMemberParser`.\\n\\n`testIdentifierKey()`: This test verifies that the parser correctly parses an object member with an identifier as the key.\\n\\n`testStringKey()`: This test verifies that the parser correctly parses an object member with a string literal as the key.\\n\\n`testValueAsInteger()`: This test verifies that the parser correctly parses an object member with an integer value.\\n\\n`testValueAsBoolean()`: This test verifies that the parser correctly parses an object member with a boolean value.\\n\\n`testValueAsObject()`: This test verifies that the parser correctly parses an object member with an object value.\\n\\n`testValueAsExpression()`: This test verifies that the parser correctly parses an object member with an expression as the value.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ThrowStatementParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`ThrowStatementParser`: A parser that handles the parsing of `throw` statements in the FlowScript programming language.\\n\\nThe file also contains the following functions:\\n\\n`parse()`: Implements the parsing of a `throw` statement, including consuming the `throw` keyword and parsing the expression that is being thrown.\\n\\nThis file is part of the FlowScript programming language implementation, and it specifically handles the parsing of `throw` statements, which are used to throw exceptions in the language.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixOperatorParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`PostfixOperatorParser`: A parser for postfix operators in a programming language, including member access, indexing, and function calls.\\n\\nThe file also contains one function:\\n\\n`parse(ParserContext context)`: Implements the parsing of postfix operators according to the provided BNF grammar.\&quot;,\&quot;/README-TokenAnalysis.md\&quot;:\&quot;This document does not contain any classes or functions. It is a description of the Token Analysis Feature in the FlowScript IDE, which includes the following key points:\\n\\n1. The Token Analysis panel is located on the right side of the GUI, next to the code editor, and provides real-time updates as the user writes code.\\n2. The panel displays information about each token, including the line, column, token type, value, and category, with color-coding for different token categories.\\n3. The feature includes interactive controls, integration with syntax validation, and error handling, and provides examples of how the token analysis can be used during FlowScript development.\\n4. The token analysis feature helps developers understand how the FlowScript lexer interprets the code, identify tokenization issues, verify that the code is being parsed correctly, and support the development of the FlowScript language.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/UnaryExpressionNode.java\&quot;:\&quot;`UnaryExpressionNode`: Represents a unary expression, such as negation or logical not, in the abstract syntax tree (AST) of a programming language.\\n\\n`getOperator()`: Returns the operator of the unary expression.\\n`getOperand()`: Returns the operand of the unary expression.\\n`getNodeType()`: Returns the type of the node, which is \\\&quot;UnaryExpression\\\&quot;.\\n`getExpressionType()`: Determines the type of the expression based on the operator.\\n`toString()`: Returns a string representation of the unary expression.\\n\\nThis file defines the `UnaryExpressionNode` class, which is part of the abstract syntax tree (AST) for a programming language. The class represents a unary expression, such as negation or logical not, and provides methods to access the operator and operand of the expression, as well as to determine the type of the expression.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/UnaryExpressionParserTest.java\&quot;:\&quot;This file contains a test suite for the `UnaryExpressionParser` class, which is responsible for parsing unary expressions in a programming language. The test suite covers various scenarios, including negation, logical not, double negation, and negation with identifiers and parentheses.\\n\\n`UnaryExpressionParserTest`: A test suite for the `UnaryExpressionParser` class.\\n\\n`testNegation()`: Tests the parsing of a negative integer expression.\\n`testLogicalNot()`: Tests the parsing of a logical not expression.\\n`testDoubleNegation()`: Tests the parsing of a double negation expression.\\n`testDoubleLogicalNot()`: Tests the parsing of a double logical not expression.\\n`testNegationWithIdentifier()`: Tests the parsing of a negation expression with an identifier.\\n`testLogicalNotWithIdentifier()`: Tests the parsing of a logical not expression with an identifier.\\n`testPlainPostfixExpression()`: Tests the parsing of a plain postfix expression.\\n`testNegationWithParentheses()`: Tests the parsing of a negation expression with parentheses.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/NullLiteralParserTest.java\&quot;:\&quot;This file contains a test suite for the `NullLiteralParser` class, which is responsible for parsing the `null` literal in the language\\u0027s syntax.\\n\\n`NullLiteralParserTest`: This class tests the functionality of the `NullLiteralParser` class, ensuring that it correctly parses the `null` literal and throws appropriate exceptions for invalid inputs.\\n\\n`testNullLiteral()`: This test method verifies that the `NullLiteralParser` correctly parses the `null` literal.\\n\\n`testInvalidInput_Identifier()`: This test method ensures that the `NullLiteralParser` throws an exception when the input is an identifier instead of the `null` literal.\\n\\n`testInvalidInput_CapitalizedNull()`: This test method ensures that the `NullLiteralParser` throws an exception when the input is a capitalized `Null` instead of the lowercase `null` literal.\\n\\n`testInvalidInput_Integer()`: This test method ensures that the `NullLiteralParser` throws an exception when the input is an integer instead of the `null` literal.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LogicalAndExpressionNode.java\&quot;:\&quot;This file defines a class `LogicalAndExpressionNode` that represents a logical AND expression in an abstract syntax tree (AST) for a programming language.\\n\\n`LogicalAndExpressionNode`: Represents a logical AND expression with one or more operands and operators.\\n\\n`getOperands()`: Returns a list of the operands in the logical AND expression.\\n\\n`getOperators()`: Returns a list of the \\u0027and\\u0027 operators in the logical AND expression.\\n\\n`isSingleOperand()`: Checks if the logical AND expression has only a single operand.\\n\\n`getSingleOperand()`: Returns the single operand if the logical AND expression has only one operand.\\n\\n`getSimplified()`: Returns a simplified version of the logical AND expression, which is the single operand if there is only one.\\n\\n`getNodeType()`: Returns the type of the node, which is \\\&quot;LogicalAndExpression\\\&quot;.\\n\\n`getExpressionType()`: Returns the type of the expression, which is \\\&quot;boolean\\\&quot;.\\n\\n`toString()`: Returns a string representation of the logical AND expression.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/listas_argumentos/ObjectMemberListNode.java\&quot;:\&quot;This file defines the `ObjectMemberListNode` class and the `ObjectMemberNode` class, which represent object member lists and individual object members, respectively, in the abstract syntax tree (AST) of a programming language.\\n\\n`ObjectMemberListNode`: Represents a list of object members, where each member is a key-value pair.\\n\\n`ObjectMemberListNode(Token, List\\u003cObjectMemberNode\\u003e)`: Constructs an `ObjectMemberListNode` with the given first token and list of object members.\\n\\n`ObjectMemberListNode(ObjectMemberNode)`: Constructs an `ObjectMemberListNode` with a single object member.\\n\\n`addMember(ObjectMemberNode)`: Adds a new object member to the list.\\n\\n`getMembers()`: Returns a list of all the object members.\\n\\n`size()`: Returns the number of object members in the list.\\n\\n`isEmpty()`: Returns `true` if the list is empty, `false` otherwise.\\n\\n`getMember(int)`: Returns the object member at the specified index.\\n\\n`getMemberMap()`: Returns a `Map` of the object members, where the keys are the member keys and the values are the member values.\\n\\n`getNodeType()`: Returns the node type as a string.\\n\\n`toString()`: Returns a string representation of the `ObjectMemberListNode`.\\n\\n`ObjectMemberNode`: Represents a single object member, consisting of a key and a value.\\n\\n`ObjectMemberNode(Token, String, ExpressionNode)`: Constructs an `ObjectMemberNode` with the given key token, key string, and value expression.\\n\\n`getKey()`: Returns the key of the object member.\\n\\n`getValue()`: Returns the value of the object member.\\n\\n`getNodeType()`: Returns the node type as a string.\\n\\n`toString()`: Returns a string representation of the `ObjectMemberNode`.\&quot;,\&quot;/src/main/java/com/flowscript/ide/FlowScriptIDE.java\&quot;:\&quot;This file is the main entry point for the FlowScript IDE application. It sets up the user interface, including the menu bar, toolbar, and various panes for the project explorer, code editor, console, and token analysis. The file also handles event handling, theme management, and execution of FlowScript code.\\n\\n`FlowScriptIDE`: The main application class that extends `javafx.application.Application` and provides the entry point for the FlowScript IDE.\\n\\n`initializeServices()`: Initializes the `ProjectService` and `ThemeService` instances.\\n\\n`createMainLayout()`: Constructs the main layout of the IDE, including the menu bar, toolbar, and various panes.\\n\\n`createMenuBar()`: Creates the main menu bar with options for file, edit, view, run, tools, and help.\\n\\n`createToolBar()`: Creates the toolbar with buttons for common operations like new, open, save, undo, redo, run, debug, and search.\\n\\n`createToolButton(String)`: Creates a custom toolbar button with an icon and tooltip.\\n\\n`setupEventHandlers()`: Registers event handlers for various UI components, such as file selection in the project explorer, text changes in the code editor, and console commands.\\n\\n`setupMenuEventHandlers(Menu...)`: Sets up event handlers for menu items.\\n\\n`handleMenuAction(String)`: Handles the actions triggered by menu items, such as creating a new file, opening a file, saving a file, running the current file, and validating the syntax.\\n\\n`runCurrentFile()`: Executes the current FlowScript file in the console.\\n\\n`validateCurrentFile()`: Performs lexical analysis on the current FlowScript code and displays the results in the console.\\n\\n`executeCommand(String)`: Processes and executes commands entered in the console, such as \\\&quot;clear\\\&quot; and \\\&quot;run [file]\\\&quot;.\\n\\n`changeTheme(ThemeService.Theme)`: Changes the theme of the IDE and applies the new theme to the scene.\\n\\n`showErrorDialog(String, String, String)`: Displays an error dialog with the provided title, header, and content.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/DeclarationNode.java\&quot;:\&quot;`DeclarationNode`: Base class for all declaration nodes in FlowScript, which define new entities like imports, functions, processes, or variables.\\n\\n`getDeclaredName()`: Returns the name of the declared entity (if applicable).\\n\\nThis file defines the `DeclarationNode` class, which is an abstract base class for all declaration nodes in the FlowScript language. The class provides a common structure and functionality for nodes that represent declarations of various entities, such as imports, functions, processes, or variables. The `getDeclaredName()` method is an abstract method that allows subclasses to provide the name of the declared entity.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/TypeParser.java\&quot;:\&quot;This file contains a single class, `TypeParser`, which is responsible for parsing type declarations in the FlowScript programming language.\\n\\n`TypeParser`: Parses type declarations in the FlowScript programming language, such as `integer`, `decimal`, `boolean`, `text`, `list`, `object`, and `void`.\\n\\n`parse(ParserContext context)`: Parses a type declaration from the provided `ParserContext` and returns a `TypeNode` object representing the parsed type.\\n\\n`isValidType(Token token)`: Checks whether the given token represents a valid type in the FlowScript programming language.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/IParser.java\&quot;:\&quot;This file defines an interface called `IParser` that is common to all parsers in the FlowScript project. The interface defines a contract that all parsers must follow, facilitating the composition and reuse of parsers by following the principle of \\\&quot;one parser per grammar rule\\\&quot;.\\n\\n`IParser\\u003cT extends ASTNode\\u003e`: This interface defines the common contract for all FlowScript parsers, where `T` is the type of AST node that the parser produces.\\n\\n`parse(ParserContext context)`: This method parses the input according to the specific grammar rule of the parser and returns the resulting AST node. If an error occurs during parsing, it throws a `Parser.ParseException`.\&quot;,\&quot;/src/main/resources/css/dark-theme.css\&quot;:\&quot;This file appears to be a CSS stylesheet that defines a dark theme for a FlowScript IDE (Integrated Development Environment). It does not contain any classes or functions, but rather a set of CSS rules that style various UI elements of the IDE, such as the menu bar, context menu, tool bar, tab pane, tree view, text fields, buttons, labels, progress indicators, scroll bars, tooltips, and the status bar. The stylesheet aims to provide a consistent and visually appealing dark theme for the IDE.\&quot;,\&quot;/src/main/java/com/flowscript/ide/services/ProjectService.java\&quot;:\&quot;This file contains the `ProjectService` class, which is responsible for managing the current project, including loading, creating, and saving project configurations, as well as finding FlowScript files and collecting project statistics. The file also includes functions for managing recent projects.\\n\\n`ProjectService`: Manages the current project, including loading, creating, and saving project configurations, as well as finding FlowScript files and collecting project statistics.\\n\\n`setCurrentProject(String projectPath)`: Sets the current project and saves the project path to user preferences.\\n`getCurrentProject()`: Returns the current project path.\\n`loadLastProject()`: Loads the last project from user preferences.\\n`hasCurrentProject()`: Checks if there is a current project.\\n`createProject(String projectPath, String projectName)`: Creates a new project with the specified path and name.\\n`loadProjectConfig()`: Loads the project configuration from the current project path.\\n`saveProjectConfig(File projectDir, Map\\u003cString, Object\\u003e config)`: Saves the project configuration to the specified project directory.\\n`saveCurrentProjectConfig()`: Saves the current project configuration.\\n`getProjectConfig()`: Returns a copy of the current project configuration.\\n`updateProjectConfig(String key, Object value)`: Updates the specified key in the project configuration.\\n`getProjectName()`: Returns the project name.\\n`getProjectVersion()`: Returns the project version.\\n`getProjectDescription()`: Returns the project description.\\n`findFlowScriptFiles()`: Finds all FlowScript files in the current project.\\n`getProjectStatistics()`: Collects and returns various statistics about the current project.\\n`getRecentProjects()`: Returns a list of the 10 most recent projects.\\n`addToRecentProjects(String projectPath)`: Adds the specified project path to the list of recent projects.\\n`closeCurrentProject()`: Saves the current project configuration, adds the current project to the list of recent projects, and clears the current project.\&quot;,\&quot;/src/test/resources/flowscript-functions.yaml\&quot;:\&quot;This file defines test cases for validating the grammar of functions in the FlowScript programming language. It does not contain any classes, but it defines several functions with different characteristics to test the grammar. Here are the functions and their summaries:\\n\\n`greet`: A function that prints \\\&quot;Hello World\\\&quot; without any parameters or return value.\\n`double`: A function that takes an integer parameter and returns its double.\\n`add`: A function that takes three parameters (two integers and one decimal) and returns their sum as a decimal.\\n`process_data`: A function that takes four parameters (integer, decimal, boolean, text) and returns a text value based on the active status.\\n`process_list`: A function that takes a list and an object as parameters and returns a transformed list.\\n`categorize`: A function that takes an integer score and returns a text value based on the score range.\\n`count_down`: A function that takes an integer and prints a countdown from that number to 0.\\n`sum_list`: A function that takes a list of numbers and returns their sum as a decimal.\\n`fill_array`: A function that takes an integer size and returns a list of squares.\\n`even_numbers`: A function that takes an integer max and returns a list of even numbers up to that max.\\n`find_first_even`: A function that takes a list of numbers and returns the first even number found, or -1 if none are found.\\n`safe_divide`: A function that takes two decimal parameters and returns their division, handling division by zero errors.\\n`complex_operation`: A function that performs a complex operation and returns a boolean value, handling different types of errors.\\n`validate_age`: A function that takes an integer age and throws an error if it is negative or exceeds 150.\\n`calculate_compound_interest`: A function that calculates compound interest based on principal, rate, and time.\\n`is_valid_user`: A function that takes a user object and returns a boolean indicating if the user is valid.\\n`extract_user_info`: A function that takes a response object and returns a user information object.\\n`create_range`: A function that takes start and end integers and returns a list of numbers in that range.\\n`create_user`: A function that takes user information and returns a complex user object.\\n`process_orders`: A function that takes a list of orders and returns a summary object.\\n`factorial`: A recursive function that calculates the factorial of a given integer.\\n`fibonacci`: A recursive function that calculates the Fibonacci sequence up to a given index.\\n`sum_nested`: A recursive function that sums the values in a nested list structure.\\n`add`: A function that adds two integers and returns their sum.\\n`multiply`: A function that multiplies two integers and returns their product.\\n`calculate`: A function that calls the `add` and `multiply` functions and returns their sum.\\n`is_even`: A function that recursively checks if a given integer is even.\\n`is_odd`: A function that recursively checks if a given integer is odd.\&quot;,\&quot;/src/test/resources/flowscript-processes.yaml\&quot;:\&quot;This file defines test cases for validating the grammar of FlowScript Processes. It includes various examples of valid and invalid process definitions, as well as tests for global variables, imports, functions, and complex expressions. The file does not contain any classes or functions, but rather serves as a set of test cases to ensure the correctness of the FlowScript Processes grammar.\&quot;,\&quot;/target/generated-sources/antlr4/FlowScriptFunctionsListener.java\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`enterFunctionDeclaration`: This function is called when the parser enters a function declaration in the parse tree.\\n\\n`exitFunctionDeclaration`: This function is called when the parser exits a function declaration in the parse tree.\\n\\nThis file defines a listener interface for the `FlowScriptFunctionsParser` that provides callbacks for entering and exiting function declarations in the parse tree.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ReturnStatementNode.java\&quot;:\&quot;This file defines a single class:\\n\\n`ReturnStatementNode`: Represents a return statement in a function, which can optionally include an expression to be returned.\\n\\nThe file does not contain any functions, but rather defines a class that represents a return statement in a function\\u0027s abstract syntax tree (AST). The `ReturnStatementNode` class encapsulates the information about a return statement, including whether it has a return value or not.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/FunctionDeclarationNode.java\&quot;:\&quot;`FunctionDeclarationNode`: Represents a function declaration with a name, parameters, return type, and implementation body.\\n\\n`getName()`: Returns the name of the function.\\n`getParameters()`: Returns a list of the function\\u0027s parameters.\\n`getReturnType()`: Returns the return type of the function.\\n`getReturnTypeName()`: Returns the name of the function\\u0027s return type.\\n`getBody()`: Returns the implementation body of the function.\\n`getDeclaredName()`: Returns the name of the function.\\n`getNodeType()`: Returns the type of the node, which is \\\&quot;FunctionDeclaration\\\&quot;.\\n`toString()`: Returns a string representation of the function declaration.\\n\\nThis file defines a class `FunctionDeclarationNode` that represents a function declaration in a programming language. The class contains information about the function\\u0027s name, parameters, return type, and implementation body.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/ExpressionStatementParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`ExpressionStatementParser`: A parser that parses an expression statement, which consists of a single expression, and creates an `ExpressionStatementNode` object representing the parsed statement.\\n\\nThe file also contains the following functions:\\n\\n`parse(ParserContext context)`: Implements the parsing of an expression statement by using the `ExpressionParser` to parse the expression and then creating an `ExpressionStatementNode` with the parsed expression.\\n\\nThis file is part of a larger project that deals with parsing and processing statements in a programming language. The `ExpressionStatementParser` is responsible for handling statements that consist of a single expression, such as function calls, mathematical operations, and property accesses.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/JoinClauseNode.java\&quot;:\&quot;This file defines a single class:\\n\\n`JoinClauseNode`: Represents a join clause in a parallel gateway, which defines the synchronization point where all parallel branches converge.\\n\\nThe file also defines the following function:\\n\\n`getTargetTask()`: Returns the target task for the join clause.\\n\\nThis file is part of the `com.flowscript.sintactic.ast.process.clausulas_control` package and represents a node in the Abstract Syntax Tree (AST) for a join clause in a parallel gateway.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/Parser.java\&quot;:\&quot;This file contains the main parser for the FlowScript programming language. It coordinates the process of converting a sequence of tokens into an abstract syntax tree (AST).\\n\\n`Parser`: The main entry point for the FlowScript parser, which invokes the `ProgramParser` to process the initial symbol of the grammar.\\n\\n`ParseException`: An exception thrown when a syntax error is encountered during the parsing process, which includes information about the error and its location in the source code.\\n\\n`parse(List\\u003cToken\\u003e)`: Analyzes a list of tokens and constructs the abstract syntax tree (AST) representation of the program.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ForStatementNode.java\&quot;:\&quot;`ForStatementNode`: Represents a for-each statement for iteration, where an iterator variable is used to iterate over an iterable expression, and a statement body is executed for each iteration.\\n\\n`getIteratorVariable()`: Returns the iterator variable used in the for-each statement.\\n\\n`getIterable()`: Returns the expression that represents the iterable object.\\n\\n`getBody()`: Returns the statement body that is executed for each iteration.\\n\\n`getNodeType()`: Returns the node type as \\\&quot;ForStatement\\\&quot;.\\n\\n`toString()`: Returns a string representation of the for-each statement.\\n\\nThis file defines a `ForStatementNode` class that represents a for-each statement in a programming language. The class has methods to access the iterator variable, the iterable expression, and the statement body that is executed for each iteration.\&quot;,\&quot;/README.md\&quot;:\&quot;This file appears to be a documentation for a project called \\\&quot;FlowScript\\\&quot;, which is a programming language oriented towards workflow processes. The file does not contain any classes or functions, but rather provides an overview of the project, its features, requirements, installation and execution instructions, and other relevant information. Here\\u0027s a summary of the file:\\n\\nThe file provides a comprehensive overview of the FlowScript project, including its main features, such as its dual language nature, textual BPMN syntax, integrated IDE, rich data types, support for gateways, error handling, and modular design. It also includes information about the project structure, required dependencies, and a sample FlowScript code. The file also covers the installation and execution process, as well as useful Maven commands for development and testing. Additionally, it lists the supported syntax, available themes, keyboard shortcuts, and planned future functionalities. The file also includes information about contributing to the project and troubleshooting common issues.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/UnaryExpressionParser.java\&quot;:\&quot;`UnaryExpressionParser`: A parser for unary expressions in a programming language, supporting logical negation (`not`/`no`) and arithmetic negation (`-`) operators.\\n\\n`parse(ParserContext context)`: Implements the parsing of unary expressions according to the provided BNF grammar, creating an `UnaryExpressionNode` object.\\n\\nThis file defines a parser for unary expressions in a programming language, which is part of the implementation of a larger set of function expression parsers. The parser supports logical negation (`not`/`no`) and arithmetic negation (`-`) operators, and follows the provided BNF grammar.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/ElseIfClauseNode.java\&quot;:\&quot;`ElseIfClauseNode`: Represents an else_if clause with its condition and statement.\\n\\n`getCondition()`: Returns the condition expression of the else_if clause.\\n\\n`getStatement()`: Returns the statement node of the else_if clause.\\n\\n`getNodeType()`: Returns the node type as \\\&quot;ElseIfClause\\\&quot;.\\n\\n`toString()`: Returns a string representation of the else_if clause.\\n\\nThis file defines the `ElseIfClauseNode` class, which represents an else_if clause in the abstract syntax tree (AST) of a programming language. The class holds the condition expression and the statement node for the else_if clause, and provides methods to access these elements.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/AdditiveExpressionParserTest.java\&quot;:\&quot;This file contains unit tests for the `AdditiveExpressionParser` class, which is responsible for parsing additive expressions in a programming language.\\n\\n`AdditiveExpressionParserTest`: This class contains a series of test cases to verify the functionality of the `AdditiveExpressionParser`.\\n\\n`testSimpleAddition()`: This test verifies that the parser can correctly parse a simple addition expression.\\n\\n`testSimpleSubtraction()`: This test verifies that the parser can correctly parse a simple subtraction expression.\\n\\n`testChainedAddition()`: This test verifies that the parser can correctly parse a chained addition expression.\\n\\n`testMixedAdditionSubtraction()`: This test verifies that the parser can correctly parse a mixed addition and subtraction expression.\\n\\n`testAdditionWithIdentifiers()`: This test verifies that the parser can correctly parse an addition expression with identifiers.\\n\\n`testAdditionWithDecimals()`: This test verifies that the parser can correctly parse an addition expression with decimal values.\\n\\n`testSingleMultiplicativeExpression()`: This test verifies that the parser can correctly parse a single multiplicative expression.\\n\\n`testComplexExpression()`: This test verifies that the parser can correctly parse a complex expression with a mix of addition and subtraction.\&quot;,\&quot;/RUN_IDE.md\&quot;:\&quot;This file appears to be a documentation for the FlowScript IDE, and does not contain any classes or functions. Instead, it provides instructions on how to run the FlowScript IDE using different methods, and describes the features available in the GUI, such as the Token Table Analysis, Code Editor, and Statistics. The file also mentions an example FlowScript file that demonstrates various language features, including complex functions, business processes, error handling, database integration, and HTTP API calls.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/DecimalLiteralParserTest.java\&quot;:\&quot;This file contains a test suite for the `DecimalLiteralParser` class, which is responsible for parsing decimal literal expressions in a programming language.\\n\\n`DecimalLiteralParserTest`: This class contains a set of unit tests to verify the functionality of the `DecimalLiteralParser`.\\n\\n`testSimpleDecimal()`: This test verifies that the parser correctly parses a simple decimal literal.\\n`testDecimalWithZero()`: This test verifies that the parser correctly parses a decimal literal with a zero.\\n`testDecimalWithScientificNotation()`: This test verifies that the parser correctly parses a decimal literal with scientific notation.\\n`testDecimalWithPositiveExponent()`: This test verifies that the parser correctly parses a decimal literal with a positive exponent.\\n`testScientificNotationWithoutDot()`: This test verifies that the parser correctly parses a decimal literal with scientific notation but without a decimal point.\\n`testLargeDecimal()`: This test verifies that the parser correctly parses a large decimal literal.\\n`testInvalidInput_Integer()`: This test verifies that the parser correctly throws an exception when given an integer input.\\n`testInvalidInput_Identifier()`: This test verifies that the parser correctly throws an exception when given an identifier input.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/ParallelBranchParserTest.java\&quot;:\&quot;This file contains a test suite for the `ParallelBranchParser` class, which is responsible for parsing parallel branch statements in a process definition language.\\n\\n`ParallelBranchParserTest`: A test suite for the `ParallelBranchParser` class, which verifies the correct parsing of parallel branch statements.\\n\\n`testSimpleParallelBranch()`: Tests the parsing of a simple parallel branch statement.\\n`testParallelBranchWithComplexName()`: Tests the parsing of a parallel branch statement with a complex task name.\\n`testInvalidParallelBranch_MissingArrow()`: Tests the handling of an invalid parallel branch statement with a missing arrow.\\n`testInvalidParallelBranch_MissingTarget()`: Tests the handling of an invalid parallel branch statement with a missing target task.\&quot;,\&quot;/src/main/java/com/flowscript/ide/components/StatusBar.java\&quot;:\&quot;This file contains a single class, `StatusBar`, which represents a status bar component for a JavaFX application. The class provides methods to update various elements of the status bar, such as the message, file information, cursor position, encoding, language, and progress indicator.\\n\\n`StatusBar`: A status bar component for a JavaFX application that displays various information about the current state of the application.\\n\\n`initializeComponents()`: Initializes the components that make up the status bar.\\n\\n`setupLayout()`: Sets up the layout of the status bar, including the positioning and spacing of the various elements.\\n\\n`startTimeUpdater()`: Starts a background thread that updates the current time display in the status bar every second.\\n\\n`updateTime()`: Updates the current time display in the status bar.\\n\\n`setMessage(String message)`: Sets the message displayed in the status bar.\\n\\n`setFileInfo(String fileName)`: Sets the file information displayed in the status bar, including a modified indicator if the file has been modified.\\n\\n`setModified(boolean modified)`: Sets the modified state of the file, which is reflected in the file information display.\\n\\n`setCursorPosition(int line, int column)`: Sets the cursor position displayed in the status bar.\\n\\n`setEncoding(String encoding)`: Sets the file encoding displayed in the status bar.\\n\\n`setLanguage(String language)`: Sets the language mode displayed in the status bar.\\n\\n`showProgress()`: Shows the progress indicator in the status bar.\\n\\n`hideProgress()`: Hides the progress indicator in the status bar.\\n\\n`setProgress(double progress)`: Sets the progress value displayed in the progress indicator.\\n\\n`showBusyMessage(String message)`: Displays a busy message and shows the progress indicator.\\n\\n`clearBusy()`: Clears the busy message and hides the progress indicator.\\n\\n`showSuccess(String message)`: Displays a success message and automatically clears it after 3 seconds.\\n\\n`showError(String message)`: Displays an error message and automatically clears it after 5 seconds.\\n\\n`showWarning(String message)`: Displays a warning message and automatically clears it after 4 seconds.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ExpressionNode.java\&quot;:\&quot;`ExpressionNode`: Base class for all expression nodes in the FlowScript AST, representing units that evaluate to values and can be used in computations.\\n\\n`getToken()`: Returns the token associated with this expression.\\n\\n`getExpressionType()`: Returns the data type that this expression evaluates to, used for type checking and code generation.\\n\\nThis file defines the base class `ExpressionNode` for all expression nodes in the FlowScript Abstract Syntax Tree (AST). The `ExpressionNode` class represents units that evaluate to values and can be used in computations. It provides methods to get the associated token and the data type that the expression evaluates to, which are used for type checking and code generation.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ReturnStatementParserTest.java\&quot;:\&quot;This file contains a test suite for the `ReturnStatementParser` class, which is responsible for parsing the return statement in a programming language.\\n\\n`ReturnStatementParserTest`: This class contains unit tests to verify the behavior of the `ReturnStatementParser` class.\\n\\n`testReturnWithValue()`: This test verifies that the parser correctly parses a return statement with a literal value.\\n\\n`testReturnWithExpression()`: This test verifies that the parser correctly parses a return statement with an expression.\\n\\n`testReturnWithFunctionCall()`: This test verifies that the parser correctly parses a return statement with a function call.\\n\\n`testReturnVoid()`: This test verifies that the parser correctly parses a return statement without an expression.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/afd/IntegerLiteralRecognizer.java\&quot;:\&quot;This file contains an implementation of an Automata-based Finite Deterministic (AFD) recognizer for integer literals in a programming language.\\n\\n`IntegerLiteralRecognizer`: A class that implements the `TokenRecognizer` interface to recognize integer literals in a given input string.\\n\\n`recognize(String input, int startPos, int line, int column)`: A function that takes an input string, starting position, line, and column, and returns a `Token` object if the input matches an integer literal, or `null` if it does not.\\n\\n`isDigit(char c)`: A helper function that checks if a given character is a digit.\\n\\n`getPriority()`: A function that returns the priority of the integer literal recognizer, which is lower than keywords and operators.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/BinaryExpressionNode.java\&quot;:\&quot;This file defines a `BinaryExpressionNode` class that represents binary expressions in an abstract syntax tree (AST) for a programming language. The class has the following members:\\n\\n`BinaryExpressionNode`: Represents a binary expression in the AST, such as addition, comparison, or logical operations.\\n\\n`getLeft()`: Returns the left operand of the binary expression.\\n`getOperator()`: Returns the operator of the binary expression.\\n`getRight()`: Returns the right operand of the binary expression.\\n`getNodeType()`: Returns the type of the node, which is \\\&quot;BinaryExpression\\\&quot;.\\n`getExpressionType()`: Infers the type of the binary expression based on the operator.\\n`toString()`: Returns a string representation of the binary expression.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/IfStatementNode.java\&quot;:\&quot;`IfStatementNode`: Represents an if/else_if/else conditional statement in the abstract syntax tree.\\n\\n`getCondition()`: Returns the condition expression for the if statement.\\n`getThenStatement()`: Returns the statement to be executed if the condition is true.\\n`getElseIfClauses()`: Returns a list of else_if clauses with their respective conditions and statements.\\n`getElseStatement()`: Returns the statement to be executed if the condition and all else_if clauses are false.\\n`getNodeType()`: Returns the node type as \\\&quot;IfStatement\\\&quot;.\\n`toString()`: Returns a string representation of the if statement with the number of else_if clauses and whether an else clause is present.\\n\\nThis file defines the `IfStatementNode` class, which represents an if/else_if/else conditional statement in the abstract syntax tree of a programming language. The class provides methods to access the condition, then statement, else_if clauses, and else statement associated with the if statement.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterParserTest.java\&quot;:\&quot;This file contains a test suite for the `ParameterParser` class, which is responsible for parsing parameter declarations in a programming language. The test suite covers various scenarios, including valid parameter declarations with different data types, as well as invalid parameter declarations.\\n\\n`ParameterParserTest`: A test suite for the `ParameterParser` class, which verifies the correct parsing of parameter declarations.\\n\\n`testSimpleParameter()`: Tests the parsing of a simple parameter declaration with an integer type.\\n`testParameterWithDecimalType()`: Tests the parsing of a parameter declaration with a decimal type.\\n`testParameterWithTextType()`: Tests the parsing of a parameter declaration with a text type.\\n`testParameterWithListType()`: Tests the parsing of a parameter declaration with a list type.\\n`testParameterWithObjectType()`: Tests the parsing of a parameter declaration with an object type.\\n`testInvalidParameter_MissingColon()`: Tests the handling of an invalid parameter declaration with a missing colon.\\n`testInvalidParameter_MissingType()`: Tests the handling of an invalid parameter declaration with a missing type.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/DecimalLiteralNode.java\&quot;:\&quot;`DecimalLiteralNode`: Represents a decimal literal expression in the abstract syntax tree (AST) of a programming language.\\n\\n`getRawValue()`: Returns the raw string value of the decimal literal.\\n`getValue()`: Returns the `BigDecimal` value of the decimal literal.\\n`getDoubleValue()`: Returns the `double` value of the decimal literal.\\n`getFloatValue()`: Returns the `float` value of the decimal literal.\\n`getNodeType()`: Returns the node type as \\\&quot;DecimalLiteral\\\&quot;.\\n`getExpressionType()`: Returns the expression type as \\\&quot;decimal\\\&quot;.\\n`toString()`: Returns a string representation of the decimal literal node.\\n\\nThis file defines a `DecimalLiteralNode` class that represents a decimal literal expression in the AST of a programming language. The class provides methods to access the raw string value, `BigDecimal` value, `double` value, and `float` value of the decimal literal, as well as methods to get the node type and expression type.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/StatementParser.java\&quot;:\&quot;This file contains a `StatementParser` class that is responsible for parsing different types of statements in the FlowScript language, including `ExpressionStatement`, `IfStatement`, `TryStatement`, `ThrowStatement`, `ReturnStatement`, `GotoStatement`, `ForStatement`, `VariableDeclaration`, and `Block`. The parser uses other specialized parsers for each type of statement, such as `IfStatementParser`, `TryStatementParser`, `ThrowStatementParser`, and so on.\\n\\n`StatementParser`: Coordinates the parsing of different types of statements in the FlowScript language.\\n\\n`parse(ParserContext context)`: Parses the current statement in the given parser context and returns a `StatementNode` object representing the parsed statement.\&quot;,\&quot;/target/generated-sources/antlr4/FlowScriptFunctionsParser.java\&quot;:\&quot;This file appears to be an ANTLR-generated parser for a language called \\\&quot;FlowScriptFunctions\\\&quot;. It contains a single rule, `functionDeclaration`, which simply matches the end-of-file token. The file does not define any classes or functions, but rather serves as the generated parser code for the \\\&quot;FlowScriptFunctions\\\&quot; grammar.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/tipos_parametros/TypeNode.java\&quot;:\&quot;This file defines a `TypeNode` class that represents type annotations in the FlowScript programming language.\\n\\n`TypeNode`: Represents type annotations in FlowScript, such as `integer`, `decimal`, `boolean`, `text`, `list`, `object`, and `void`.\\n\\n`getTypeName()`: Returns the name of the type represented by the `TypeNode` instance.\\n\\n`isPrimitive()`: Checks if the type represented by the `TypeNode` instance is a primitive type (integer, decimal, boolean, or text).\\n\\n`isComplex()`: Checks if the type represented by the `TypeNode` instance is a complex type (list or object).\\n\\n`isVoid()`: Checks if the type represented by the `TypeNode` instance is the `void` type.\\n\\n`getNodeType()`: Returns the string \\\&quot;Type\\\&quot; as the node type.\\n\\n`toString()`: Returns a string representation of the `TypeNode` instance in the format \\\&quot;Type(type_name)\\\&quot;.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ForStatementParser.java\&quot;:\&quot;This file contains a single class, `ForStatementParser`, which is responsible for parsing for-each loop statements in the FlowScript programming language.\\n\\n`ForStatementParser`: Implements the parsing logic for for-each loop statements, following the specified BNF grammar and providing examples of usage.\&quot;,\&quot;/src/main/resources/css/syntax-highlighting.css\&quot;:\&quot;This file contains CSS styles for syntax highlighting in a RichTextFX-based code editor for the FlowScript programming language. It defines various styles for different language elements, such as keywords, function names, process names, task names, gateways, numbers, strings, comments, operators, punctuation, braces, parentheses, brackets, and identifiers. It also includes styles for the console output, matching brackets/braces, current line highlight, selection, and search highlight.\\n\\nThere are no classes or functions defined in this file. The file is focused on providing a comprehensive set of CSS styles to enable syntax highlighting for the FlowScript programming language within a RichTextFX-based code editor.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/elementos_core/StartElementParserTest.java\&quot;:\&quot;This file contains a test suite for the `StartElementParser` class, which is responsible for parsing the start element of a process in a flow script language.\\n\\n`StartElementParserTest`: This class contains unit tests for the `StartElementParser` class.\\n\\n`testSimpleStart()`: This test checks if the `StartElementParser` can correctly parse a simple start element with an identifier.\\n\\n`testStartWithUnderscoreInName()`: This test checks if the `StartElementParser` can correctly parse a start element with an identifier that contains an underscore.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PropertyAccessNode.java\&quot;:\&quot;`PropertyAccessNode`: Represents a property access expression, such as `customer.name`, `order.total_amount`, or `Http.get`.\\n\\n`getObject()`: Returns the expression node representing the object being accessed.\\n`getPropertyName()`: Returns the name of the property being accessed.\\n`getNodeType()`: Returns the node type as \\\&quot;PropertyAccess\\\&quot;.\\n`getExpressionType()`: Returns the expression type as \\\&quot;property\\\&quot;.\\n`toString()`: Returns a string representation of the property access expression.\\n\\nThis file defines a `PropertyAccessNode` class that represents a property access expression in the abstract syntax tree (AST) of a programming language. The class encapsulates the object being accessed and the name of the property being accessed, and provides methods to retrieve this information.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/navegacion/GotoStatementParserTest.java\&quot;:\&quot;This file contains a test suite for the `GotoStatementParser` class, which is responsible for parsing \\\&quot;go_to\\\&quot; statements in a programming language.\\n\\n`GotoStatementParserTest`: A test suite for the `GotoStatementParser` class, which verifies the correct parsing of various \\\&quot;go_to\\\&quot; statements.\\n\\n`testSimpleGoto()`: Tests the parsing of a simple \\\&quot;go_to\\\&quot; statement with a target label.\\n`testGotoWithUnderscoreInName()`: Tests the parsing of a \\\&quot;go_to\\\&quot; statement with a target label containing an underscore.\\n`testGotoToEnd()`: Tests the parsing of a \\\&quot;go_to\\\&quot; statement with a target label \\\&quot;FinOK\\\&quot;.\\n`testInvalidGoto_MissingTarget()`: Tests that the parser throws an exception when a \\\&quot;go_to\\\&quot; statement is missing a target label.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/DecimalLiteralParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`DecimalLiteralParser`: A parser that recognizes decimal literal expressions in a programming language, following a specific BNF grammar.\\n\\nThe file also contains the following function:\\n\\n`parse(ParserContext context)`: Implements the parsing of a decimal literal expression according to the specified BNF grammar.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/NullLiteralParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`NullLiteralParser`: A parser that recognizes null literals in English (null) and Spanish (nulo) according to a given BNF grammar.\\n\\nThe file also contains one function:\\n\\n`parse(ParserContext context)`: Implements the parsing of null literals, following the provided BNF grammar.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ProcessElementNode.java\&quot;:\&quot;This file defines an abstract base class `ProcessElementNode` that represents the various elements of a process in a flow-based script. The file does not contain any functions, but rather provides a summary of the different types of process elements that can be represented by subclasses of `ProcessElementNode`.\\n\\n`ProcessElementNode`: An abstract base class that represents the various elements of a process in a flow-based script, including start elements, tasks, exclusive gateways, parallel gateways, and end elements.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/ListLiteralNode.java\&quot;:\&quot;This file defines a `ListLiteralNode` class that represents a list literal expression in the abstract syntax tree (AST) of a programming language.\\n\\n`ListLiteralNode`: Represents a list literal expression in the AST, which can be empty or contain a list of expressions.\\n\\n`getExpressionList()`: Returns the `ExpressionListNode` that contains the expressions in the list literal.\\n`isEmpty()`: Checks if the list literal is empty.\\n`size()`: Returns the number of elements in the list literal.\\n`getElements()`: Returns a list of the expressions in the list literal.\\n`getElement(int index)`: Returns the expression at the specified index in the list literal.\\n`getNodeType()`: Returns the type of the node, which is \\\&quot;ListLiteral\\\&quot;.\\n`getExpressionType()`: Returns the type of the expression, which is \\\&quot;lista\\\&quot;.\\n`toString()`: Returns a string representation of the list literal node.\&quot;,\&quot;/src/main/java/com/flowscript/ide/components/IconFactory.java\&quot;:\&quot;This file contains a single class `IconFactory` which is a factory class for creating vector-based icons using JavaFX shapes and Unicode symbols.\\n\\n`IconFactory`: A factory class for creating vector-based icons using JavaFX shapes and Unicode symbols.\\n\\n`createIcon(String iconName)`: Creates an icon with the specified name using the default size and color.\\n`createIcon(String iconName, double size)`: Creates an icon with the specified name and size using the default color.\\n`createIcon(String iconName, double size, Color color)`: Creates an icon with the specified name, size, and color.\\n`createNewFileIcon(double size, Color color)`: Creates an icon for a new file.\\n`createOpenFolderIcon(double size, Color color)`: Creates an icon for an open folder.\\n`createSaveIcon(double size, Color color)`: Creates an icon for saving a file.\\n`createPlayIcon(double size, Color color)`: Creates an icon for playing or running.\\n`createStopIcon(double size, Color color)`: Creates an icon for stopping.\\n`createDebugIcon(double size, Color color)`: Creates an icon for debugging.\\n`createSearchIcon(double size, Color color)`: Creates an icon for searching.\\n`createUndoIcon(double size, Color color)`: Creates an icon for undo.\\n`createRedoIcon(double size, Color color)`: Creates an icon for redo.\\n`createCutIcon(double size, Color color)`: Creates an icon for cutting.\\n`createCopyIcon(double size, Color color)`: Creates an icon for copying.\\n`createPasteIcon(double size, Color color)`: Creates an icon for pasting.\\n`createFormatIcon(double size, Color color)`: Creates an icon for formatting.\\n`createSettingsIcon(double size, Color color)`: Creates an icon for settings.\\n`createFlowScriptIcon(double size, Color color)`: Creates an icon for a FlowScript file.\\n`createFolderIcon(double size, Color color)`: Creates an icon for a folder.\\n`createFileIcon(double size, Color color)`: Creates an icon for a file.\\n`createCloseIcon(double size, Color color)`: Creates an icon for closing.\\n`createMenuIcon(double size, Color color)`: Creates an icon for a menu.\\n`createArrowRightIcon(double size, Color color)`: Creates an icon for an arrow pointing right.\\n`createArrowDownIcon(double size, Color color)`: Creates an icon for an arrow pointing down.\\n`createReplaceIcon(double size, Color color)`: Creates an icon for replacing.\\n`createDefaultIcon(double size, Color color)`: Creates a default icon.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ProgramParser.java\&quot;:\&quot;`ProgramParser`: This class is the parser for the initial symbol of the grammar (Program), which processes a complete FlowScript program consisting of zero or more declarations (imports, functions, processes, variables).\\n\\n`parse(ParserContext context)`: This function parses the declarations in the program until the end of the file (EOF) and returns a `ProgramNode` object representing the program.\\n\\nThis file defines the `ProgramParser` class, which is responsible for parsing a complete FlowScript program and building an abstract syntax tree (AST) representation of the program. The parser uses the `DeclarationParser` to parse individual declarations within the program.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/elementos_core/EndElementParser.java\&quot;:\&quot;This file contains a single class and one function:\\n\\n`EndElementParser`: A parser for the end element of a process in a BPMN-style process definition.\\n\\n`parse`: Parses the end element of a process, including the \\\&quot;end\\\&quot; or \\\&quot;fin\\\&quot; keyword and the identifier for the end element.\\n\\nThe file provides an implementation of a parser for the end element of a process in a BPMN-style process definition. It includes a grammar definition, examples, and a parser implementation that consumes the necessary tokens and creates an `EndElementNode` object to represent the end element.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/diagram.md\&quot;:\&quot;This file appears to be a grammar definition for a programming language, likely a domain-specific language (DSL) or a subset of a general-purpose programming language. It defines the syntax for various language constructs, such as declarations, statements, expressions, and literals. The file does not contain any classes or functions, but rather defines the structure of the language using a parser generator format.\\n\\nThe main components of the grammar are:\\n\\n`Program`: Defines the overall structure of a program, consisting of one or more declarations.\\n\\n`Declaration`: Represents different types of declarations, such as import declarations, function declarations, process declarations, and variable declarations.\\n\\n`ImportDeclaration`: Defines the syntax for importing external resources, such as libraries or JAR files.\\n\\n`FunctionDeclaration`: Specifies the structure of a function declaration, including parameters, return types, and a function body.\\n\\n`ParameterList`: Defines the list of parameters for a function declaration.\\n\\n`Parameter`: Represents a single parameter in a function declaration.\\n\\n`Type`: Specifies the available data types, such as integer, decimal, boolean, text, list, object, and void.\\n\\n`ProcessDeclaration`: Defines the structure of a process declaration, including the process name and a process body.\\n\\n`ProcessBody`: Represents the contents of a process, which can include various process elements.\\n\\n`ProcessElement`: Defines the different types of process elements, such as start, task, gateway, and end elements.\\n\\n`StartElement`: Specifies the syntax for a start element in a process.\\n\\n`TaskElement`: Defines the structure of a task element in a process.\\n\\n`TaskBody`: Represents the contents of a task element, including a list of statements.\\n\\n`GatewayElement`: Defines the structure of a gateway element in a process, which can be either an exclusive gateway or a parallel gateway.\\n\\n`ExclusiveGateway`: Specifies the syntax for an exclusive gateway, including when clauses and an optional else clause.\\n\\n`WhenClause`: Defines a when clause in an exclusive gateway.\\n\\n`ElseClause`: Specifies the syntax for an else clause in an exclusive gateway.\\n\\n`ParallelGateway`: Defines the structure of a parallel gateway, including parallel branches and a join clause.\\n\\n`ParallelBranch`: Represents a single branch in a parallel gateway.\\n\\n`JoinClause`: Specifies the syntax for a join clause in a parallel gateway.\\n\\n`EndElement`: Defines the structure of an end element in a process.\\n\\n`StatementList`: Represents a list of statements in a process or function body.\\n\\n`Statement`: Defines the different types of statements, such as expression statements, if statements, try statements, throw statements, return statements, goto statements, for statements, and variable declarations.\\n\\n`ExpressionStatement`: Specifies the syntax for a statement that evaluates an expression.\\n\\n`IfStatement`: Defines the structure of an if-else statement.\\n\\n`TryStatement`: Specifies the syntax for a try-catch statement.\\n\\n`ThrowStatement`: Defines the structure of a throw statement.\\n\\n`ReturnStatement`: Specifies the syntax for a return statement.\\n\\n`GotoStatement`: Defines the structure of a goto statement.\\n\\n`ForStatement`: Specifies the syntax for a for-each loop.\\n\\n`VariableDeclaration`: Defines the structure of a variable declaration.\\n\\n`Block`: Represents a block of statements, such as a function body or a process body.\\n\\n`Expression`: Defines the overall structure of an expression, which can be a ternary expression.\\n\\n`TernaryExpression`: Specifies the syntax for a ternary expression.\\n\\n`LogicalOrExpression`: Defines the structure of a logical OR expression.\\n\\n`LogicalAndExpression`: Specifies the syntax for a logical AND expression.\\n\\n`EqualityExpression`: Defines the structure of an equality expression.\\n\\n`RelationalExpression`: Specifies the syntax for a relational expression.\\n\\n`AdditiveExpression`: Defines the structure of an additive expression.\\n\\n`MultiplicativeExpression`: Specifies the syntax for a multiplicative expression.\\n\\n`UnaryExpression`: Defines the structure of a unary expression.\\n\\n`PostfixExpression`: Specifies the syntax for a postfix expression.\\n\\n`PostfixOperator`: Defines the different types of postfix operators, such as property access, array access, and function calls.\\n\\n`PrimaryExpression`: Specifies\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/JoinClauseParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`JoinClauseParser`: A parser for join clauses in parallel gateways in a process flow script.\\n\\nThe file also contains the following function:\\n\\n`parse(ParserContext context)`: Implements the parsing of a join clause in a process flow script.\\n\\nOverall, this file defines a parser for a specific type of clause in a process flow script, which is part of a larger set of parsers for a domain-specific language.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterListParser.java\&quot;:\&quot;This file contains a single class and several functions:\\n\\n`ParameterListParser`: A parser that parses a list of function parameters.\\n\\n`parse(ParserContext context)`: Parses a list of function parameters from the given `ParserContext`.\\n\\nThis file is responsible for parsing a list of function parameters, which can include one or more parameters separated by commas. It uses the `ParameterParser` class to parse individual parameters and returns a list of `ParameterNode` objects representing the parsed parameters.\&quot;,\&quot;/src/main/java/com/flowscript/ide/components/ProjectExplorer.java\&quot;:\&quot;This file contains a single class `ProjectExplorer` which is a JavaFX component that provides a project explorer UI for managing files and folders in a project. The class includes several functions to handle various actions such as opening a project, creating new files and folders, deleting and renaming items, and displaying file properties.\\n\\n`ProjectExplorer`: A JavaFX component that provides a project explorer UI for managing files and folders in a project.\\n\\n`initializeComponents()`: Initializes the UI components of the project explorer, including the title bar, toolbar, and tree view.\\n`setupEventHandlers()`: Sets up event handlers for the tree view, such as handling double-click events and selection changes.\\n`handleMouseClick(MouseEvent)`: Handles mouse click events on the tree view, such as opening files or expanding/collapsing directories.\\n`createContextMenu()`: Creates the context menu for the tree view, which provides options for creating new files and folders, deleting, renaming, and viewing file properties.\\n`openProject()`: Allows the user to select a project directory using a directory chooser dialog and loads the project into the tree view.\\n`loadProject(File)`: Loads a project into the tree view by creating a root node and populating the tree with the files and directories in the project directory.\\n`populateTree(TreeItem\\u003cFile\\u003e, File)`: Recursively populates the tree view with the files and directories in a given directory.\\n`isIgnoredDirectory(File)`: Checks if a directory should be ignored and not displayed in the tree view.\\n`refreshTree()`: Refreshes the tree view by clearing the root node and repopulating it with the current project directory.\\n`createNewFile()`: Allows the user to create a new FlowScript file in the selected directory.\\n`createNewFolder()`: Allows the user to create a new folder in the selected directory.\\n`deleteSelectedItem()`: Deletes the selected file or folder, with a confirmation dialog.\\n`renameSelectedItem()`: Allows the user to rename the selected file or folder.\\n`showProperties()`: Displays the properties of the selected file or folder in an information dialog.\\n`getParentDirectory(TreeItem\\u003cFile\\u003e)`: Retrieves the parent directory of a given tree item.\\n`deleteDirectory(File)`: Recursively deletes a directory and all its contents.\\n`findTreeItem(TreeItem\\u003cFile\\u003e, File)`: Finds a tree item in the tree view that corresponds to a given file.\\n`formatFileSize(long)`: Formats a file size value in bytes to a human-readable string.\\n`loadEmptyState()`: Loads an empty state into the tree view when no project is loaded.\\n`showError(String)`: Displays an error message in an alert dialog.\\n`setOnFileSelected(Consumer\\u003cFile\\u003e)`: Sets a callback function to be called when a file is selected in the tree view.\\n`FileTreeCell`: A custom tree cell implementation that displays file icons based on the file type.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/RelationalExpressionNode.java\&quot;:\&quot;This file defines a class `RelationalExpressionNode` that represents relational expressions in an abstract syntax tree (AST) for a programming language. The class handles the parsing and representation of expressions like `expr \\u003c expr`, `expr \\u003e expr`, `expr \\u003c\\u003d expr`, and `expr \\u003e\\u003d expr`.\\n\\n`RelationalExpressionNode`: Represents a relational expression in the AST, with a list of operands and operators.\\n\\n`RelationalExpressionNode(Token, ExpressionNode)`: Constructs a `RelationalExpressionNode` with the first token and the first operand.\\n\\n`addOperand(Token, ExpressionNode)`: Adds an operand and its corresponding operator to the `RelationalExpressionNode`.\\n\\n`getOperands()`: Returns a list of the operands in the `RelationalExpressionNode`.\\n\\n`getOperators()`: Returns a list of the operators in the `RelationalExpressionNode`.\\n\\n`isSingleOperand()`: Checks if the `RelationalExpressionNode` has only a single operand.\\n\\n`getSingleOperand()`: Returns the single operand if the `RelationalExpressionNode` has only one operand.\\n\\n`getSimplified()`: Returns a simplified version of the `RelationalExpressionNode`, which is the single operand if there is only one.\\n\\n`getNodeType()`: Returns the node type as \\\&quot;RelationalExpression\\\&quot;.\\n\\n`getExpressionType()`: Returns the expression type as \\\&quot;boolean\\\&quot;.\\n\\n`toString()`: Returns a string representation of the `RelationalExpressionNode`.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PrimaryExpressionNode.java\&quot;:\&quot;This file defines the `PrimaryExpressionNode` class and its nested `ParenthesizedExpressionNode` class, which represent primary expressions in the abstract syntax tree (AST) of a programming language.\\n\\n`PrimaryExpressionNode`: An abstract class that represents the basic building blocks of expressions, such as identifiers, literals, object literals, and list literals.\\n\\n`ParenthesizedExpressionNode`: A concrete implementation of `PrimaryExpressionNode` that represents a parenthesized expression, where the inner expression is stored as a separate `ExpressionNode`.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/IfStatementParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `IfStatementParser` class, which is responsible for parsing `if-else` statements in a programming language.\\n\\n`IfStatementParserTest`: This class contains a series of test cases to verify the functionality of the `IfStatementParser`.\\n\\n`testSimpleIf()`: This test verifies that the parser correctly parses a simple `if` statement with a condition and a then statement.\\n\\n`testIfElse()`: This test verifies that the parser correctly parses an `if-else` statement with a condition, a then statement, and an else statement.\\n\\n`testIfElseIf()`: This test verifies that the parser correctly parses an `if-else-if` statement with a condition, a then statement, and one or more `else-if` clauses.\\n\\n`testIfElseIfElse()`: This test verifies that the parser correctly parses an `if-else-if-else` statement with a condition, a then statement, one or more `else-if` clauses, and an `else` statement.\\n\\n`testMultipleElseIf()`: This test verifies that the parser correctly parses an `if-else-if-else-if` statement with a condition, a then statement, multiple `else-if` clauses, and an `else` statement.\\n\\n`testNestedIf()`: This test verifies that the parser correctly parses a nested `if` statement, where an `if` statement is contained within the then statement of another `if` statement.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ThrowStatementNode.java\&quot;:\&quot;`ThrowStatementNode`: Represents a throw statement for error throwing, with an expression that evaluates to the error object.\\n\\n`getExpression()`: Returns the expression that evaluates to the error object.\\n\\n`getNodeType()`: Returns the node type as \\\&quot;ThrowStatement\\\&quot;.\\n\\n`toString()`: Returns a string representation of the ThrowStatementNode, including the node type of the expression.\\n\\nThis file defines a `ThrowStatementNode` class that represents a throw statement in the abstract syntax tree (AST) of a programming language. The throw statement is used to throw an error or exception, and the `ThrowStatementNode` class encapsulates the expression that evaluates to the error object.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/TypeParserTest.java\&quot;:\&quot;This file contains a test suite for the `TypeParser` class, which is responsible for parsing type definitions in a programming language. The test suite covers various valid and invalid type definitions, including `integer`, `decimal`, `boolean`, `text`, `list`, `object`, and `void`.\\n\\n`TypeParserTest`: A test suite for the `TypeParser` class, which verifies the correct parsing of various type definitions.\\n\\n`testIntegerType()`: Tests the parsing of the `integer` type.\\n`testDecimalType()`: Tests the parsing of the `decimal` type.\\n`testBooleanType()`: Tests the parsing of the `boolean` type.\\n`testTextType()`: Tests the parsing of the `text` type.\\n`testListType()`: Tests the parsing of the `list` type.\\n`testObjectType()`: Tests the parsing of the `object` type.\\n`testVoidType()`: Tests the parsing of the `void` type.\\n`testInvalidType()`: Tests the handling of an invalid type definition.\&quot;,\&quot;/src/main/java/com/flowscript/lexer/Token.java\&quot;:\&quot;This file defines a `Token` class that represents a token in the FlowScript language. Each token has a type, value, and position information.\\n\\n`Token`: Represents a token in the FlowScript language, with a type, value, and position information.\\n\\n`Token(TokenType, String, int, int, int)`: Constructs a new `Token` instance with the specified type, value, line, column, and position.\\n\\n`Token(TokenType, int, int, int)`: Constructs a new `Token` instance with the specified type, line, column, and position, and the default value for the token type.\\n\\n`getType()`: Returns the type of the token.\\n\\n`getValue()`: Returns the value of the token.\\n\\n`getLine()`: Returns the line number of the token.\\n\\n`getColumn()`: Returns the column number of the token.\\n\\n`getPosition()`: Returns the position of the token in the input stream.\\n\\n`toString()`: Returns a string representation of the token.\\n\\n`equals(Object)`: Compares the current token with another object for equality.\\n\\n`hashCode()`: Returns the hash code of the token.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/ParallelBranchParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`ParallelBranchParser`: A parser for parallel branches in parallel gateways in a process flow.\\n\\nThe file also contains the following function:\\n\\n`parse(ParserContext context)`: Parses a parallel branch in a process flow and returns a `ParallelBranchNode` object.\\n\\nThe file provides an implementation of a parser for parallel branches in a process flow, following a specific BNF grammar. The parser is part of a larger system for parsing and processing process flow definitions.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/ListLiteralParser.java\&quot;:\&quot;`ListLiteralParser`: A parser that recognizes list literals in a programming language, following a specific BNF grammar.\\n\\n`parse(ParserContext context)`: Implements the parsing of list literals according to the provided BNF grammar, which should recognize various forms of list literals.\\n\\nThis file contains a parser implementation for list literals in a programming language. The parser follows a specific BNF grammar and is responsible for recognizing and parsing list literals, such as `[1, 2, 3]`, `[\\\&quot;a\\\&quot;, \\\&quot;b\\\&quot;]`, and `[1, \\\&quot;text\\\&quot;, true]`. The parser is part of a larger set of parsers for implementing functions and their associated syntax.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ParallelGatewayNode.java\&quot;:\&quot;This file defines a single class, `ParallelGatewayNode`, which represents a parallel gateway (AND) in a process flow. The class holds information about the gateway name, the branches, and the join clause.\\n\\n`ParallelGatewayNode`: Represents a parallel gateway (AND) in a process flow, with a name, a list of branches, and a join clause.\\n\\n`getGatewayName()`: Returns the name of the parallel gateway.\\n`getBranches()`: Returns a list of the parallel branches.\\n`getJoinClause()`: Returns the join clause for the parallel gateway.\\n`getNodeType()`: Returns the type of the AST node, which is \\\&quot;ParallelGateway\\\&quot;.\\n`toString()`: Returns a string representation of the parallel gateway node.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ProcessDeclarationNode.java\&quot;:\&quot;This file defines a `ProcessDeclarationNode` class, which represents a process declaration in the FlowScript language. The class contains the process structure and workflow definition.\\n\\n`ProcessDeclarationNode`: Represents a process declaration in FlowScript, containing the process structure and workflow definition.\\n\\n`getName()`: Returns the name of the process.\\n`getProcessElements()`: Returns the list of process elements.\\n`getDeclaredName()`: Returns the name of the declared process.\\n`getNodeType()`: Returns the type of the node, which is \\\&quot;ProcessDeclaration\\\&quot;.\\n`toString()`: Returns a string representation of the process declaration.\&quot;,\&quot;/src/main/resources/css/light-theme.css\&quot;:\&quot;This file appears to be a CSS stylesheet for a light theme for a FlowScript IDE (Integrated Development Environment). It defines the styles for various UI elements such as the menu bar, context menu, tool bar, tab pane, tree view, text fields, buttons, labels, progress indicators, scroll bars, tooltips, status bar, and console. The stylesheet aims to provide a consistent and visually appealing user interface for the FlowScript IDE.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberListParser.java\&quot;:\&quot;This file contains the implementation of the `ObjectMemberListParser` class, which is responsible for parsing a list of object members in a programming language.\\n\\n`ObjectMemberListParser`: This class is responsible for parsing a list of object members, such as `name: \\\&quot;Ana\\\&quot;, age: 25, active: true`, following the provided BNF grammar.\\n\\n`parse(ParserContext context)`: This method is responsible for parsing the list of object members and returning a list of `ObjectMemberListNode` objects.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ParserContext.java\&quot;:\&quot;This file contains a single class, `ParserContext`, which is a shared context used by all parsers in the `com.flowscript.sintactic` package. The class maintains the state of the syntactic analysis, including the list of tokens and the current index, and provides utility methods for navigating and consuming tokens.\\n\\n`ParserContext`: A shared context used by all parsers to maintain the state of the syntactic analysis, including the list of tokens and the current index, and provide utility methods for navigating and consuming tokens.\\n\\n`getCurrentToken()`: Obtains the current token without consuming it.\\n`getCurrentIndex()`: Obtains the current index in the list of tokens.\\n`advance()`: Advances to the next token.\\n`consume()`: Consumes the current token and advances to the next.\\n`consume(TokenType)`: Consumes a token of the expected type.\\n`consumeValue(String)`: Consumes a token with the expected value.\\n`check(TokenType)`: Checks if the current token is of the specified type without consuming it.\\n`checkValue(String)`: Checks if the current token has the specified value without consuming it.\\n`checkAny(TokenType...)`: Checks if the current token is of any of the specified types.\\n`peek(int)`: Looks ahead N tokens without consuming them.\\n`setCurrentIndex(int)`: Sets the current index.\\n`getTokens()`: Obtains the complete list of tokens.\\n`hasMoreTokens()`: Checks if there are more tokens available.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ImportDeclarationParser.java\&quot;:\&quot;This file contains a single class:\\n\\n`ImportDeclarationParser`: A parser for import declaration statements in the FlowScript programming language.\\n\\nThe file also contains a single function:\\n\\n`parse(ParserContext context)`: Parses an import declaration statement and returns an `ImportDeclarationNode` object representing the parsed declaration.\\n\\nThe purpose of this file is to provide an implementation of a parser for import declaration statements in the FlowScript programming language, following a specific BNF grammar. The parser is responsible for consuming the appropriate tokens and creating an abstract syntax tree (AST) node representing the import declaration.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/MultiplicativeExpressionParserTest.java\&quot;:\&quot;This file contains a set of unit tests for the `MultiplicativeExpressionParser` class, which is responsible for parsing and evaluating multiplicative expressions in a programming language.\\n\\n`MultiplicativeExpressionParserTest`: This class contains a series of test cases to verify the functionality of the `MultiplicativeExpressionParser` class.\\n\\n`testSimpleMultiplication()`: This test verifies that the parser can correctly parse and evaluate a simple multiplication expression.\\n\\n`testSimpleDivision()`: This test verifies that the parser can correctly parse and evaluate a simple division expression.\\n\\n`testModuloOperation()`: This test verifies that the parser can correctly parse and evaluate a modulo operation.\\n\\n`testChainedMultiplication()`: This test verifies that the parser can correctly parse and evaluate a chained multiplication expression.\\n\\n`testMixedOperations()`: This test verifies that the parser can correctly parse and evaluate an expression with a mix of multiplication, division, and modulo operations.\\n\\n`testMultiplicationWithIdentifiers()`: This test verifies that the parser can correctly parse and evaluate an expression with identifiers (variables) in a multiplication operation.\\n\\n`testDivisionWithDecimals()`: This test verifies that the parser can correctly parse and evaluate an expression with decimal values in a division operation.\\n\\n`testSingleUnaryExpression()`: This test verifies that the parser can correctly parse and evaluate a single unary expression (a single number).\&quot;,\&quot;/src/main/java/com/flowscript/lexer/afd/CommentRecognizer.java\&quot;:\&quot;This file contains a single class, `CommentRecognizer`, which implements the `TokenRecognizer` interface to recognize single-line and multi-line comments in a programming language.\\n\\n`CommentRecognizer`: A class that recognizes single-line and multi-line comments in a programming language.\\n\\n`recognize(String, int, int, int)`: A method that takes an input string, starting position, line, and column, and returns a `Token` object if a comment is recognized, or `null` if no comment is found.\\n\\n`recognizeSingleLineComment(String, int, int, int)`: A method that recognizes single-line comments starting with the `#` character.\\n\\n`recognizeMultiLineComment(String, int, int, int)`: A method that recognizes multi-line comments enclosed between `/*` and `*/`.\\n\\n`getPriority()`: A method that returns the priority of the `CommentRecognizer` class, which is the highest priority (0) to ensure comments are recognized before any other tokens.\&quot;,\&quot;/src/main/tlf/FlowScript-Grammar.md\&quot;:\&quot;This file defines the complete grammar for the FlowScript language using Backus-Naur Form (BNF) notation. It does not contain any classes or functions, but rather defines the structure and syntax of the FlowScript language, including:\\n\\n1. Program structure: Defines the overall structure of a FlowScript program, including declarations for imports, functions, processes, and variables.\\n2. Import declarations: Allows importing external libraries and Java JARs.\\n3. Function declarations: Defines the syntax for declaring functions, including parameters and return types.\\n4. Process declarations: Defines the syntax for declaring processes, which include start, task, gateway, and end elements.\\n5. Statements: Defines the various types of statements that can be used within a FlowScript program, such as expressions, conditionals, loops, and variable declarations.\\n6. Expressions: Defines the syntax and precedence of various types of expressions, including arithmetic, logical, and access expressions.\\n7. Literals: Defines the syntax for various types of literals, including integers, decimals, booleans, strings, and null.\\n8. Lexical elements: Defines the syntax for identifiers, keywords, and other lexical elements.\\n9. Operator precedence: Defines the precedence of various operators used in the language.\\n10. Language features: Provides a high-level summary of the key features of the FlowScript language, including modular imports, functions, processes, data types, control structures, and expressions.\&quot;,\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ProgramParserTest.java\&quot;:\&quot;This file contains a test suite for the `ProgramParser` class, which is responsible for parsing program declarations in a programming language. The test suite covers various scenarios, including empty programs, programs with single imports or functions, and programs with multiple declarations.\\n\\n`ProgramParserTest`: A test suite for the `ProgramParser` class, which tests the parsing of program declarations.\\n\\n`testEmptyProgram()`: Tests that the parser correctly handles an empty program.\\n`testProgramWithSingleImport()`: Tests that the parser correctly handles a program with a single import declaration.\\n`testProgramWithSingleFunction()`: Tests that the parser correctly handles a program with a single function declaration.\\n`testProgramWithMultipleDeclarations()`: Tests that the parser correctly handles a program with multiple declarations (import, variable, and function).\\n`testCompleteProgram()`: Tests that the parser correctly handles a more complex program with multiple imports, a constant, and a function.\&quot;,\&quot;/target/generated-sources/antlr4/FlowScriptFunctionsBaseListener.java\&quot;:\&quot;This file appears to be an implementation of the `FlowScriptFunctionsListener` interface, which is likely part of a larger ANTLR-based parser project. The file does not contain any classes, but it does define the following functions:\\n\\n`enterFunctionDeclaration`: This function is called when the parser enters a function declaration.\\n`exitFunctionDeclaration`: This function is called when the parser exits a function declaration.\\n`enterEveryRule`: This function is called when the parser enters any rule.\\n`exitEveryRule`: This function is called when the parser exits any rule.\\n`visitTerminal`: This function is called when the parser visits a terminal node.\\n`visitErrorNode`: This function is called when the parser visits an error node.\\n\\nThe purpose of this file is to provide a base implementation of the `FlowScriptFunctionsListener` interface, which can be extended by other classes to handle specific parsing logic.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/process/navegacion/GotoStatementNode.java\&quot;:\&quot;This file defines a single class:\\n\\n`GotoStatementNode`: Represents a \\\&quot;go_to\\\&quot; statement for navigation between process tasks, with a target label.\\n\\nThe file also defines the following function:\\n\\n`getTargetLabel()`: Returns the target label of the \\\&quot;go_to\\\&quot; statement.\\n\\nThis file is part of the `com.flowscript.sintactic.ast.process.navegacion` package and provides a class to represent \\\&quot;go_to\\\&quot; statements in a process navigation context.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/control_flujo/ExclusiveGatewayParser.java\&quot;:\&quot;This file contains the implementation of the `ExclusiveGatewayParser` class, which is responsible for parsing exclusive gateways (XOR) in a process flow script.\\n\\n`ExclusiveGatewayParser`: A parser for exclusive gateways (XOR) in a process flow script, which can handle when clauses and an optional else clause.\\n\\n`parse(ParserContext context)`: Parses an exclusive gateway node from the given parser context, including its name, when clauses, and optional else clause.\&quot;,\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/ElseClauseNode.java\&quot;:\&quot;This file defines a single class:\\n\\n`ElseClauseNode`: Represents an else clause in an exclusive gateway, defining the default branch when no when conditions match.\\n\\nThe file also defines the following function:\\n\\n`getTargetTask()`: Returns the target task for the else clause.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;C:/Users/Bryan/Documents/parcial2Lenguaje/flowscript&quot;:&quot;{\&quot;/src/main/java/com/flowscript/ide/components/CodeEditorPane.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/ide/components/CodeEditorPane.java\&quot;,\&quot;file_name\&quot;:\&quot;CodeEditorPane.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;CodeEditorPane\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[37,4],[40,5]]},{\&quot;method_name\&quot;:\&quot;initializeComponents\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[42,4],[53,5]]},{\&quot;method_name\&quot;:\&quot;createWelcomeTab\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[55,4],[81,5]]},{\&quot;method_name\&quot;:\&quot;setupEventHandlers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,4],[91,5]]},{\&quot;method_name\&quot;:\&quot;newFile\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[93,4],[95,5]]},{\&quot;method_name\&quot;:\&quot;openFile\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[97,4],[120,5]]},{\&quot;method_name\&quot;:\&quot;openFile\&quot;,\&quot;method_parameters\&quot;:\&quot;(File file)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;File\&quot;,\&quot;name\&quot;:\&quot;file\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[122,4],[130,5]]},{\&quot;method_name\&quot;:\&quot;saveFile\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[132,4],[145,5]]},{\&quot;method_name\&quot;:\&quot;saveAsFile\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[147,4],[181,5]]},{\&quot;method_name\&quot;:\&quot;saveToFile\&quot;,\&quot;method_parameters\&quot;:\&quot;(String content, String filePath)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;content\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;filePath\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[183,4],[191,5]]},{\&quot;method_name\&quot;:\&quot;createNewTab\&quot;,\&quot;method_parameters\&quot;:\&quot;(String title, String content)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;title\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;content\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[193,4],[195,5]]},{\&quot;method_name\&quot;:\&quot;createNewTab\&quot;,\&quot;method_parameters\&quot;:\&quot;(String title, String content, String filePath)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;title\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;content\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;filePath\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[197,4],[269,5]]},{\&quot;method_name\&quot;:\&quot;computeHighlighting\&quot;,\&quot;method_parameters\&quot;:\&quot;(String text)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;text\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[271,4],[273,5]]},{\&quot;method_name\&quot;:\&quot;setupAutoCompletion\&quot;,\&quot;method_parameters\&quot;:\&quot;(CodeArea codeArea)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;CodeArea\&quot;,\&quot;name\&quot;:\&quot;codeArea\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[275,4],[282,5]]},{\&quot;method_name\&quot;:\&quot;setupSmartIndentation\&quot;,\&quot;method_parameters\&quot;:\&quot;(CodeArea codeArea)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;CodeArea\&quot;,\&quot;name\&quot;:\&quot;codeArea\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[284,4],[302,5]]},{\&quot;method_name\&quot;:\&quot;showAutoCompletion\&quot;,\&quot;method_parameters\&quot;:\&quot;(CodeArea codeArea)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;CodeArea\&quot;,\&quot;name\&quot;:\&quot;codeArea\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[304,4],[326,5]]},{\&quot;method_name\&quot;:\&quot;getCurrentLine\&quot;,\&quot;method_parameters\&quot;:\&quot;(String textBeforeCaret)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;textBeforeCaret\&quot;}],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[328,4],[331,5]]},{\&quot;method_name\&quot;:\&quot;getIndentation\&quot;,\&quot;method_parameters\&quot;:\&quot;(String line)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;line\&quot;}],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[333,4],[341,5]]},{\&quot;method_name\&quot;:\&quot;getFlowScriptTemplate\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[343,4],[388,1]]}]},\&quot;/src/main/java/com/flowscript/ide/components/ConsolePane.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/ide/components/ConsolePane.java\&quot;,\&quot;file_name\&quot;:\&quot;ConsolePane.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ConsolePane\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[25,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;initializeComponents\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[31,4],[74,5]]},{\&quot;method_name\&quot;:\&quot;setupEventHandlers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[76,4],[87,5]]},{\&quot;method_name\&quot;:\&quot;setupStyling\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[89,4],[91,5]]},{\&quot;method_name\&quot;:\&quot;handleKeyPress\&quot;,\&quot;method_parameters\&quot;:\&quot;(KeyEvent event)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;KeyEvent\&quot;,\&quot;name\&quot;:\&quot;event\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[93,4],[100,5]]},{\&quot;method_name\&quot;:\&quot;executeCommand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[102,4],[122,5]]},{\&quot;method_name\&quot;:\&quot;processBuiltInCommand\&quot;,\&quot;method_parameters\&quot;:\&quot;(String command)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;command\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[124,4],[144,5]]},{\&quot;method_name\&quot;:\&quot;addToHistory\&quot;,\&quot;method_parameters\&quot;:\&quot;(String command)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;command\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[146,4],[148,5]]},{\&quot;method_name\&quot;:\&quot;navigateHistory\&quot;,\&quot;method_parameters\&quot;:\&quot;(int direction)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;direction\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[150,4],[171,5]]},{\&quot;method_name\&quot;:\&quot;autoComplete\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[173,4],[187,5]]},{\&quot;method_name\&quot;:\&quot;printWelcomeMessage\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[189,4],[195,5]]},{\&quot;method_name\&quot;:\&quot;printCommand\&quot;,\&quot;method_parameters\&quot;:\&quot;(String command)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;command\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[197,4],[200,5]]},{\&quot;method_name\&quot;:\&quot;println\&quot;,\&quot;method_parameters\&quot;:\&quot;(String text)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;text\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[202,4],[204,5]]},{\&quot;method_name\&quot;:\&quot;println\&quot;,\&quot;method_parameters\&quot;:\&quot;(String text, String styleClass)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;text\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;styleClass\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[206,4],[212,5]]},{\&quot;method_name\&quot;:\&quot;print\&quot;,\&quot;method_parameters\&quot;:\&quot;(String text)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;text\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[214,4],[216,5]]},{\&quot;method_name\&quot;:\&quot;print\&quot;,\&quot;method_parameters\&quot;:\&quot;(String text, String styleClass)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;text\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;styleClass\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[218,4],[224,5]]},{\&quot;method_name\&quot;:\&quot;printError\&quot;,\&quot;method_parameters\&quot;:\&quot;(String text)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;text\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[226,4],[228,5]]},{\&quot;method_name\&quot;:\&quot;printWarning\&quot;,\&quot;method_parameters\&quot;:\&quot;(String text)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;text\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[230,4],[232,5]]},{\&quot;method_name\&quot;:\&quot;printSuccess\&quot;,\&quot;method_parameters\&quot;:\&quot;(String text)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;text\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[234,4],[236,5]]},{\&quot;method_name\&quot;:\&quot;clear\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[238,4],[241,5]]},{\&quot;method_name\&quot;:\&quot;showHelp\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[243,4],[260,5]]},{\&quot;method_name\&quot;:\&quot;showVersion\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[262,4],[266,5]]},{\&quot;method_name\&quot;:\&quot;showTime\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[268,4],[272,5]]},{\&quot;method_name\&quot;:\&quot;showHistory\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[274,4],[289,5]]},{\&quot;method_name\&quot;:\&quot;saveOutput\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[291,4],[308,5]]},{\&quot;method_name\&quot;:\&quot;setOnCommand\&quot;,\&quot;method_parameters\&quot;:\&quot;(Consumer\\u003cString\\u003e onCommand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;onCommand\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[311,4],[313,5]]},{\&quot;method_name\&quot;:\&quot;focusInput\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[315,4],[317,5]]},{\&quot;method_name\&quot;:\&quot;getOutputText\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[319,4],[321,5]]},{\&quot;method_name\&quot;:\&quot;executeCommand\&quot;,\&quot;method_parameters\&quot;:\&quot;(String command)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;command\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[323,4],[326,5]]},{\&quot;method_name\&quot;:\&quot;logInfo\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[329,4],[332,5]]},{\&quot;method_name\&quot;:\&quot;logError\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[334,4],[337,5]]},{\&quot;method_name\&quot;:\&quot;logWarning\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[339,4],[342,5]]},{\&quot;method_name\&quot;:\&quot;logSuccess\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[344,4],[347,5]]}]},\&quot;/src/main/java/com/flowscript/ide/components/IconFactory.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/ide/components/IconFactory.java\&quot;,\&quot;file_name\&quot;:\&quot;IconFactory.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;createIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(String iconName)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;iconName\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[17,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;createIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(String iconName, double size)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;iconName\&quot;},{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[21,4],[23,5]]},{\&quot;method_name\&quot;:\&quot;createIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(String iconName, double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;iconName\&quot;},{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[25,4],[97,5]]},{\&quot;method_name\&quot;:\&quot;createNewFileIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[99,4],[119,5]]},{\&quot;method_name\&quot;:\&quot;createOpenFolderIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[121,4],[140,5]]},{\&quot;method_name\&quot;:\&quot;createSaveIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[142,4],[159,5]]},{\&quot;method_name\&quot;:\&quot;createPlayIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[161,4],[175,5]]},{\&quot;method_name\&quot;:\&quot;createStopIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[177,4],[186,5]]},{\&quot;method_name\&quot;:\&quot;createDebugIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[188,4],[205,5]]},{\&quot;method_name\&quot;:\&quot;createSearchIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[207,4],[224,5]]},{\&quot;method_name\&quot;:\&quot;createUndoIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[226,4],[246,5]]},{\&quot;method_name\&quot;:\&quot;createRedoIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[248,4],[268,5]]},{\&quot;method_name\&quot;:\&quot;createCutIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[270,4],[292,5]]},{\&quot;method_name\&quot;:\&quot;createCopyIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[294,4],[315,5]]},{\&quot;method_name\&quot;:\&quot;createPasteIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[317,4],[334,5]]},{\&quot;method_name\&quot;:\&quot;createFormatIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[336,4],[351,5]]},{\&quot;method_name\&quot;:\&quot;createSettingsIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[353,4],[380,5]]},{\&quot;method_name\&quot;:\&quot;createFlowScriptIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[382,4],[404,5]]},{\&quot;method_name\&quot;:\&quot;createFolderIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[406,4],[408,5]]},{\&quot;method_name\&quot;:\&quot;createFileIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[410,4],[431,5]]},{\&quot;method_name\&quot;:\&quot;createCloseIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[433,4],[446,5]]},{\&quot;method_name\&quot;:\&quot;createMenuIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[448,4],[465,5]]},{\&quot;method_name\&quot;:\&quot;createArrowRightIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[467,4],[480,5]]},{\&quot;method_name\&quot;:\&quot;createArrowDownIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[482,4],[495,5]]},{\&quot;method_name\&quot;:\&quot;createReplaceIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[497,4],[530,5]]},{\&quot;method_name\&quot;:\&quot;createDefaultIcon\&quot;,\&quot;method_parameters\&quot;:\&quot;(double size, Color color)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;size\&quot;},{\&quot;type\&quot;:\&quot;Color\&quot;,\&quot;name\&quot;:\&quot;color\&quot;}],\&quot;return_type\&quot;:\&quot;Node\&quot;,\&quot;scope\&quot;:[[532,4],[542,5]]}]},\&quot;/src/main/java/com/flowscript/ide/components/ProjectExplorer.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/ide/components/ProjectExplorer.java\&quot;,\&quot;file_name\&quot;:\&quot;ProjectExplorer.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ProjectExplorer\&quot;,\&quot;method_parameters\&quot;:\&quot;(ProjectService projectService)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ProjectService\&quot;,\&quot;name\&quot;:\&quot;projectService\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[24,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;initializeComponents\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[30,4],[66,5]]},{\&quot;method_name\&quot;:\&quot;setupEventHandlers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[68,4],[80,5]]},{\&quot;method_name\&quot;:\&quot;handleMouseClick\&quot;,\&quot;method_parameters\&quot;:\&quot;(MouseEvent event)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;MouseEvent\&quot;,\&quot;name\&quot;:\&quot;event\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[82,4],[96,5]]},{\&quot;method_name\&quot;:\&quot;createContextMenu\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ContextMenu\&quot;,\&quot;scope\&quot;:[[98,4],[134,5]]},{\&quot;method_name\&quot;:\&quot;openProject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[136,4],[144,5]]},{\&quot;method_name\&quot;:\&quot;loadProject\&quot;,\&quot;method_parameters\&quot;:\&quot;(File projectDir)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;File\&quot;,\&quot;name\&quot;:\&quot;projectDir\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[146,4],[157,5]]},{\&quot;method_name\&quot;:\&quot;populateTree\&quot;,\&quot;method_parameters\&quot;:\&quot;(TreeItem\\u003cFile\\u003e parent, File directory)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;parent\&quot;},{\&quot;type\&quot;:\&quot;File\&quot;,\&quot;name\&quot;:\&quot;directory\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[159,4],[178,5]]},{\&quot;method_name\&quot;:\&quot;isIgnoredDirectory\&quot;,\&quot;method_parameters\&quot;:\&quot;(File file)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;File\&quot;,\&quot;name\&quot;:\&quot;file\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[180,4],[187,5]]},{\&quot;method_name\&quot;:\&quot;refreshTree\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[189,4],[195,5]]},{\&quot;method_name\&quot;:\&quot;createNewFile\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[197,4],[228,5]]},{\&quot;method_name\&quot;:\&quot;createNewFolder\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[230,4],[250,5]]},{\&quot;method_name\&quot;:\&quot;deleteSelectedItem\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[252,4],[278,5]]},{\&quot;method_name\&quot;:\&quot;renameSelectedItem\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[280,4],[304,5]]},{\&quot;method_name\&quot;:\&quot;showProperties\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[306,4],[326,5]]},{\&quot;method_name\&quot;:\&quot;getParentDirectory\&quot;,\&quot;method_parameters\&quot;:\&quot;(TreeItem\\u003cFile\\u003e item)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;item\&quot;}],\&quot;return_type\&quot;:\&quot;File\&quot;,\&quot;scope\&quot;:[[328,4],[335,5]]},{\&quot;method_name\&quot;:\&quot;deleteDirectory\&quot;,\&quot;method_parameters\&quot;:\&quot;(File directory)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;File\&quot;,\&quot;name\&quot;:\&quot;directory\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[337,4],[349,5]]},{\&quot;method_name\&quot;:\&quot;findTreeItem\&quot;,\&quot;method_parameters\&quot;:\&quot;(TreeItem\\u003cFile\\u003e parent, File targetFile)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;parent\&quot;},{\&quot;type\&quot;:\&quot;File\&quot;,\&quot;name\&quot;:\&quot;targetFile\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[351,4],[364,5]]},{\&quot;method_name\&quot;:\&quot;formatFileSize\&quot;,\&quot;method_parameters\&quot;:\&quot;(long size)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;long\&quot;,\&quot;name\&quot;:\&quot;size\&quot;}],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[366,4],[371,5]]},{\&quot;method_name\&quot;:\&quot;loadEmptyState\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[373,4],[377,5]]},{\&quot;method_name\&quot;:\&quot;showError\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[379,4],[385,5]]},{\&quot;method_name\&quot;:\&quot;setOnFileSelected\&quot;,\&quot;method_parameters\&quot;:\&quot;(Consumer\\u003cFile\\u003e onFileSelected)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;onFileSelected\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[387,4],[389,5]]},{\&quot;method_name\&quot;:\&quot;updateItem\&quot;,\&quot;method_parameters\&quot;:\&quot;(File file, boolean empty)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;File\&quot;,\&quot;name\&quot;:\&quot;file\&quot;},{\&quot;type\&quot;:\&quot;boolean\&quot;,\&quot;name\&quot;:\&quot;empty\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[393,8],[426,9]]}]},\&quot;/src/main/java/com/flowscript/ide/components/StatusBar.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/ide/components/StatusBar.java\&quot;,\&quot;file_name\&quot;:\&quot;StatusBar.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;StatusBar\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[25,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;initializeComponents\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[31,4],[61,5]]},{\&quot;method_name\&quot;:\&quot;setupLayout\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[63,4],[94,5]]},{\&quot;method_name\&quot;:\&quot;startTimeUpdater\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[96,4],[110,5]]},{\&quot;method_name\&quot;:\&quot;updateTime\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[112,4],[116,5]]},{\&quot;method_name\&quot;:\&quot;setMessage\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[119,4],[121,5]]},{\&quot;method_name\&quot;:\&quot;setFileInfo\&quot;,\&quot;method_parameters\&quot;:\&quot;(String fileName)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;fileName\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[123,4],[131,5]]},{\&quot;method_name\&quot;:\&quot;setModified\&quot;,\&quot;method_parameters\&quot;:\&quot;(boolean modified)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;boolean\&quot;,\&quot;name\&quot;:\&quot;modified\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[133,4],[142,5]]},{\&quot;method_name\&quot;:\&quot;setCursorPosition\&quot;,\&quot;method_parameters\&quot;:\&quot;(int line, int column)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[144,4],[148,5]]},{\&quot;method_name\&quot;:\&quot;setEncoding\&quot;,\&quot;method_parameters\&quot;:\&quot;(String encoding)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;encoding\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[150,4],[152,5]]},{\&quot;method_name\&quot;:\&quot;setLanguage\&quot;,\&quot;method_parameters\&quot;:\&quot;(String language)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;language\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[154,4],[156,5]]},{\&quot;method_name\&quot;:\&quot;showProgress\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[158,4],[160,5]]},{\&quot;method_name\&quot;:\&quot;hideProgress\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[162,4],[164,5]]},{\&quot;method_name\&quot;:\&quot;setProgress\&quot;,\&quot;method_parameters\&quot;:\&quot;(double progress)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;double\&quot;,\&quot;name\&quot;:\&quot;progress\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[166,4],[171,5]]},{\&quot;method_name\&quot;:\&quot;showBusyMessage\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[174,4],[177,5]]},{\&quot;method_name\&quot;:\&quot;clearBusy\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[179,4],[182,5]]},{\&quot;method_name\&quot;:\&quot;showSuccess\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[184,4],[198,5]]},{\&quot;method_name\&quot;:\&quot;showError\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[200,4],[214,5]]},{\&quot;method_name\&quot;:\&quot;showWarning\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[216,4],[230,5]]}]},\&quot;/src/main/java/com/flowscript/ide/components/TokenTablePane.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/ide/components/TokenTablePane.java\&quot;,\&quot;file_name\&quot;:\&quot;TokenTablePane.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;TokenTablePane\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[31,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;initializeUI\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[164,5]]},{\&quot;method_name\&quot;:\&quot;updateItem\&quot;,\&quot;method_parameters\&quot;:\&quot;(TokenRow item, boolean empty)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;TokenRow\&quot;,\&quot;name\&quot;:\&quot;item\&quot;},{\&quot;type\&quot;:\&quot;boolean\&quot;,\&quot;name\&quot;:\&quot;empty\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[107,16],[140,17]]},{\&quot;method_name\&quot;:\&quot;updateTokens\&quot;,\&quot;method_parameters\&quot;:\&quot;(String code)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;code\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[169,4],[236,5]]},{\&quot;method_name\&quot;:\&quot;formatValue\&quot;,\&quot;method_parameters\&quot;:\&quot;(String value)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;value\&quot;}],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[238,4],[254,5]]},{\&quot;method_name\&quot;:\&quot;getCategoryForToken\&quot;,\&quot;method_parameters\&quot;:\&quot;(TokenType type)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;TokenType\&quot;,\&quot;name\&quot;:\&quot;type\&quot;}],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[256,4],[275,5]]},{\&quot;method_name\&quot;:\&quot;getErrorPosition\&quot;,\&quot;method_parameters\&quot;:\&quot;(String errorMessage)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;errorMessage\&quot;}],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[277,4],[291,5]]},{\&quot;method_name\&quot;:\&quot;setOnRefresh\&quot;,\&quot;method_parameters\&quot;:\&quot;(Runnable action)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Runnable\&quot;,\&quot;name\&quot;:\&quot;action\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[296,4],[298,5]]},{\&quot;method_name\&quot;:\&quot;isAutoUpdate\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[303,4],[305,5]]},{\&quot;method_name\&quot;:\&quot;loadStyles\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[310,4],[323,5]]},{\&quot;method_name\&quot;:\&quot;TokenRow\&quot;,\&quot;method_parameters\&quot;:\&quot;(int line, int column, String type, String value, String category)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;type\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;value\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;category\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[335,8],[341,9]]}]},\&quot;/src/main/java/com/flowscript/ide/services/ProjectService.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/ide/services/ProjectService.java\&quot;,\&quot;file_name\&quot;:\&quot;ProjectService.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ProjectService\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[25,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;setCurrentProject\&quot;,\&quot;method_parameters\&quot;:\&quot;(String projectPath)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;projectPath\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[31,4],[41,5]]},{\&quot;method_name\&quot;:\&quot;getCurrentProject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[43,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;loadLastProject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[52,5]]},{\&quot;method_name\&quot;:\&quot;hasCurrentProject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[54,4],[56,5]]},{\&quot;method_name\&quot;:\&quot;createProject\&quot;,\&quot;method_parameters\&quot;:\&quot;(String projectPath, String projectName)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;projectPath\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;projectName\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[58,4],[79,5]]},{\&quot;method_name\&quot;:\&quot;createProjectStructure\&quot;,\&quot;method_parameters\&quot;:\&quot;(File projectDir)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;File\&quot;,\&quot;name\&quot;:\&quot;projectDir\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[81,4],[139,5]]},{\&quot;method_name\&quot;:\&quot;loadProjectConfig\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[141,4],[157,5]]},{\&quot;method_name\&quot;:\&quot;saveProjectConfig\&quot;,\&quot;method_parameters\&quot;:\&quot;(File projectDir, Map\\u003cString, Object\\u003e config)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;File\&quot;,\&quot;name\&quot;:\&quot;projectDir\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;config\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[159,4],[163,5]]},{\&quot;method_name\&quot;:\&quot;saveCurrentProjectConfig\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[165,4],[174,5]]},{\&quot;method_name\&quot;:\&quot;getProjectConfig\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[176,4],[178,5]]},{\&quot;method_name\&quot;:\&quot;updateProjectConfig\&quot;,\&quot;method_parameters\&quot;:\&quot;(String key, Object value)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;key\&quot;},{\&quot;type\&quot;:\&quot;Object\&quot;,\&quot;name\&quot;:\&quot;value\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[180,4],[183,5]]},{\&quot;method_name\&quot;:\&quot;getProjectName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[185,4],[187,5]]},{\&quot;method_name\&quot;:\&quot;getProjectVersion\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[189,4],[191,5]]},{\&quot;method_name\&quot;:\&quot;getProjectDescription\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[193,4],[195,5]]},{\&quot;method_name\&quot;:\&quot;findFlowScriptFiles\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[198,4],[212,5]]},{\&quot;method_name\&quot;:\&quot;getProjectStatistics\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[215,4],[270,5]]},{\&quot;method_name\&quot;:\&quot;getRecentProjects\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[273,4],[284,5]]},{\&quot;method_name\&quot;:\&quot;addToRecentProjects\&quot;,\&quot;method_parameters\&quot;:\&quot;(String projectPath)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;projectPath\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[286,4],[309,5]]},{\&quot;method_name\&quot;:\&quot;closeCurrentProject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[311,4],[319,5]]}]},\&quot;/src/main/java/com/flowscript/ide/services/ThemeService.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/ide/services/ThemeService.java\&quot;,\&quot;file_name\&quot;:\&quot;ThemeService.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Theme\&quot;,\&quot;method_parameters\&quot;:\&quot;(String displayName, String cssFile)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;displayName\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;cssFile\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[20,8],[23,9]]},{\&quot;method_name\&quot;:\&quot;getDisplayName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[25,8],[25,62]]},{\&quot;method_name\&quot;:\&quot;getCssFile\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[26,8],[26,54]]},{\&quot;method_name\&quot;:\&quot;ThemeService\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[32,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;loadThemePreference\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[37,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;setTheme\&quot;,\&quot;method_parameters\&quot;:\&quot;(Theme theme)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Theme\&quot;,\&quot;name\&quot;:\&quot;theme\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[51,5]]},{\&quot;method_name\&quot;:\&quot;getCurrentTheme\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Theme\&quot;,\&quot;scope\&quot;:[[53,4],[55,5]]},{\&quot;method_name\&quot;:\&quot;applyTheme\&quot;,\&quot;method_parameters\&quot;:\&quot;(Scene scene)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Scene\&quot;,\&quot;name\&quot;:\&quot;scene\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[57,4],[71,5]]},{\&quot;method_name\&quot;:\&quot;addStylesheet\&quot;,\&quot;method_parameters\&quot;:\&quot;(Scene scene, String cssPath)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Scene\&quot;,\&quot;name\&quot;:\&quot;scene\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;cssPath\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[73,4],[80,5]]},{\&quot;method_name\&quot;:\&quot;getAvailableThemes\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[82,4],[84,5]]}]},\&quot;/src/main/java/com/flowscript/ide/syntax/FlowScriptSyntaxHighlighter.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/ide/syntax/FlowScriptSyntaxHighlighter.java\&quot;,\&quot;file_name\&quot;:\&quot;FlowScriptSyntaxHighlighter.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;computeHighlighting\&quot;,\&quot;method_parameters\&quot;:\&quot;(String text)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;text\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[91,4],[158,5]]},{\&quot;method_name\&quot;:\&quot;isKeyword\&quot;,\&quot;method_parameters\&quot;:\&quot;(String word)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;word\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[161,4],[165,5]]},{\&quot;method_name\&quot;:\&quot;isStructureKeyword\&quot;,\&quot;method_parameters\&quot;:\&quot;(String word)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;word\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[167,4],[174,5]]},{\&quot;method_name\&quot;:\&quot;isFlowKeyword\&quot;,\&quot;method_parameters\&quot;:\&quot;(String word)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;word\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[176,4],[183,5]]},{\&quot;method_name\&quot;:\&quot;isControlKeyword\&quot;,\&quot;method_parameters\&quot;:\&quot;(String word)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;word\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[185,4],[192,5]]},{\&quot;method_name\&quot;:\&quot;isTypeKeyword\&quot;,\&quot;method_parameters\&quot;:\&quot;(String word)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;word\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[194,4],[201,5]]},{\&quot;method_name\&quot;:\&quot;isValueKeyword\&quot;,\&quot;method_parameters\&quot;:\&quot;(String word)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;word\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[203,4],[210,5]]},{\&quot;method_name\&quot;:\&quot;isOperatorKeyword\&quot;,\&quot;method_parameters\&quot;:\&quot;(String word)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;word\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[212,4],[219,5]]},{\&quot;method_name\&quot;:\&quot;isFutureKeyword\&quot;,\&quot;method_parameters\&quot;:\&quot;(String word)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;word\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[221,4],[228,5]]},{\&quot;method_name\&quot;:\&quot;getAllKeywords\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[231,4],[236,5]]},{\&quot;method_name\&quot;:\&quot;getStructureKeywords\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[239,4],[239,81]]},{\&quot;method_name\&quot;:\&quot;getFlowKeywords\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[240,4],[240,71]]},{\&quot;method_name\&quot;:\&quot;getControlKeywords\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[241,4],[241,77]]},{\&quot;method_name\&quot;:\&quot;getTypeKeywords\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[242,4],[242,71]]},{\&quot;method_name\&quot;:\&quot;getValueKeywords\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[243,4],[243,73]]},{\&quot;method_name\&quot;:\&quot;getOperatorKeywords\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[244,4],[244,79]]},{\&quot;method_name\&quot;:\&quot;getFutureKeywords\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[245,4],[245,75]]}]},\&quot;/src/main/java/com/flowscript/ide/FlowScriptIDE.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/ide/FlowScriptIDE.java\&quot;,\&quot;file_name\&quot;:\&quot;FlowScriptIDE.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;start\&quot;,\&quot;method_parameters\&quot;:\&quot;(Stage primaryStage)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Stage\&quot;,\&quot;name\&quot;:\&quot;primaryStage\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,4],[65,5]]},{\&quot;method_name\&quot;:\&quot;initializeServices\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[67,4],[70,5]]},{\&quot;method_name\&quot;:\&quot;createMainLayout\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;BorderPane\&quot;,\&quot;scope\&quot;:[[72,4],[121,5]]},{\&quot;method_name\&quot;:\&quot;createMenuBar\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;MenuBar\&quot;,\&quot;scope\&quot;:[[123,4],[307,5]]},{\&quot;method_name\&quot;:\&quot;createToolBar\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ToolBar\&quot;,\&quot;scope\&quot;:[[309,4],[343,5]]},{\&quot;method_name\&quot;:\&quot;createToolButton\&quot;,\&quot;method_parameters\&quot;:\&quot;(String tooltip)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;tooltip\&quot;}],\&quot;return_type\&quot;:\&quot;Button\&quot;,\&quot;scope\&quot;:[[345,4],[356,5]]},{\&quot;method_name\&quot;:\&quot;setupEventHandlers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[358,4],[383,5]]},{\&quot;method_name\&quot;:\&quot;updateTokenAnalysis\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[385,4],[390,5]]},{\&quot;method_name\&quot;:\&quot;setupMenuEventHandlers\&quot;,\&quot;method_parameters\&quot;:\&quot;(Menu... menus)\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[392,4],[406,5]]},{\&quot;method_name\&quot;:\&quot;handleMenuAction\&quot;,\&quot;method_parameters\&quot;:\&quot;(String action)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;action\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[408,4],[431,5]]},{\&quot;method_name\&quot;:\&quot;runCurrentFile\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[433,4],[438,5]]},{\&quot;method_name\&quot;:\&quot;validateCurrentFile\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[440,4],[466,5]]},{\&quot;method_name\&quot;:\&quot;executeCommand\&quot;,\&quot;method_parameters\&quot;:\&quot;(String command)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;command\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[468,4],[479,5]]},{\&quot;method_name\&quot;:\&quot;changeTheme\&quot;,\&quot;method_parameters\&quot;:\&quot;(ThemeService.Theme theme)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;theme\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[481,4],[486,5]]},{\&quot;method_name\&quot;:\&quot;showErrorDialog\&quot;,\&quot;method_parameters\&quot;:\&quot;(String title, String header, String content)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;title\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;header\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;content\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[488,4],[494,5]]},{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[496,4],[498,5]]}]},\&quot;/src/main/java/com/flowscript/lexer/afd/CommentRecognizer.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/afd/CommentRecognizer.java\&quot;,\&quot;file_name\&quot;:\&quot;CommentRecognizer.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;recognize\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input, int startPos, int line, int column)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;startPos\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[22,4],[41,5]]},{\&quot;method_name\&quot;:\&quot;recognizeSingleLineComment\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input, int startPos, int line, int column)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;startPos\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[43,4],[79,5]]},{\&quot;method_name\&quot;:\&quot;recognizeMultiLineComment\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input, int startPos, int line, int column)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;startPos\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[81,4],[163,5]]},{\&quot;method_name\&quot;:\&quot;getPriority\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[165,4],[168,5]]}]},\&quot;/src/main/java/com/flowscript/lexer/afd/DecimalLiteralRecognizer.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/afd/DecimalLiteralRecognizer.java\&quot;,\&quot;file_name\&quot;:\&quot;DecimalLiteralRecognizer.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;recognize\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input, int startPos, int line, int column)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;startPos\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[24,4],[162,5]]},{\&quot;method_name\&quot;:\&quot;isDigit\&quot;,\&quot;method_parameters\&quot;:\&quot;(char c)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;char\&quot;,\&quot;name\&quot;:\&quot;c\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[164,4],[166,5]]},{\&quot;method_name\&quot;:\&quot;getPriority\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[168,4],[171,5]]}]},\&quot;/src/main/java/com/flowscript/lexer/afd/IdentifierRecognizer.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/afd/IdentifierRecognizer.java\&quot;,\&quot;file_name\&quot;:\&quot;IdentifierRecognizer.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;recognize\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input, int startPos, int line, int column)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;startPos\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[18,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;isIdentifierStart\&quot;,\&quot;method_parameters\&quot;:\&quot;(char c)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;char\&quot;,\&quot;name\&quot;:\&quot;c\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[62,4],[64,5]]},{\&quot;method_name\&quot;:\&quot;isIdentifierPart\&quot;,\&quot;method_parameters\&quot;:\&quot;(char c)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;char\&quot;,\&quot;name\&quot;:\&quot;c\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[66,4],[68,5]]},{\&quot;method_name\&quot;:\&quot;getPriority\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[70,4],[73,5]]}]},\&quot;/src/main/java/com/flowscript/lexer/afd/IntegerLiteralRecognizer.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/afd/IntegerLiteralRecognizer.java\&quot;,\&quot;file_name\&quot;:\&quot;IntegerLiteralRecognizer.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;recognize\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input, int startPos, int line, int column)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;startPos\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[21,4],[114,5]]},{\&quot;method_name\&quot;:\&quot;isDigit\&quot;,\&quot;method_parameters\&quot;:\&quot;(char c)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;char\&quot;,\&quot;name\&quot;:\&quot;c\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[116,4],[118,5]]},{\&quot;method_name\&quot;:\&quot;getPriority\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[120,4],[123,5]]}]},\&quot;/src/main/java/com/flowscript/lexer/afd/KeywordRecognizer.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/afd/KeywordRecognizer.java\&quot;,\&quot;file_name\&quot;:\&quot;KeywordRecognizer.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;recognize\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input, int startPos, int line, int column)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;startPos\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[74,4],[105,5]]},{\&quot;method_name\&quot;:\&quot;isIdentifierStart\&quot;,\&quot;method_parameters\&quot;:\&quot;(char c)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;char\&quot;,\&quot;name\&quot;:\&quot;c\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[107,4],[109,5]]},{\&quot;method_name\&quot;:\&quot;isIdentifierPart\&quot;,\&quot;method_parameters\&quot;:\&quot;(char c)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;char\&quot;,\&quot;name\&quot;:\&quot;c\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[111,4],[113,5]]},{\&quot;method_name\&quot;:\&quot;getPriority\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[115,4],[118,5]]}]},\&quot;/src/main/java/com/flowscript/lexer/afd/OperatorRecognizer.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/afd/OperatorRecognizer.java\&quot;,\&quot;file_name\&quot;:\&quot;OperatorRecognizer.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;recognize\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input, int startPos, int line, int column)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;startPos\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[10,4],[83,5]]},{\&quot;method_name\&quot;:\&quot;getPriority\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[85,4],[88,5]]}]},\&quot;/src/main/java/com/flowscript/lexer/afd/StringLiteralRecognizer.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/afd/StringLiteralRecognizer.java\&quot;,\&quot;file_name\&quot;:\&quot;StringLiteralRecognizer.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;recognize\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input, int startPos, int line, int column)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;startPos\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[25,4],[184,5]]},{\&quot;method_name\&quot;:\&quot;isHexDigit\&quot;,\&quot;method_parameters\&quot;:\&quot;(char c)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;char\&quot;,\&quot;name\&quot;:\&quot;c\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[186,4],[190,5]]},{\&quot;method_name\&quot;:\&quot;getPriority\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[192,4],[195,5]]}]},\&quot;/src/main/java/com/flowscript/lexer/afd/TokenRecognizer.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/afd/TokenRecognizer.java\&quot;,\&quot;file_name\&quot;:\&quot;TokenRecognizer.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;recognize\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input, int startPos, int line, int column)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;startPos\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[18,4],[18,70]]},{\&quot;method_name\&quot;:\&quot;getPriority\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[24,4],[24,22]]}]},\&quot;/src/main/java/com/flowscript/lexer/ComprehensiveDemo.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/ComprehensiveDemo.java\&quot;,\&quot;file_name\&quot;:\&quot;ComprehensiveDemo.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[14,4],[78,5]]},{\&quot;method_name\&quot;:\&quot;analyzeTokenStatistics\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cToken\\u003e tokens)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;tokens\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[80,4],[110,5]]},{\&quot;method_name\&quot;:\&quot;printTokenTable\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cToken\\u003e tokens)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;tokens\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[112,4],[127,5]]},{\&quot;method_name\&quot;:\&quot;findFunctionDeclarations\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cToken\\u003e tokens)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;tokens\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[129,4],[162,5]]},{\&quot;method_name\&quot;:\&quot;findProcessDeclarations\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cToken\\u003e tokens)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;tokens\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[164,4],[201,5]]},{\&quot;method_name\&quot;:\&quot;analyzeStringLiterals\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cToken\\u003e tokens)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;tokens\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[203,4],[233,5]]},{\&quot;method_name\&quot;:\&quot;analyzeNumericLiterals\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cToken\\u003e tokens)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;tokens\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[235,4],[260,5]]},{\&quot;method_name\&quot;:\&quot;formatValue\&quot;,\&quot;method_parameters\&quot;:\&quot;(String value)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;value\&quot;}],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[262,4],[273,5]]},{\&quot;method_name\&quot;:\&quot;getCategoryForToken\&quot;,\&quot;method_parameters\&quot;:\&quot;(TokenType type)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;TokenType\&quot;,\&quot;name\&quot;:\&quot;type\&quot;}],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[275,4],[294,5]]}]},\&quot;/src/main/java/com/flowscript/lexer/Lexer.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/Lexer.java\&quot;,\&quot;file_name\&quot;:\&quot;Lexer.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Lexer\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[18,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;Lexer\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input, boolean includeComments)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;},{\&quot;type\&quot;:\&quot;boolean\&quot;,\&quot;name\&quot;:\&quot;includeComments\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[22,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;initializeRecognizers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[32,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;tokenize\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[47,4],[84,5]]},{\&quot;method_name\&quot;:\&quot;skipWhitespace\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[86,4],[109,5]]},{\&quot;method_name\&quot;:\&quot;isWhitespace\&quot;,\&quot;method_parameters\&quot;:\&quot;(char c)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;char\&quot;,\&quot;name\&quot;:\&quot;c\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[111,4],[113,5]]},{\&quot;method_name\&quot;:\&quot;recognizeNextToken\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[115,4],[132,5]]},{\&quot;method_name\&quot;:\&quot;getTokenLength\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token token)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;token\&quot;}],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[134,4],[152,5]]},{\&quot;method_name\&quot;:\&quot;updatePosition\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token token)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;token\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[154,4],[177,5]]},{\&quot;method_name\&quot;:\&quot;getTokens\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[179,4],[181,5]]},{\&quot;method_name\&quot;:\&quot;LexicalException\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[187,8],[189,9]]}]},\&quot;/src/main/java/com/flowscript/lexer/LexerDemo.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/LexerDemo.java\&quot;,\&quot;file_name\&quot;:\&quot;LexerDemo.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[9,4],[140,1]]}]},\&quot;/src/main/java/com/flowscript/lexer/Token.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/Token.java\&quot;,\&quot;file_name\&quot;:\&quot;Token.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Token\&quot;,\&quot;method_parameters\&quot;:\&quot;(TokenType type, String value, int line, int column, int position)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;TokenType\&quot;,\&quot;name\&quot;:\&quot;type\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;value\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;position\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;Token\&quot;,\&quot;method_parameters\&quot;:\&quot;(TokenType type, int line, int column, int position)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;TokenType\&quot;,\&quot;name\&quot;:\&quot;type\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;position\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[22,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;getType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;TokenType\&quot;,\&quot;scope\&quot;:[[26,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;getValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[30,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getLine\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[34,4],[36,5]]},{\&quot;method_name\&quot;:\&quot;getColumn\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[38,4],[40,5]]},{\&quot;method_name\&quot;:\&quot;getPosition\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[42,4],[44,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[46,4],[49,5]]},{\&quot;method_name\&quot;:\&quot;equals\&quot;,\&quot;method_parameters\&quot;:\&quot;(Object obj)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Object\&quot;,\&quot;name\&quot;:\&quot;obj\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[51,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;hashCode\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[62,4],[69,5]]}]},\&quot;/src/main/java/com/flowscript/lexer/TokenType.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/lexer/TokenType.java\&quot;,\&quot;file_name\&quot;:\&quot;TokenType.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;TokenType\&quot;,\&quot;method_parameters\&quot;:\&quot;(String defaultValue)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;defaultValue\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[121,4],[123,5]]},{\&quot;method_name\&quot;:\&quot;getDefaultValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[125,4],[127,5]]},{\&quot;method_name\&quot;:\&quot;isKeyword\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[132,4],[142,5]]},{\&quot;method_name\&quot;:\&quot;isOperator\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[147,4],[153,5]]},{\&quot;method_name\&quot;:\&quot;isDelimiter\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[158,4],[164,5]]},{\&quot;method_name\&quot;:\&quot;isLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[169,4],[173,5]]},{\&quot;method_name\&quot;:\&quot;isDataType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[178,4],[182,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_ejecucion/BlockNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_ejecucion/BlockNode.java\&quot;,\&quot;file_name\&quot;:\&quot;BlockNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;BlockNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token openBraceToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;openBraceToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[14,4],[17,5]]},{\&quot;method_name\&quot;:\&quot;addStatement\&quot;,\&quot;method_parameters\&quot;:\&quot;(StatementNode statement)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;StatementNode\&quot;,\&quot;name\&quot;:\&quot;statement\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[19,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;getStatements\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[23,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[32,4],[35,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_ejecucion/StatementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_ejecucion/StatementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;StatementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;StatementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(int line, int column, int position)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;position\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[11,4],[13,5]]},{\&quot;method_name\&quot;:\&quot;StatementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token token)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;token\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[17,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[19,4],[22,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ForStatementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ForStatementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ForStatementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ForStatementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token forToken, String iteratorVariable, ExpressionNode iterable, StatementNode body)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;forToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;iteratorVariable\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;iterable\&quot;},{\&quot;type\&quot;:\&quot;StatementNode\&quot;,\&quot;name\&quot;:\&quot;body\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getIteratorVariable\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[22,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;getIterable\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[26,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;getBody\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;StatementNode\&quot;,\&quot;scope\&quot;:[[30,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[34,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[39,4],[42,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/IfStatementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/IfStatementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;IfStatementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;IfStatementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token ifToken, ExpressionNode condition, StatementNode thenStatement)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;ifToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;condition\&quot;},{\&quot;type\&quot;:\&quot;StatementNode\&quot;,\&quot;name\&quot;:\&quot;thenStatement\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[19,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;addElseIfClause\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode condition, StatementNode statement)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;condition\&quot;},{\&quot;type\&quot;:\&quot;StatementNode\&quot;,\&quot;name\&quot;:\&quot;statement\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[26,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;setElseStatement\&quot;,\&quot;method_parameters\&quot;:\&quot;(StatementNode elseStatement)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;StatementNode\&quot;,\&quot;name\&quot;:\&quot;elseStatement\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[30,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getCondition\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[34,4],[36,5]]},{\&quot;method_name\&quot;:\&quot;getThenStatement\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;StatementNode\&quot;,\&quot;scope\&quot;:[[38,4],[40,5]]},{\&quot;method_name\&quot;:\&quot;getElseIfClauses\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[42,4],[44,5]]},{\&quot;method_name\&quot;:\&quot;getElseStatement\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;StatementNode\&quot;,\&quot;scope\&quot;:[[46,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[50,4],[53,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[55,4],[59,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ReturnStatementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ReturnStatementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ReturnStatementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ReturnStatementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token returnToken, ExpressionNode expression)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;returnToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;expression\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[16,5]]},{\&quot;method_name\&quot;:\&quot;ReturnStatementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token returnToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;returnToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[18,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[22,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;hasReturnValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[26,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[30,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[35,4],[38,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ThrowStatementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/ThrowStatementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ThrowStatementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ThrowStatementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token throwToken, ExpressionNode expression)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;throwToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;expression\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[16,5]]},{\&quot;method_name\&quot;:\&quot;getExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[18,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[22,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[30,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/TryStatementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/control_flujo/TryStatementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;TryStatementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;TryStatementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token tryToken, BlockNode tryBlock, String catchVariable, BlockNode catchBlock)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;tryToken\&quot;},{\&quot;type\&quot;:\&quot;BlockNode\&quot;,\&quot;name\&quot;:\&quot;tryBlock\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;catchVariable\&quot;},{\&quot;type\&quot;:\&quot;BlockNode\&quot;,\&quot;name\&quot;:\&quot;catchBlock\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getTryBlock\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;BlockNode\&quot;,\&quot;scope\&quot;:[[22,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;getCatchVariable\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[26,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;getCatchBlock\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;BlockNode\&quot;,\&quot;scope\&quot;:[[30,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[34,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[39,4],[42,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/AdditiveExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/AdditiveExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;AdditiveExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;AdditiveExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token firstToken, ExpressionNode firstOperand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;firstToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;firstOperand\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;addOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token operatorToken, ExpressionNode operand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;operatorToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;operand\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getOperands\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[28,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getOperators\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[32,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;isSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[36,4],[38,5]]},{\&quot;method_name\&quot;:\&quot;getSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[43,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;getSimplified\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[54,4],[59,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[61,4],[64,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[66,4],[70,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[72,4],[75,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ArgumentListNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ArgumentListNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ArgumentListNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ArgumentListNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token firstToken, List\\u003cExpressionNode\\u003e arguments)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;firstToken\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;arguments\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;ArgumentListNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode firstArgument)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;firstArgument\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[21,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;addArgument\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode argument)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;argument\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[27,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;getArguments\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[31,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;size\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[35,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;isEmpty\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[39,4],[41,5]]},{\&quot;method_name\&quot;:\&quot;getArgument\&quot;,\&quot;method_parameters\&quot;:\&quot;(int index)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;index\&quot;}],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[43,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[47,4],[50,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[52,4],[55,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/BinaryExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/BinaryExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;BinaryExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;BinaryExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode left, Token operatorToken, ExpressionNode right)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;left\&quot;},{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;operatorToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;right\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[14,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;getLeft\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[21,4],[23,5]]},{\&quot;method_name\&quot;:\&quot;getOperator\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[25,4],[27,5]]},{\&quot;method_name\&quot;:\&quot;getRight\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[29,4],[31,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[33,4],[36,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[38,4],[61,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[63,4],[66,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/EqualityExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/EqualityExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;EqualityExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;EqualityExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token firstToken, ExpressionNode firstOperand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;firstToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;firstOperand\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;addOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token operatorToken, ExpressionNode operand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;operatorToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;operand\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getOperands\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[28,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getOperators\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[32,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;isSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[36,4],[38,5]]},{\&quot;method_name\&quot;:\&quot;getSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[43,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;getSimplified\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[54,4],[59,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[61,4],[64,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[66,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[71,4],[74,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(int line, int column, int position)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;position\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[12,4],[15,5]]},{\&quot;method_name\&quot;:\&quot;ExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token token)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;token\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[17,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[22,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;getToken\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[30,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[38,4],[38,47]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/FunctionCallNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/FunctionCallNode.java\&quot;,\&quot;file_name\&quot;:\&quot;FunctionCallNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;FunctionCallNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode function, Token leftParenToken, List\\u003cExpressionNode\\u003e arguments)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;function\&quot;},{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;leftParenToken\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;arguments\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;getFunction\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[21,4],[23,5]]},{\&quot;method_name\&quot;:\&quot;getArguments\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[25,4],[27,5]]},{\&quot;method_name\&quot;:\&quot;getArgumentCount\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[29,4],[31,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[33,4],[36,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[38,4],[42,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[44,4],[47,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/IdentifierNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/IdentifierNode.java\&quot;,\&quot;file_name\&quot;:\&quot;IdentifierNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;IdentifierNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token identifierToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;identifierToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[12,4],[15,5]]},{\&quot;method_name\&quot;:\&quot;getName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[17,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[21,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[26,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[32,4],[35,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/IndexAccessNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/IndexAccessNode.java\&quot;,\&quot;file_name\&quot;:\&quot;IndexAccessNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;IndexAccessNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode object, Token leftBracketToken, ExpressionNode index)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;object\&quot;},{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;leftBracketToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;index\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[17,5]]},{\&quot;method_name\&quot;:\&quot;getObject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[19,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;getIndex\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[23,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[32,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[39,4],[42,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LiteralNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LiteralNode.java\&quot;,\&quot;file_name\&quot;:\&quot;LiteralNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;LiteralNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token literalToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;literalToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[14,4],[18,5]]},{\&quot;method_name\&quot;:\&quot;parseLiteralValue\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token token)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;token\&quot;}],\&quot;return_type\&quot;:\&quot;Object\&quot;,\&quot;scope\&quot;:[[20,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;getValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Object\&quot;,\&quot;scope\&quot;:[[39,4],[41,5]]},{\&quot;method_name\&quot;:\&quot;getLiteralType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;TokenType\&quot;,\&quot;scope\&quot;:[[43,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[47,4],[50,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[52,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[71,4],[74,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LogicalAndExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LogicalAndExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;LogicalAndExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;LogicalAndExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token firstToken, ExpressionNode firstOperand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;firstToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;firstOperand\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;addOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token andToken, ExpressionNode operand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;andToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;operand\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getOperands\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[28,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getOperators\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[32,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;isSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[36,4],[38,5]]},{\&quot;method_name\&quot;:\&quot;getSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[43,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;getSimplified\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[54,4],[59,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[61,4],[64,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[66,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[71,4],[74,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LogicalOrExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/LogicalOrExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;LogicalOrExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;LogicalOrExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token firstToken, ExpressionNode firstOperand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;firstToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;firstOperand\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;addOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token orToken, ExpressionNode operand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;orToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;operand\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getOperands\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[28,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getOperators\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[32,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;isSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[36,4],[38,5]]},{\&quot;method_name\&quot;:\&quot;getSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[43,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;getSimplified\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[54,4],[59,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[61,4],[64,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[66,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[71,4],[74,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/MultiplicativeExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/MultiplicativeExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;MultiplicativeExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;MultiplicativeExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token firstToken, ExpressionNode firstOperand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;firstToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;firstOperand\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;addOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token operatorToken, ExpressionNode operand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;operatorToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;operand\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getOperands\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[28,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getOperators\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[32,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;isSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[36,4],[38,5]]},{\&quot;method_name\&quot;:\&quot;getSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[43,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;getSimplified\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[54,4],[59,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[61,4],[64,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[66,4],[70,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[72,4],[75,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ObjectMemberNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/ObjectMemberNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ObjectMemberNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ObjectMemberNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(String key, boolean keyIsString, ExpressionNode value)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;key\&quot;},{\&quot;type\&quot;:\&quot;boolean\&quot;,\&quot;name\&quot;:\&quot;keyIsString\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;value\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getKey\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[22,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;isKeyString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[26,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;getValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[30,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[34,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[39,4],[43,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PostfixExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PostfixExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;PostfixExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;PostfixExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token firstToken, ExpressionNode primary)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;firstToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;primary\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;addOperator\&quot;,\&quot;method_parameters\&quot;:\&quot;(PostfixOperatorNode operator)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;PostfixOperatorNode\&quot;,\&quot;name\&quot;:\&quot;operator\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[22,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;getPrimary\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[26,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;getOperators\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[30,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;hasOperators\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[34,4],[36,5]]},{\&quot;method_name\&quot;:\&quot;getSimplified\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[41,4],[46,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[48,4],[51,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[53,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[59,4],[62,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PostfixOperatorNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PostfixOperatorNode.java\&quot;,\&quot;file_name\&quot;:\&quot;PostfixOperatorNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;PostfixOperatorNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token operatorToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;operatorToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[17,5]]},{\&quot;method_name\&quot;:\&quot;PropertyAccessOperatorNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token dotToken, String propertyName)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;dotToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;propertyName\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[25,8],[28,9]]},{\&quot;method_name\&quot;:\&quot;getPropertyName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[30,8],[32,9]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[34,8],[37,9]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[39,8],[42,9]]},{\&quot;method_name\&quot;:\&quot;IndexAccessOperatorNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token leftBracketToken, ExpressionNode index)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;leftBracketToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;index\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[51,8],[54,9]]},{\&quot;method_name\&quot;:\&quot;getIndex\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[56,8],[58,9]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[60,8],[63,9]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[65,8],[68,9]]},{\&quot;method_name\&quot;:\&quot;FunctionCallOperatorNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token leftParenToken, List\\u003cExpressionNode\\u003e arguments)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;leftParenToken\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;arguments\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[77,8],[80,9]]},{\&quot;method_name\&quot;:\&quot;getArguments\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[82,8],[84,9]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[86,8],[89,9]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[91,8],[94,9]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PrimaryExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PrimaryExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;PrimaryExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;PrimaryExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token token)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;token\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[12,4],[14,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[16,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;ParenthesizedExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token leftParenToken, ExpressionNode innerExpression)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;leftParenToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;innerExpression\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[27,8],[30,9]]},{\&quot;method_name\&quot;:\&quot;getInnerExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[32,8],[34,9]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[36,8],[39,9]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[41,8],[44,9]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[46,8],[49,9]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PropertyAccessNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/PropertyAccessNode.java\&quot;,\&quot;file_name\&quot;:\&quot;PropertyAccessNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;PropertyAccessNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode object, Token dotToken, String propertyName)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;object\&quot;},{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;dotToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;propertyName\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[17,5]]},{\&quot;method_name\&quot;:\&quot;getObject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[19,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;getPropertyName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[23,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[32,4],[36,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[38,4],[41,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/RelationalExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/RelationalExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;RelationalExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;RelationalExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token firstToken, ExpressionNode firstOperand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;firstToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;firstOperand\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;addOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token operatorToken, ExpressionNode operand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;operatorToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;operand\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getOperands\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[28,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getOperators\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[32,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;isSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[36,4],[38,5]]},{\&quot;method_name\&quot;:\&quot;getSingleOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[43,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;getSimplified\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[54,4],[59,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[61,4],[64,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[66,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[71,4],[74,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/TernaryExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/TernaryExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;TernaryExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;TernaryExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode condition, Token questionToken,\\r\\n                                ExpressionNode trueExpression, ExpressionNode falseExpression)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;condition\&quot;},{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;questionToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;trueExpression\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;falseExpression\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[14,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getCondition\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[22,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;getTrueExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[26,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;getFalseExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[30,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[34,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[39,4],[44,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[46,4],[49,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/UnaryExpressionNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/expresiones/UnaryExpressionNode.java\&quot;,\&quot;file_name\&quot;:\&quot;UnaryExpressionNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;UnaryExpressionNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token operatorToken, ExpressionNode operand)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;operatorToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;operand\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[17,5]]},{\&quot;method_name\&quot;:\&quot;getOperator\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[19,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;getOperand\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[23,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[32,4],[42,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[44,4],[47,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/listas_argumentos/ExpressionListNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/listas_argumentos/ExpressionListNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ExpressionListNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ExpressionListNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token firstToken, List\\u003cExpressionNode\\u003e expressions)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;firstToken\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;expressions\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;ExpressionListNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode firstExpression)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;firstExpression\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[21,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;addExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode expression)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;expression\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[27,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;getExpressions\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[31,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;size\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[35,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;isEmpty\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[39,4],[41,5]]},{\&quot;method_name\&quot;:\&quot;getExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;(int index)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;index\&quot;}],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[43,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[47,4],[50,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[52,4],[55,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/listas_argumentos/ObjectMemberListNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/listas_argumentos/ObjectMemberListNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ObjectMemberListNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ObjectMemberListNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token firstToken, List\\u003cObjectMemberNode\\u003e members)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;firstToken\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;members\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[18,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;ObjectMemberListNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ObjectMemberNode firstMember)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ObjectMemberNode\&quot;,\&quot;name\&quot;:\&quot;firstMember\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[23,4],[27,5]]},{\&quot;method_name\&quot;:\&quot;addMember\&quot;,\&quot;method_parameters\&quot;:\&quot;(ObjectMemberNode member)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ObjectMemberNode\&quot;,\&quot;name\&quot;:\&quot;member\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[29,4],[31,5]]},{\&quot;method_name\&quot;:\&quot;getMembers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[33,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;size\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[37,4],[39,5]]},{\&quot;method_name\&quot;:\&quot;isEmpty\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[41,4],[43,5]]},{\&quot;method_name\&quot;:\&quot;getMember\&quot;,\&quot;method_parameters\&quot;:\&quot;(int index)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;index\&quot;}],\&quot;return_type\&quot;:\&quot;ObjectMemberNode\&quot;,\&quot;scope\&quot;:[[45,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;getMemberMap\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[49,4],[55,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[57,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[62,4],[65,5]]},{\&quot;method_name\&quot;:\&quot;ObjectMemberNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token keyToken, String key, ExpressionNode value)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;keyToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;key\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;value\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[74,8],[78,9]]},{\&quot;method_name\&quot;:\&quot;getKey\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[80,8],[82,9]]},{\&quot;method_name\&quot;:\&quot;getValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[84,8],[86,9]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[88,8],[91,9]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[93,8],[96,9]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/BooleanLiteralNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/BooleanLiteralNode.java\&quot;,\&quot;file_name\&quot;:\&quot;BooleanLiteralNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;BooleanLiteralNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token literalToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;literalToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[16,5]]},{\&quot;method_name\&quot;:\&quot;getValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[18,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[22,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[32,4],[35,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/DecimalLiteralNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/DecimalLiteralNode.java\&quot;,\&quot;file_name\&quot;:\&quot;DecimalLiteralNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;DecimalLiteralNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token literalToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;literalToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;getRawValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[21,4],[23,5]]},{\&quot;method_name\&quot;:\&quot;getValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;BigDecimal\&quot;,\&quot;scope\&quot;:[[25,4],[27,5]]},{\&quot;method_name\&quot;:\&quot;getDoubleValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;double\&quot;,\&quot;scope\&quot;:[[29,4],[31,5]]},{\&quot;method_name\&quot;:\&quot;getFloatValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;float\&quot;,\&quot;scope\&quot;:[[33,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[37,4],[40,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[42,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[47,4],[50,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/IntegerLiteralNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/IntegerLiteralNode.java\&quot;,\&quot;file_name\&quot;:\&quot;IntegerLiteralNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;IntegerLiteralNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token literalToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;literalToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;getRawValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[23,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;getValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;BigInteger\&quot;,\&quot;scope\&quot;:[[27,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;getLongValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;long\&quot;,\&quot;scope\&quot;:[[31,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;getIntValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[35,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;fitsInInt\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[39,4],[42,5]]},{\&quot;method_name\&quot;:\&quot;fitsInLong\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[44,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[49,4],[52,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[54,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[59,4],[62,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/ListLiteralNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/ListLiteralNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ListLiteralNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ListLiteralNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token leftBracketToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;leftBracketToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[18,5]]},{\&quot;method_name\&quot;:\&quot;ListLiteralNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token leftBracketToken, ExpressionListNode expressionList)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;leftBracketToken\&quot;},{\&quot;type\&quot;:\&quot;ExpressionListNode\&quot;,\&quot;name\&quot;:\&quot;expressionList\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[20,4],[23,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionList\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionListNode\&quot;,\&quot;scope\&quot;:[[25,4],[27,5]]},{\&quot;method_name\&quot;:\&quot;isEmpty\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[29,4],[31,5]]},{\&quot;method_name\&quot;:\&quot;size\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[33,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;getElements\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[37,4],[39,5]]},{\&quot;method_name\&quot;:\&quot;getElement\&quot;,\&quot;method_parameters\&quot;:\&quot;(int index)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;index\&quot;}],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[41,4],[46,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[48,4],[51,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[53,4],[56,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[58,4],[62,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/NullLiteralNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/NullLiteralNode.java\&quot;,\&quot;file_name\&quot;:\&quot;NullLiteralNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;NullLiteralNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token literalToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;literalToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[12,4],[14,5]]},{\&quot;method_name\&quot;:\&quot;getValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Object\&quot;,\&quot;scope\&quot;:[[16,4],[18,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[20,4],[23,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[25,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[30,4],[33,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/ObjectLiteralNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/ObjectLiteralNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ObjectLiteralNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ObjectLiteralNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token leftBraceToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;leftBraceToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[18,5]]},{\&quot;method_name\&quot;:\&quot;ObjectLiteralNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token leftBraceToken, ObjectMemberListNode memberList)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;leftBraceToken\&quot;},{\&quot;type\&quot;:\&quot;ObjectMemberListNode\&quot;,\&quot;name\&quot;:\&quot;memberList\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[20,4],[23,5]]},{\&quot;method_name\&quot;:\&quot;getMemberList\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ObjectMemberListNode\&quot;,\&quot;scope\&quot;:[[25,4],[27,5]]},{\&quot;method_name\&quot;:\&quot;isEmpty\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[29,4],[31,5]]},{\&quot;method_name\&quot;:\&quot;size\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[33,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;getMembers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[37,4],[39,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[41,4],[44,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[46,4],[49,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[51,4],[55,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/StringLiteralNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/literales/StringLiteralNode.java\&quot;,\&quot;file_name\&quot;:\&quot;StringLiteralNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;StringLiteralNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token literalToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;literalToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[14,4],[18,5]]},{\&quot;method_name\&quot;:\&quot;parseStringLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;(String raw)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;raw\&quot;}],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[20,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getRawValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[32,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;getValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[36,4],[38,5]]},{\&quot;method_name\&quot;:\&quot;length\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[40,4],[42,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[44,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;getExpressionType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[49,4],[52,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[54,4],[57,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/DeclarationNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/DeclarationNode.java\&quot;,\&quot;file_name\&quot;:\&quot;DeclarationNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;DeclarationNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(int line, int column, int position)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;position\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[11,4],[13,5]]},{\&quot;method_name\&quot;:\&quot;DeclarationNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token token)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;token\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[17,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[19,4],[22,5]]},{\&quot;method_name\&quot;:\&quot;getDeclaredName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[27,45]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/FunctionDeclarationNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/FunctionDeclarationNode.java\&quot;,\&quot;file_name\&quot;:\&quot;FunctionDeclarationNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;FunctionDeclarationNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token functionToken, String name,\\r\\n                                  List\\u003cParameterNode\\u003e parameters,\\r\\n                                  TypeNode returnType, BlockNode body)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;functionToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;name\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;parameters\&quot;},{\&quot;type\&quot;:\&quot;TypeNode\&quot;,\&quot;name\&quot;:\&quot;returnType\&quot;},{\&quot;type\&quot;:\&quot;BlockNode\&quot;,\&quot;name\&quot;:\&quot;body\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[21,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;getName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[31,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;getParameters\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[35,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;getReturnType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;TypeNode\&quot;,\&quot;scope\&quot;:[[39,4],[41,5]]},{\&quot;method_name\&quot;:\&quot;getReturnTypeName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[43,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;getBody\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;BlockNode\&quot;,\&quot;scope\&quot;:[[47,4],[49,5]]},{\&quot;method_name\&quot;:\&quot;getDeclaredName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[51,4],[54,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[56,4],[59,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[61,4],[66,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/ImportDeclarationNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/ImportDeclarationNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ImportDeclarationNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ImportDeclarationNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token importToken, boolean isJarImport, String modulePath, String alias)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;importToken\&quot;},{\&quot;type\&quot;:\&quot;boolean\&quot;,\&quot;name\&quot;:\&quot;isJarImport\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;modulePath\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;alias\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;isJarImport\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[23,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;getModulePath\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;getAlias\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[31,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;getDeclaredName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[35,4],[38,5]]},{\&quot;method_name\&quot;:\&quot;extractModuleName\&quot;,\&quot;method_parameters\&quot;:\&quot;(String path)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;path\&quot;}],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[40,4],[44,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[46,4],[49,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[51,4],[55,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/ProgramNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/ProgramNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ProgramNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ProgramNode\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[14,4],[17,5]]},{\&quot;method_name\&quot;:\&quot;ProgramNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cDeclarationNode\\u003e declarations)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;declarations\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[19,4],[22,5]]},{\&quot;method_name\&quot;:\&quot;addDeclaration\&quot;,\&quot;method_parameters\&quot;:\&quot;(DeclarationNode declaration)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;DeclarationNode\&quot;,\&quot;name\&quot;:\&quot;declaration\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[24,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getDeclarations\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[28,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[32,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[37,4],[40,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/VariableDeclarationNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/programa_declaraciones/VariableDeclarationNode.java\&quot;,\&quot;file_name\&quot;:\&quot;VariableDeclarationNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;VariableDeclarationNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token identifierToken, String variableName, ExpressionNode initializer)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;identifierToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;variableName\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;initializer\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getVariableName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[22,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;getInitializer\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[26,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;getDeclaredName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[30,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[35,4],[38,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[40,4],[43,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/ElseIfClauseNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/ElseIfClauseNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ElseIfClauseNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ElseIfClauseNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode condition, StatementNode statement)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;condition\&quot;},{\&quot;type\&quot;:\&quot;StatementNode\&quot;,\&quot;name\&quot;:\&quot;statement\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[15,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;getCondition\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[21,4],[23,5]]},{\&quot;method_name\&quot;:\&quot;getStatement\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;StatementNode\&quot;,\&quot;scope\&quot;:[[25,4],[27,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[29,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[34,4],[37,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/ExpressionStatementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/ExpressionStatementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ExpressionStatementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ExpressionStatementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode expression)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;expression\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[12,4],[15,5]]},{\&quot;method_name\&quot;:\&quot;getExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[17,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[21,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[26,4],[29,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/VariableDeclarationStatementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/statements_basicos/VariableDeclarationStatementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;VariableDeclarationStatementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;VariableDeclarationStatementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token identifierToken, String variableName, ExpressionNode initializer)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;identifierToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;variableName\&quot;},{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;initializer\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[14,4],[18,5]]},{\&quot;method_name\&quot;:\&quot;getVariableName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[20,4],[22,5]]},{\&quot;method_name\&quot;:\&quot;getInitializer\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[24,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[28,4],[31,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[33,4],[36,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/tipos_parametros/ParameterNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/tipos_parametros/ParameterNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ParameterNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ParameterNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(String name, TypeNode type)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;name\&quot;},{\&quot;type\&quot;:\&quot;TypeNode\&quot;,\&quot;name\&quot;:\&quot;type\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[14,4],[18,5]]},{\&quot;method_name\&quot;:\&quot;getName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[20,4],[22,5]]},{\&quot;method_name\&quot;:\&quot;getType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;TypeNode\&quot;,\&quot;scope\&quot;:[[24,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getTypeName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[28,4],[30,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[32,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[37,4],[40,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/tipos_parametros/TypeNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/functions/tipos_parametros/TypeNode.java\&quot;,\&quot;file_name\&quot;:\&quot;TypeNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;TypeNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token typeToken)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;typeToken\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[12,4],[15,5]]},{\&quot;method_name\&quot;:\&quot;getTypeName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[17,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;isPrimitive\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[21,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;isComplex\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[26,4],[28,5]]},{\&quot;method_name\&quot;:\&quot;isVoid\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[30,4],[32,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[34,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[39,4],[42,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/ElseClauseNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/ElseClauseNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ElseClauseNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ElseClauseNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token elseToken, String targetTask)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;elseToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;targetTask\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[16,5]]},{\&quot;method_name\&quot;:\&quot;getTargetTask\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[18,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[22,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[30,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/JoinClauseNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/JoinClauseNode.java\&quot;,\&quot;file_name\&quot;:\&quot;JoinClauseNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;JoinClauseNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token joinToken, String targetTask)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;joinToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;targetTask\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[16,5]]},{\&quot;method_name\&quot;:\&quot;getTargetTask\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[18,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[22,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[30,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/ParallelBranchNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/ParallelBranchNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ParallelBranchNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ParallelBranchNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token branchToken, String targetTask)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;branchToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;targetTask\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[16,5]]},{\&quot;method_name\&quot;:\&quot;getTargetTask\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[18,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[22,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[30,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/WhenClauseNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/clausulas_control/WhenClauseNode.java\&quot;,\&quot;file_name\&quot;:\&quot;WhenClauseNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;WhenClauseNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ExpressionNode condition, String targetTask)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;name\&quot;:\&quot;condition\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;targetTask\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[14,4],[18,5]]},{\&quot;method_name\&quot;:\&quot;getCondition\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[20,4],[22,5]]},{\&quot;method_name\&quot;:\&quot;getTargetTask\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[24,4],[26,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[28,4],[31,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[33,4],[36,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/EndElementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/EndElementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;EndElementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;EndElementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token endToken, String endName)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;endToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;endName\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[16,5]]},{\&quot;method_name\&quot;:\&quot;getEndName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[18,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[22,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[30,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ExclusiveGatewayNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ExclusiveGatewayNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ExclusiveGatewayNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ExclusiveGatewayNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token gatewayToken, String gatewayName,\\r\\n                                List\\u003cWhenClauseNode\\u003e whenClauses, ElseClauseNode elseClause)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;gatewayToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;gatewayName\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;whenClauses\&quot;},{\&quot;type\&quot;:\&quot;ElseClauseNode\&quot;,\&quot;name\&quot;:\&quot;elseClause\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[27,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;getGatewayName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[35,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;getWhenClauses\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[39,4],[41,5]]},{\&quot;method_name\&quot;:\&quot;getElseClause\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ElseClauseNode\&quot;,\&quot;scope\&quot;:[[43,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[47,4],[50,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[52,4],[56,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ParallelGatewayNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ParallelGatewayNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ParallelGatewayNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ParallelGatewayNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token gatewayToken, String gatewayName,\\r\\n                               List\\u003cParallelBranchNode\\u003e branches, JoinClauseNode joinClause)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;gatewayToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;gatewayName\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;branches\&quot;},{\&quot;type\&quot;:\&quot;JoinClauseNode\&quot;,\&quot;name\&quot;:\&quot;joinClause\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[27,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;getGatewayName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[35,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;getBranches\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[39,4],[41,5]]},{\&quot;method_name\&quot;:\&quot;getJoinClause\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;JoinClauseNode\&quot;,\&quot;scope\&quot;:[[43,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[47,4],[50,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[52,4],[56,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ProcessDeclarationNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ProcessDeclarationNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ProcessDeclarationNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ProcessDeclarationNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token processToken, String name)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;processToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;name\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[17,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;ProcessDeclarationNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token processToken, String name, List\\u003cASTNode\\u003e processElements)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;processToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;name\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;processElements\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[23,4],[27,5]]},{\&quot;method_name\&quot;:\&quot;getName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[29,4],[31,5]]},{\&quot;method_name\&quot;:\&quot;getProcessElements\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[33,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;getDeclaredName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[37,4],[40,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[42,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[47,4],[50,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ProcessElementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/ProcessElementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ProcessElementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ProcessElementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(int line, int column, int position)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;position\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[18,4],[20,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/StartElementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/StartElementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;StartElementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;StartElementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token startToken, String targetNodeName)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;startToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;targetNodeName\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[16,5]]},{\&quot;method_name\&quot;:\&quot;getTargetNodeName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[18,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[22,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[27,4],[30,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/TaskElementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/estructura_principal/TaskElementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;TaskElementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;TaskElementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token taskToken, String taskName, List\\u003cStatementNode\\u003e actionStatements)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;taskToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;taskName\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;actionStatements\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[25,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;getTaskName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[31,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;getActionStatements\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[35,4],[37,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[39,4],[42,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[44,4],[47,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/process/navegacion/GotoStatementNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/process/navegacion/GotoStatementNode.java\&quot;,\&quot;file_name\&quot;:\&quot;GotoStatementNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;GotoStatementNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token gotoToken, String targetLabel)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;gotoToken\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;targetLabel\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[12,4],[15,5]]},{\&quot;method_name\&quot;:\&quot;getTargetLabel\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[17,4],[19,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[21,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[26,4],[29,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ast/ASTNode.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ast/ASTNode.java\&quot;,\&quot;file_name\&quot;:\&quot;ASTNode.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ASTNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(int line, int column, int position)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;column\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;position\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[13,4],[17,5]]},{\&quot;method_name\&quot;:\&quot;ASTNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token token)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;token\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[19,4],[21,5]]},{\&quot;method_name\&quot;:\&quot;getLine\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[23,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;getColumn\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[27,4],[29,5]]},{\&quot;method_name\&quot;:\&quot;getPosition\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[31,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;getNodeType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[38,4],[38,41]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[43,4],[46,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/BlockParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/BlockParser.java\&quot;,\&quot;file_name\&quot;:\&quot;BlockParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;BlockParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[74,4],[76,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;BlockNode\&quot;,\&quot;scope\&quot;:[[78,4],[96,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/StatementListParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/StatementListParser.java\&quot;,\&quot;file_name\&quot;:\&quot;StatementListParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;StatementListParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[67,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[71,4],[84,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/StatementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/StatementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;StatementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;StatementParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[95,4],[105,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;StatementNode\&quot;,\&quot;scope\&quot;:[[107,4],[161,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ForStatementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ForStatementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ForStatementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ForStatementParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[91,4],[94,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ForStatementNode\&quot;,\&quot;scope\&quot;:[[96,4],[101,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/IfStatementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/IfStatementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;IfStatementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;IfStatementParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[76,4],[79,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;IfStatementNode\&quot;,\&quot;scope\&quot;:[[81,4],[112,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ReturnStatementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ReturnStatementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ReturnStatementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ReturnStatementParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[94,4],[96,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ReturnStatementNode\&quot;,\&quot;scope\&quot;:[[98,4],[104,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ThrowStatementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/ThrowStatementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ThrowStatementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ThrowStatementParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[75,4],[77,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ThrowStatementNode\&quot;,\&quot;scope\&quot;:[[79,4],[84,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/TryStatementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/control_flujo/TryStatementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;TryStatementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;TryStatementParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[91,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;TryStatementNode\&quot;,\&quot;scope\&quot;:[[95,4],[100,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/AdditiveExpressionParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/AdditiveExpressionParser.java\&quot;,\&quot;file_name\&quot;:\&quot;AdditiveExpressionParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;AdditiveExpressionNode\&quot;,\&quot;scope\&quot;:[[28,4],[32,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/EqualityExpressionParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/EqualityExpressionParser.java\&quot;,\&quot;file_name\&quot;:\&quot;EqualityExpressionParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;EqualityExpressionNode\&quot;,\&quot;scope\&quot;:[[28,4],[32,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/ExpressionParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/ExpressionParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ExpressionParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ExpressionNode\&quot;,\&quot;scope\&quot;:[[57,4],[62,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalAndExpressionParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalAndExpressionParser.java\&quot;,\&quot;file_name\&quot;:\&quot;LogicalAndExpressionParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;LogicalAndExpressionNode\&quot;,\&quot;scope\&quot;:[[28,4],[32,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalOrExpressionParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalOrExpressionParser.java\&quot;,\&quot;file_name\&quot;:\&quot;LogicalOrExpressionParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;LogicalOrExpressionNode\&quot;,\&quot;scope\&quot;:[[28,4],[32,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/MultiplicativeExpressionParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/MultiplicativeExpressionParser.java\&quot;,\&quot;file_name\&quot;:\&quot;MultiplicativeExpressionParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;MultiplicativeExpressionNode\&quot;,\&quot;scope\&quot;:[[28,4],[32,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixExpressionParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixExpressionParser.java\&quot;,\&quot;file_name\&quot;:\&quot;PostfixExpressionParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;PostfixExpressionNode\&quot;,\&quot;scope\&quot;:[[29,4],[33,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixOperatorParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixOperatorParser.java\&quot;,\&quot;file_name\&quot;:\&quot;PostfixOperatorParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;PostfixOperatorNode\&quot;,\&quot;scope\&quot;:[[32,4],[36,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PrimaryExpressionParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/PrimaryExpressionParser.java\&quot;,\&quot;file_name\&quot;:\&quot;PrimaryExpressionParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;PrimaryExpressionNode\&quot;,\&quot;scope\&quot;:[[32,4],[36,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/RelationalExpressionParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/RelationalExpressionParser.java\&quot;,\&quot;file_name\&quot;:\&quot;RelationalExpressionParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;RelationalExpressionNode\&quot;,\&quot;scope\&quot;:[[28,4],[32,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/TernaryExpressionParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/TernaryExpressionParser.java\&quot;,\&quot;file_name\&quot;:\&quot;TernaryExpressionParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;TernaryExpressionNode\&quot;,\&quot;scope\&quot;:[[27,4],[31,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/UnaryExpressionParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/expresiones/UnaryExpressionParser.java\&quot;,\&quot;file_name\&quot;:\&quot;UnaryExpressionParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;UnaryExpressionNode\&quot;,\&quot;scope\&quot;:[[28,4],[32,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ArgumentListParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ArgumentListParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ArgumentListParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[36,4],[39,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ExpressionListParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ExpressionListParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ExpressionListParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[36,4],[39,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberListParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberListParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ObjectMemberListParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[37,4],[40,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ObjectMemberParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ObjectMemberNode\&quot;,\&quot;scope\&quot;:[[27,4],[31,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/BooleanLiteralParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/BooleanLiteralParser.java\&quot;,\&quot;file_name\&quot;:\&quot;BooleanLiteralParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;BooleanLiteralNode\&quot;,\&quot;scope\&quot;:[[27,4],[31,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/DecimalLiteralParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/DecimalLiteralParser.java\&quot;,\&quot;file_name\&quot;:\&quot;DecimalLiteralParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;DecimalLiteralNode\&quot;,\&quot;scope\&quot;:[[27,4],[31,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/IntegerLiteralParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/IntegerLiteralParser.java\&quot;,\&quot;file_name\&quot;:\&quot;IntegerLiteralParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;IntegerLiteralNode\&quot;,\&quot;scope\&quot;:[[27,4],[31,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/ListLiteralParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/ListLiteralParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ListLiteralParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ListLiteralNode\&quot;,\&quot;scope\&quot;:[[29,4],[33,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/LiteralParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/LiteralParser.java\&quot;,\&quot;file_name\&quot;:\&quot;LiteralParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;LiteralNode\&quot;,\&quot;scope\&quot;:[[40,4],[44,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/NullLiteralParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/NullLiteralParser.java\&quot;,\&quot;file_name\&quot;:\&quot;NullLiteralParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;NullLiteralNode\&quot;,\&quot;scope\&quot;:[[27,4],[31,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/ObjectLiteralParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/ObjectLiteralParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ObjectLiteralParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ObjectLiteralNode\&quot;,\&quot;scope\&quot;:[[29,4],[33,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/StringLiteralParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/literales/StringLiteralParser.java\&quot;,\&quot;file_name\&quot;:\&quot;StringLiteralParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;StringLiteralNode\&quot;,\&quot;scope\&quot;:[[27,4],[31,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/DeclarationParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/DeclarationParser.java\&quot;,\&quot;file_name\&quot;:\&quot;DeclarationParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;DeclarationParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[59,4],[64,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;DeclarationNode\&quot;,\&quot;scope\&quot;:[[66,4],[103,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/FunctionDeclarationParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/FunctionDeclarationParser.java\&quot;,\&quot;file_name\&quot;:\&quot;FunctionDeclarationParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;FunctionDeclarationParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[78,4],[82,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;FunctionDeclarationNode\&quot;,\&quot;scope\&quot;:[[84,4],[126,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ImportDeclarationParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ImportDeclarationParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ImportDeclarationParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ImportDeclarationNode\&quot;,\&quot;scope\&quot;:[[51,4],[55,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ProgramParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ProgramParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ProgramParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ProgramParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[83,4],[85,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ProgramNode\&quot;,\&quot;scope\&quot;:[[87,4],[100,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/ExpressionStatementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/ExpressionStatementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ExpressionStatementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ExpressionStatementParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[70,4],[72,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ExpressionStatementNode\&quot;,\&quot;scope\&quot;:[[74,4],[79,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationParser.java\&quot;,\&quot;file_name\&quot;:\&quot;VariableDeclarationParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;VariableDeclarationParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[90,4],[92,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;VariableDeclarationNode\&quot;,\&quot;scope\&quot;:[[94,4],[101,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationStatementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationStatementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;VariableDeclarationStatementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;VariableDeclarationStatementParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[59,4],[61,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;VariableDeclarationStatementNode\&quot;,\&quot;scope\&quot;:[[63,4],[68,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterListParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterListParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ParameterListParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ParameterListParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[75,4],[77,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[79,4],[94,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ParameterParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ParameterParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[59,4],[61,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ParameterNode\&quot;,\&quot;scope\&quot;:[[63,4],[83,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/TypeParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/TypeParser.java\&quot;,\&quot;file_name\&quot;:\&quot;TypeParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;TypeNode\&quot;,\&quot;scope\&quot;:[[57,4],[75,5]]},{\&quot;method_name\&quot;:\&quot;isValidType\&quot;,\&quot;method_parameters\&quot;:\&quot;(Token token)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Token\&quot;,\&quot;name\&quot;:\&quot;token\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[80,4],[100,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/ElseClauseParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/ElseClauseParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ElseClauseParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ElseClauseNode\&quot;,\&quot;scope\&quot;:[[39,4],[43,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/JoinClauseParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/JoinClauseParser.java\&quot;,\&quot;file_name\&quot;:\&quot;JoinClauseParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;JoinClauseNode\&quot;,\&quot;scope\&quot;:[[39,4],[43,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/ParallelBranchParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/ParallelBranchParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ParallelBranchParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ParallelBranchNode\&quot;,\&quot;scope\&quot;:[[40,4],[44,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/WhenClauseParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/clausulas_control/WhenClauseParser.java\&quot;,\&quot;file_name\&quot;:\&quot;WhenClauseParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;WhenClauseParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[44,4],[46,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;WhenClauseNode\&quot;,\&quot;scope\&quot;:[[48,4],[52,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/control_flujo/ExclusiveGatewayParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/control_flujo/ExclusiveGatewayParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ExclusiveGatewayParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ExclusiveGatewayParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[45,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ExclusiveGatewayNode\&quot;,\&quot;scope\&quot;:[[50,4],[80,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/control_flujo/ParallelGatewayParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/control_flujo/ParallelGatewayParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ParallelGatewayParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ParallelGatewayParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[45,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ParallelGatewayNode\&quot;,\&quot;scope\&quot;:[[50,4],[97,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/elementos_core/EndElementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/elementos_core/EndElementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;EndElementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;EndElementNode\&quot;,\&quot;scope\&quot;:[[48,4],[65,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/elementos_core/StartElementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/elementos_core/StartElementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;StartElementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;StartElementNode\&quot;,\&quot;scope\&quot;:[[43,4],[69,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/elementos_trabajo/TaskElementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/elementos_trabajo/TaskElementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;TaskElementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;TaskElementParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[53,4],[55,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;TaskElementNode\&quot;,\&quot;scope\&quot;:[[57,4],[90,5]]},{\&quot;method_name\&quot;:\&quot;parseStatementList\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[92,4],[104,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessBodyParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessBodyParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ProcessBodyParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ProcessBodyParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[43,4],[49,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[51,4],[65,5]]},{\&quot;method_name\&quot;:\&quot;parseProcessElement\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ASTNode\&quot;,\&quot;scope\&quot;:[[67,4],[105,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessDeclarationParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessDeclarationParser.java\&quot;,\&quot;file_name\&quot;:\&quot;ProcessDeclarationParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ProcessDeclarationParser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[122,4],[124,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;ProcessDeclarationNode\&quot;,\&quot;scope\&quot;:[[126,4],[155,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/navegacion/GotoStatementParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/parsers/process/navegacion/GotoStatementParser.java\&quot;,\&quot;file_name\&quot;:\&quot;GotoStatementParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;GotoStatementNode\&quot;,\&quot;scope\&quot;:[[38,4],[54,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/diagram.md\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/diagram.md\&quot;,\&quot;file_name\&quot;:\&quot;diagram.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/java/com/flowscript/sintactic/IParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/IParser.java\&quot;,\&quot;file_name\&quot;:\&quot;IParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserContext context)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserContext\&quot;,\&quot;name\&quot;:\&quot;context\&quot;}],\&quot;return_type\&quot;:\&quot;T\&quot;,\&quot;scope\&quot;:[[22,4],[22,64]]}]},\&quot;/src/main/java/com/flowscript/sintactic/Parser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/Parser.java\&quot;,\&quot;file_name\&quot;:\&quot;Parser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Parser\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[63,4],[65,5]]},{\&quot;method_name\&quot;:\&quot;parse\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cToken\\u003e tokens)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;tokens\&quot;}],\&quot;return_type\&quot;:\&quot;ProgramNode\&quot;,\&quot;scope\&quot;:[[75,4],[89,5]]},{\&quot;method_name\&quot;:\&quot;ParseException\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[103,8],[105,9]]},{\&quot;method_name\&quot;:\&quot;ParseException\&quot;,\&quot;method_parameters\&quot;:\&quot;(String message, Throwable cause)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;message\&quot;},{\&quot;type\&quot;:\&quot;Throwable\&quot;,\&quot;name\&quot;:\&quot;cause\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[113,8],[115,9]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ParserContext.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ParserContext.java\&quot;,\&quot;file_name\&quot;:\&quot;ParserContext.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ParserContext\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cToken\\u003e tokens)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;tokens\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[17,4],[20,5]]},{\&quot;method_name\&quot;:\&quot;ParserContext\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cToken\\u003e tokens, int startIndex)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;tokens\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;startIndex\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[22,4],[25,5]]},{\&quot;method_name\&quot;:\&quot;getCurrentToken\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[30,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;getCurrentIndex\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[40,4],[42,5]]},{\&quot;method_name\&quot;:\&quot;advance\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[51,5]]},{\&quot;method_name\&quot;:\&quot;consume\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[59,4],[66,5]]},{\&quot;method_name\&quot;:\&quot;consume\&quot;,\&quot;method_parameters\&quot;:\&quot;(TokenType expectedType)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;TokenType\&quot;,\&quot;name\&quot;:\&quot;expectedType\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[75,4],[88,5]]},{\&quot;method_name\&quot;:\&quot;consumeValue\&quot;,\&quot;method_parameters\&quot;:\&quot;(String expectedValue)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;expectedValue\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[97,4],[110,5]]},{\&quot;method_name\&quot;:\&quot;check\&quot;,\&quot;method_parameters\&quot;:\&quot;(TokenType type)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;TokenType\&quot;,\&quot;name\&quot;:\&quot;type\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[115,4],[118,5]]},{\&quot;method_name\&quot;:\&quot;checkValue\&quot;,\&quot;method_parameters\&quot;:\&quot;(String value)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;value\&quot;}],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[123,4],[126,5]]},{\&quot;method_name\&quot;:\&quot;checkAny\&quot;,\&quot;method_parameters\&quot;:\&quot;(TokenType... types)\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[131,4],[141,5]]},{\&quot;method_name\&quot;:\&quot;peek\&quot;,\&quot;method_parameters\&quot;:\&quot;(int offset)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;offset\&quot;}],\&quot;return_type\&quot;:\&quot;Token\&quot;,\&quot;scope\&quot;:[[149,4],[155,5]]},{\&quot;method_name\&quot;:\&quot;setCurrentIndex\&quot;,\&quot;method_parameters\&quot;:\&quot;(int index)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;index\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[160,4],[162,5]]},{\&quot;method_name\&quot;:\&quot;getTokens\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[167,4],[169,5]]},{\&quot;method_name\&quot;:\&quot;hasMoreTokens\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[174,4],[176,5]]}]},\&quot;/src/main/java/com/flowscript/sintactic/ParserExample.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/java/com/flowscript/sintactic/ParserExample.java\&quot;,\&quot;file_name\&quot;:\&quot;ParserExample.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[27,4],[181,1]]}]},\&quot;/src/main/resources/css/base.css\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/resources/css/base.css\&quot;,\&quot;file_name\&quot;:\&quot;base.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/resources/css/console.css\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/resources/css/console.css\&quot;,\&quot;file_name\&quot;:\&quot;console.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/resources/css/dark-theme.css\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/resources/css/dark-theme.css\&quot;,\&quot;file_name\&quot;:\&quot;dark-theme.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/resources/css/light-theme.css\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/resources/css/light-theme.css\&quot;,\&quot;file_name\&quot;:\&quot;light-theme.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/resources/css/monokai-theme.css\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/resources/css/monokai-theme.css\&quot;,\&quot;file_name\&quot;:\&quot;monokai-theme.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/resources/css/syntax-highlighting.css\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/resources/css/syntax-highlighting.css\&quot;,\&quot;file_name\&quot;:\&quot;syntax-highlighting.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/resources/styles/token-table.css\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/resources/styles/token-table.css\&quot;,\&quot;file_name\&quot;:\&quot;token-table.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/tlf/evalprompt.md\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/tlf/evalprompt.md\&quot;,\&quot;file_name\&quot;:\&quot;evalprompt.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/tlf/FlowScript-Grammar.md\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/tlf/FlowScript-Grammar.md\&quot;,\&quot;file_name\&quot;:\&quot;FlowScript-Grammar.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/main/tlf/flowscriptsummary.md\&quot;:{\&quot;file_path\&quot;:\&quot;/src/main/tlf/flowscriptsummary.md\&quot;,\&quot;file_name\&quot;:\&quot;flowscriptsummary.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/test/java/com/flowscript/ide/components/TokenTablePaneTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/ide/components/TokenTablePaneTest.java\&quot;,\&quot;file_name\&quot;:\&quot;TokenTablePaneTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testEmptyCodeTokenization\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[15,4],[23,5]]},{\&quot;method_name\&quot;:\&quot;testSimpleFunctionTokenization\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[25,4],[42,5]]},{\&quot;method_name\&quot;:\&quot;testCodeWithLexicalError\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[44,4],[53,5]]},{\&quot;method_name\&quot;:\&quot;testComplexFlowScriptTokenization\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[55,4],[100,5]]},{\&quot;method_name\&quot;:\&quot;testCommentsTokenization\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[102,4],[133,5]]},{\&quot;method_name\&quot;:\&quot;testTokenRowCreation\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[135,4],[145,5]]},{\&quot;method_name\&quot;:\&quot;testLiteralsTokenization\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[147,4],[181,5]]}]},\&quot;/src/test/java/com/flowscript/lexer/LexerTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/lexer/LexerTest.java\&quot;,\&quot;file_name\&quot;:\&quot;LexerTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testKeywords\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,4],[24,5]]},{\&quot;method_name\&quot;:\&quot;testIdentifiers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[26,4],[40,5]]},{\&quot;method_name\&quot;:\&quot;testIntegerLiterals\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[42,4],[56,5]]},{\&quot;method_name\&quot;:\&quot;testDecimalLiterals\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[58,4],[72,5]]},{\&quot;method_name\&quot;:\&quot;testStringLiterals\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[74,4],[88,5]]},{\&quot;method_name\&quot;:\&quot;testOperators\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[90,4],[113,5]]},{\&quot;method_name\&quot;:\&quot;testDelimiters\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[115,4],[130,5]]},{\&quot;method_name\&quot;:\&quot;testComments\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[132,4],[151,5]]},{\&quot;method_name\&quot;:\&quot;testComplexFunction\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[153,4],[180,5]]},{\&quot;method_name\&quot;:\&quot;testProcessSyntax\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[182,4],[210,5]]},{\&quot;method_name\&quot;:\&quot;testBooleanLiterals\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[212,4],[221,5]]},{\&quot;method_name\&quot;:\&quot;testLineAndColumnTracking\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[223,4],[235,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidCharacter\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[237,4],[245,5]]},{\&quot;method_name\&quot;:\&quot;testGatewayKeywords\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[247,4],[259,5]]},{\&quot;method_name\&quot;:\&quot;testListAndObjectLiterals\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[261,4],[279,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/BlockParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_ejecucion/BlockParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;BlockParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testEmptyBlock\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testBlockWithSingleStatement\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testBlockWithMultipleStatements\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;testBlockWithIfStatement\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[62,4],[72,5]]},{\&quot;method_name\&quot;:\&quot;testNestedBlocks\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[74,4],[85,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidBlock_MissingClosingBrace\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[87,4],[97,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ForStatementParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ForStatementParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ForStatementParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleForLoop\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[36,5]]},{\&quot;method_name\&quot;:\&quot;testForLoopWithArray\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[38,4],[49,5]]},{\&quot;method_name\&quot;:\&quot;testForLoopWithMultipleStatements\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[51,4],[61,5]]},{\&quot;method_name\&quot;:\&quot;testNestedForLoop\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[63,4],[73,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/IfStatementParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/IfStatementParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;IfStatementParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleIf\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[36,5]]},{\&quot;method_name\&quot;:\&quot;testIfElse\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[38,4],[49,5]]},{\&quot;method_name\&quot;:\&quot;testIfElseIf\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[51,4],[63,5]]},{\&quot;method_name\&quot;:\&quot;testIfElseIfElse\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[65,4],[78,5]]},{\&quot;method_name\&quot;:\&quot;testMultipleElseIf\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[80,4],[92,5]]},{\&quot;method_name\&quot;:\&quot;testNestedIf\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[94,4],[104,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ReturnStatementParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ReturnStatementParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ReturnStatementParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testReturnWithValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testReturnWithExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testReturnWithFunctionCall\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;testReturnVoid\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[62,4],[73,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ThrowStatementParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/ThrowStatementParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ThrowStatementParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testThrowWithObject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testThrowWithString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testThrowWithVariable\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[60,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/TryStatementParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/control_flujo/TryStatementParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;TryStatementParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleTryCatch\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[36,5]]},{\&quot;method_name\&quot;:\&quot;testTryCatchWithMultipleStatements\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[38,4],[49,5]]},{\&quot;method_name\&quot;:\&quot;testNestedTryCatch\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[51,4],[61,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidTry_MissingCatch\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[63,4],[73,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/AdditiveExpressionParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/AdditiveExpressionParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;AdditiveExpressionParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleAddition\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;testSimpleSubtraction\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testChainedAddition\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;testMixedAdditionSubtraction\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[59,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;testAdditionWithIdentifiers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[71,4],[81,5]]},{\&quot;method_name\&quot;:\&quot;testAdditionWithDecimals\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;testSingleMultiplicativeExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[95,4],[105,5]]},{\&quot;method_name\&quot;:\&quot;testComplexExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[107,4],[117,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/EqualityExpressionParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/EqualityExpressionParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;EqualityExpressionParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testEquals\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;testNotEquals\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testEqualsWithNumbers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;testNotEqualsWithStrings\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[59,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;testChainedEquality\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[71,4],[81,5]]},{\&quot;method_name\&quot;:\&quot;testEqualityWithComparison\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;testSingleRelationalExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[95,4],[105,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalAndExpressionParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalAndExpressionParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;LogicalAndExpressionParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleAnd\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;testAndWithIdentifiers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testChainedAnd\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;testAndWithComparisons\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[59,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;testAndWithEquality\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[71,4],[81,5]]},{\&quot;method_name\&quot;:\&quot;testComplexAndExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;testSingleEqualityExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[95,4],[105,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalOrExpressionParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/LogicalOrExpressionParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;LogicalOrExpressionParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleOr\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;testOrWithIdentifiers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testChainedOr\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;testOrWithComparisons\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[59,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;testOrWithAndPrecedence\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[71,4],[81,5]]},{\&quot;method_name\&quot;:\&quot;testComplexOrExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;testSingleAndExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[95,4],[105,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/MultiplicativeExpressionParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/MultiplicativeExpressionParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;MultiplicativeExpressionParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleMultiplication\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;testSimpleDivision\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testModuloOperation\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;testChainedMultiplication\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[59,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;testMixedOperations\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[71,4],[81,5]]},{\&quot;method_name\&quot;:\&quot;testMultiplicationWithIdentifiers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;testDivisionWithDecimals\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[95,4],[105,5]]},{\&quot;method_name\&quot;:\&quot;testSingleUnaryExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[107,4],[117,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixExpressionParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/PostfixExpressionParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;PostfixExpressionParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testPropertyAccess\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[24,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testChainedPropertyAccess\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[46,5]]},{\&quot;method_name\&quot;:\&quot;testArrayAccess\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[48,4],[58,5]]},{\&quot;method_name\&quot;:\&quot;testArrayAccessWithExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[60,4],[70,5]]},{\&quot;method_name\&quot;:\&quot;testFunctionCall\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[72,4],[82,5]]},{\&quot;method_name\&quot;:\&quot;testFunctionCallWithArguments\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[84,4],[94,5]]},{\&quot;method_name\&quot;:\&quot;testMethodCall\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[96,4],[106,5]]},{\&quot;method_name\&quot;:\&quot;testMethodCallWithArguments\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[108,4],[118,5]]},{\&quot;method_name\&quot;:\&quot;testChainedOperators\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[120,4],[130,5]]},{\&quot;method_name\&quot;:\&quot;testComplexChaining\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[132,4],[142,5]]},{\&quot;method_name\&quot;:\&quot;testArrayOfFunctionCalls\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[144,4],[154,5]]},{\&quot;method_name\&quot;:\&quot;testPlainPrimaryExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[156,4],[166,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/PrimaryExpressionParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/PrimaryExpressionParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;PrimaryExpressionParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testIdentifier\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;testIntegerLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testStringLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;testBooleanLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[59,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;testListLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[71,4],[81,5]]},{\&quot;method_name\&quot;:\&quot;testObjectLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;testParenthesizedExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[95,4],[105,5]]},{\&quot;method_name\&quot;:\&quot;testNestedParenthesizedExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[107,4],[117,5]]},{\&quot;method_name\&quot;:\&quot;testComplexParenthesizedExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[119,4],[129,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_MissingClosingParen\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[131,4],[141,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/RelationalExpressionParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/RelationalExpressionParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;RelationalExpressionParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testLessThan\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;testGreaterThan\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testLessThanOrEqual\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;testGreaterThanOrEqual\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[59,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;testChainedComparison\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[71,4],[81,5]]},{\&quot;method_name\&quot;:\&quot;testComparisonWithExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;testSingleAdditiveExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[95,4],[105,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/TernaryExpressionParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/TernaryExpressionParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;TernaryExpressionParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleTernary\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;testTernaryWithBooleans\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testTernaryWithStrings\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;testTernaryWithExpressions\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[59,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;testNestedTernary\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[71,4],[81,5]]},{\&quot;method_name\&quot;:\&quot;testTernaryWithLogicalOr\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;testPlainLogicalOrExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[95,4],[105,5]]},{\&quot;method_name\&quot;:\&quot;testTernaryWithFunctionCalls\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[107,4],[117,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/UnaryExpressionParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/expresiones/UnaryExpressionParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;UnaryExpressionParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testNegation\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;testLogicalNot\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testDoubleNegation\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;testDoubleLogicalNot\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[59,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;testNegationWithIdentifier\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[71,4],[81,5]]},{\&quot;method_name\&quot;:\&quot;testLogicalNotWithIdentifier\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;testPlainPostfixExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[95,4],[105,5]]},{\&quot;method_name\&quot;:\&quot;testNegationWithParentheses\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[107,4],[117,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/listas_argumentos/ObjectMemberParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ObjectMemberParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testIdentifierKey\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testStringKey\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testValueAsInteger\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;testValueAsBoolean\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[62,4],[73,5]]},{\&quot;method_name\&quot;:\&quot;testValueAsObject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[75,4],[86,5]]},{\&quot;method_name\&quot;:\&quot;testValueAsExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[88,4],[99,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/BooleanLiteralParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/BooleanLiteralParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;BooleanLiteralParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testTrueLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testFalseLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_Identifier\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[59,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_Integer\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[61,4],[71,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_CapitalizedTrue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[73,4],[83,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/DecimalLiteralParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/DecimalLiteralParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;DecimalLiteralParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleDecimal\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[24,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;testDecimalWithZero\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[37,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;testDecimalWithScientificNotation\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[50,4],[61,5]]},{\&quot;method_name\&quot;:\&quot;testDecimalWithPositiveExponent\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[63,4],[74,5]]},{\&quot;method_name\&quot;:\&quot;testScientificNotationWithoutDot\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[76,4],[87,5]]},{\&quot;method_name\&quot;:\&quot;testLargeDecimal\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[89,4],[100,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_Integer\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[102,4],[112,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_Identifier\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[114,4],[124,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/IntegerLiteralParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/IntegerLiteralParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;IntegerLiteralParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleInteger\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testZero\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testIntegerWithUnderscore\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;testLargeInteger\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[62,4],[73,5]]},{\&quot;method_name\&quot;:\&quot;testIntegerWithMultipleUnderscores\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[75,4],[86,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_DecimalNumber\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[88,4],[98,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_Identifier\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[100,4],[110,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/ListLiteralParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/ListLiteralParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ListLiteralParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testEmptyList\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testListWithSingleElement\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testListWithMultipleIntegers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;testListWithMixedTypes\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[62,4],[73,5]]},{\&quot;method_name\&quot;:\&quot;testListWithIdentifiers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[75,4],[86,5]]},{\&quot;method_name\&quot;:\&quot;testNestedList\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[88,4],[99,5]]},{\&quot;method_name\&quot;:\&quot;testListWithExpressions\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[101,4],[112,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_MissingClosingBracket\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[114,4],[124,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_NotAList\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[126,4],[136,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/LiteralParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/LiteralParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;LiteralParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testIntegerLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[33,5]]},{\&quot;method_name\&quot;:\&quot;testDecimalLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[35,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testBooleanLiteralTrue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[47,4],[57,5]]},{\&quot;method_name\&quot;:\&quot;testBooleanLiteralFalse\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[59,4],[69,5]]},{\&quot;method_name\&quot;:\&quot;testStringLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[71,4],[81,5]]},{\&quot;method_name\&quot;:\&quot;testNullLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_Identifier\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[95,4],[105,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_Operator\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[107,4],[117,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/NullLiteralParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/NullLiteralParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;NullLiteralParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testNullLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_Identifier\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[46,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_CapitalizedNull\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[48,4],[58,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_Integer\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[60,4],[70,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/ObjectLiteralParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/ObjectLiteralParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ObjectLiteralParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testEmptyObject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;testObjectWithSingleMember\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[37,4],[49,5]]},{\&quot;method_name\&quot;:\&quot;testObjectWithMultipleMembers\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[51,4],[63,5]]},{\&quot;method_name\&quot;:\&quot;testObjectWithStringKeys\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[65,4],[77,5]]},{\&quot;method_name\&quot;:\&quot;testNestedObject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[79,4],[91,5]]},{\&quot;method_name\&quot;:\&quot;testObjectWithArrayValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[93,4],[105,5]]},{\&quot;method_name\&quot;:\&quot;testObjectWithExpressionValues\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[107,4],[119,5]]},{\&quot;method_name\&quot;:\&quot;testObjectWithMixedKeyTypes\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[121,4],[133,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_MissingClosingBrace\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[135,4],[145,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_NotAnObject\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[147,4],[157,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/StringLiteralParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/literales/StringLiteralParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;StringLiteralParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testEmptyString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testStringWithEscapes\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;testStringWithQuotes\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[62,4],[73,5]]},{\&quot;method_name\&quot;:\&quot;testStringWithMultipleEscapes\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[75,4],[86,5]]},{\&quot;method_name\&quot;:\&quot;testStringWithUnicodeEscape\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[88,4],[99,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_Identifier\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[101,4],[111,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidInput_Integer\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[113,4],[123,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/FunctionDeclarationParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/FunctionDeclarationParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;FunctionDeclarationParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testFunctionWithoutParameters\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[36,5]]},{\&quot;method_name\&quot;:\&quot;testFunctionWithReturnType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[38,4],[51,5]]},{\&quot;method_name\&quot;:\&quot;testFunctionWithSingleParameter\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[53,4],[66,5]]},{\&quot;method_name\&quot;:\&quot;testFunctionWithMultipleParameters\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[68,4],[80,5]]},{\&quot;method_name\&quot;:\&quot;testFunctionWithComplexBody\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[82,4],[93,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ImportDeclarationParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ImportDeclarationParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ImportDeclarationParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleImport\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[24,4],[36,5]]},{\&quot;method_name\&quot;:\&quot;testImportWithAlias\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[38,4],[50,5]]},{\&quot;method_name\&quot;:\&quot;testImportJar\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[52,4],[65,5]]},{\&quot;method_name\&quot;:\&quot;testMultipleImports\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[67,4],[81,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ProgramParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/programa_declaraciones/ProgramParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ProgramParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testEmptyProgram\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testProgramWithSingleImport\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testProgramWithSingleFunction\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;testProgramWithMultipleDeclarations\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[62,4],[75,5]]},{\&quot;method_name\&quot;:\&quot;testCompleteProgram\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[77,4],[94,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/statements_basicos/VariableDeclarationParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;VariableDeclarationParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleVariableDeclaration\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;testVariableWithStringValue\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[37,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;testVariableWithExpression\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[50,4],[61,5]]},{\&quot;method_name\&quot;:\&quot;testVariableWithFunctionCall\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[63,4],[74,5]]},{\&quot;method_name\&quot;:\&quot;testVariableWithObjectLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[76,4],[87,5]]},{\&quot;method_name\&quot;:\&quot;testVariableWithArrayLiteral\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[89,4],[100,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterListParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterListParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ParameterListParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSingleParameter\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;testMultipleParameters\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[37,4],[51,5]]},{\&quot;method_name\&quot;:\&quot;testParametersWithDifferentTypes\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[53,4],[64,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidParameterList_MissingComma\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[66,4],[76,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/ParameterParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ParameterParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleParameter\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;testParameterWithDecimalType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[37,4],[49,5]]},{\&quot;method_name\&quot;:\&quot;testParameterWithTextType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[51,4],[63,5]]},{\&quot;method_name\&quot;:\&quot;testParameterWithListType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[65,4],[77,5]]},{\&quot;method_name\&quot;:\&quot;testParameterWithObjectType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[79,4],[91,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidParameter_MissingColon\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[93,4],[103,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidParameter_MissingType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[105,4],[115,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/TypeParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/functions/tipos_parametros/TypeParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;TypeParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testIntegerType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testDecimalType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testBooleanType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;testTextType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[62,4],[73,5]]},{\&quot;method_name\&quot;:\&quot;testListType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[75,4],[86,5]]},{\&quot;method_name\&quot;:\&quot;testObjectType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[88,4],[99,5]]},{\&quot;method_name\&quot;:\&quot;testVoidType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[101,4],[112,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidType\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[114,4],[124,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/ElseClauseParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/ElseClauseParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ElseClauseParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleElseClause\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testElseClauseWithLongIdentifier\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidElseClause_MissingArrow\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[59,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidElseClause_MissingTarget\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[61,4],[71,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/JoinClauseParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/JoinClauseParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;JoinClauseParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleJoinClause\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testJoinClauseWithComplexName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidJoinClause_MissingArrow\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[59,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidJoinClause_MissingTarget\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[61,4],[71,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/ParallelBranchParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/ParallelBranchParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ParallelBranchParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleParallelBranch\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testParallelBranchWithComplexName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidParallelBranch_MissingArrow\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[59,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidParallelBranch_MissingTarget\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[61,4],[71,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/WhenClauseParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/clausulas_control/WhenClauseParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;WhenClauseParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleWhenClause\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;testWhenClauseWithComplexCondition\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[37,4],[49,5]]},{\&quot;method_name\&quot;:\&quot;testWhenClauseWithFunctionCall\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[51,4],[62,5]]},{\&quot;method_name\&quot;:\&quot;testWhenClauseWithBoolean\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[64,4],[75,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidWhenClause_MissingArrow\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[77,4],[87,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidWhenClause_MissingCondition\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[89,4],[99,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/control_flujo/ExclusiveGatewayParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/control_flujo/ExclusiveGatewayParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ExclusiveGatewayParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleGateway\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[41,5]]},{\&quot;method_name\&quot;:\&quot;testGatewayWithoutElse\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[43,4],[56,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/control_flujo/ParallelGatewayParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/control_flujo/ParallelGatewayParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ParallelGatewayParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleParallelGateway\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[41,5]]},{\&quot;method_name\&quot;:\&quot;testParallelGatewayWithMultipleBranches\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[43,4],[61,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/elementos_core/EndElementParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/elementos_core/EndElementParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;EndElementParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleEnd\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[21,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testEndWithUnderscoreInName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;testMultipleEnds\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[50,4],[65,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/elementos_core/StartElementParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/elementos_core/StartElementParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;StartElementParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleStart\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[21,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testStartWithUnderscoreInName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[48,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/elementos_trabajo/TaskElementParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/elementos_trabajo/TaskElementParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;TaskElementParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleTask\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[22,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;testTaskWithMultipleStatements\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[37,4],[53,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessBodyParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessBodyParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ProcessBodyParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testEmptyProcessBody\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[24,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;testProcessBodyWithStartAndEnd\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[37,4],[48,5]]},{\&quot;method_name\&quot;:\&quot;testProcessBodyWithStartTaskEnd\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[50,4],[61,5]]},{\&quot;method_name\&quot;:\&quot;testProcessBodyWithMultipleTasks\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[63,4],[74,5]]},{\&quot;method_name\&quot;:\&quot;testProcessBodyWithGateway\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[76,4],[90,5]]},{\&quot;method_name\&quot;:\&quot;testProcessBodyWithParallelGateway\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[92,4],[108,5]]},{\&quot;method_name\&quot;:\&quot;testProcessBodyWithSpanishKeywords\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[110,4],[121,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidProcessBody_UnexpectedToken\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[123,4],[133,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessDeclarationParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/estructura_principal/ProcessDeclarationParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;ProcessDeclarationParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleProcess\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[35,5]]},{\&quot;method_name\&quot;:\&quot;testProcessWithMultipleElements\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[37,4],[53,5]]},{\&quot;method_name\&quot;:\&quot;testProcessWithGateway\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[55,4],[70,5]]}]},\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/navegacion/GotoStatementParserTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/com/flowscript/sintactic/parsers/process/navegacion/GotoStatementParserTest.java\&quot;,\&quot;file_name\&quot;:\&quot;GotoStatementParserTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;testSimpleGoto\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[23,4],[34,5]]},{\&quot;method_name\&quot;:\&quot;testGotoWithUnderscoreInName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[36,4],[47,5]]},{\&quot;method_name\&quot;:\&quot;testGotoToEnd\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,4],[60,5]]},{\&quot;method_name\&quot;:\&quot;testInvalidGoto_MissingTarget\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[62,4],[72,5]]}]},\&quot;/src/test/java/edu/eam/ingesoft/tlf/tester/FlowScriptFunctionsTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/edu/eam/ingesoft/tlf/tester/FlowScriptFunctionsTest.java\&quot;,\&quot;file_name\&quot;:\&quot;FlowScriptFunctionsTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;initTest\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[38,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testFlowScriptFunctions\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[47,4],[50,5]]},{\&quot;method_name\&quot;:\&quot;printSummary\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[52,4],[77,5]]},{\&quot;method_name\&quot;:\&quot;createTestsFromYaml\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[82,4],[137,5]]},{\&quot;method_name\&quot;:\&quot;parseWithReflection\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;}],\&quot;return_type\&quot;:\&quot;ParseResult\&quot;,\&quot;scope\&quot;:[[146,4],[238,5]]},{\&quot;method_name\&quot;:\&quot;syntaxError\&quot;,\&quot;method_parameters\&quot;:\&quot;(Recognizer\\u003c?, ?\\u003e recognizer,\\r\\n                                       Object offendingSymbol,\\r\\n                                       int line, int charPositionInLine,\\r\\n                                       String msg,\\r\\n                                       RecognitionException e)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;recognizer\&quot;},{\&quot;type\&quot;:\&quot;Object\&quot;,\&quot;name\&quot;:\&quot;offendingSymbol\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;charPositionInLine\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;msg\&quot;},{\&quot;type\&quot;:\&quot;RecognitionException\&quot;,\&quot;name\&quot;:\&quot;e\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[168,16],[176,17]]},{\&quot;method_name\&quot;:\&quot;syntaxError\&quot;,\&quot;method_parameters\&quot;:\&quot;(Recognizer\\u003c?, ?\\u003e recognizer,\\r\\n                                       Object offendingSymbol,\\r\\n                                       int line, int charPositionInLine,\\r\\n                                       String msg,\\r\\n                                       RecognitionException e)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;recognizer\&quot;},{\&quot;type\&quot;:\&quot;Object\&quot;,\&quot;name\&quot;:\&quot;offendingSymbol\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;charPositionInLine\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;msg\&quot;},{\&quot;type\&quot;:\&quot;RecognitionException\&quot;,\&quot;name\&quot;:\&quot;e\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[189,16],[197,17]]},{\&quot;method_name\&quot;:\&quot;isValid\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[249,8],[251,9]]},{\&quot;method_name\&quot;:\&quot;setValid\&quot;,\&quot;method_parameters\&quot;:\&quot;(boolean valid)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;boolean\&quot;,\&quot;name\&quot;:\&quot;valid\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[253,8],[255,9]]},{\&quot;method_name\&quot;:\&quot;getErrors\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[257,8],[259,9]]},{\&quot;method_name\&quot;:\&quot;setErrors\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cString\\u003e errors)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;errors\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[261,8],[263,9]]},{\&quot;method_name\&quot;:\&quot;getParseTree\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Object\&quot;,\&quot;scope\&quot;:[[265,8],[267,9]]},{\&quot;method_name\&quot;:\&quot;setParseTree\&quot;,\&quot;method_parameters\&quot;:\&quot;(Object parseTree)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Object\&quot;,\&quot;name\&quot;:\&quot;parseTree\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[269,8],[271,9]]},{\&quot;method_name\&quot;:\&quot;getGrammarName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[273,8],[275,9]]},{\&quot;method_name\&quot;:\&quot;setGrammarName\&quot;,\&quot;method_parameters\&quot;:\&quot;(String grammarName)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;grammarName\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[277,8],[279,9]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[281,8],[285,9]]}]},\&quot;/src/test/java/edu/eam/ingesoft/tlf/tester/FlowScriptProcessesTest.java\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/java/edu/eam/ingesoft/tlf/tester/FlowScriptProcessesTest.java\&quot;,\&quot;file_name\&quot;:\&quot;FlowScriptProcessesTest.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;initTest\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[38,4],[45,5]]},{\&quot;method_name\&quot;:\&quot;testFlowScriptProcesses\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[47,4],[50,5]]},{\&quot;method_name\&quot;:\&quot;printSummary\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[52,4],[77,5]]},{\&quot;method_name\&quot;:\&quot;createTestsFromYaml\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[82,4],[137,5]]},{\&quot;method_name\&quot;:\&quot;parseWithReflection\&quot;,\&quot;method_parameters\&quot;:\&quot;(String input)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;input\&quot;}],\&quot;return_type\&quot;:\&quot;ParseResult\&quot;,\&quot;scope\&quot;:[[146,4],[246,5]]},{\&quot;method_name\&quot;:\&quot;syntaxError\&quot;,\&quot;method_parameters\&quot;:\&quot;(Recognizer\\u003c?, ?\\u003e recognizer,\\r\\n                                       Object offendingSymbol,\\r\\n                                       int line, int charPositionInLine,\\r\\n                                       String msg,\\r\\n                                       RecognitionException e)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;recognizer\&quot;},{\&quot;type\&quot;:\&quot;Object\&quot;,\&quot;name\&quot;:\&quot;offendingSymbol\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;charPositionInLine\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;msg\&quot;},{\&quot;type\&quot;:\&quot;RecognitionException\&quot;,\&quot;name\&quot;:\&quot;e\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[168,16],[176,17]]},{\&quot;method_name\&quot;:\&quot;syntaxError\&quot;,\&quot;method_parameters\&quot;:\&quot;(Recognizer\\u003c?, ?\\u003e recognizer,\\r\\n                                       Object offendingSymbol,\\r\\n                                       int line, int charPositionInLine,\\r\\n                                       String msg,\\r\\n                                       RecognitionException e)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;recognizer\&quot;},{\&quot;type\&quot;:\&quot;Object\&quot;,\&quot;name\&quot;:\&quot;offendingSymbol\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;line\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;charPositionInLine\&quot;},{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;msg\&quot;},{\&quot;type\&quot;:\&quot;RecognitionException\&quot;,\&quot;name\&quot;:\&quot;e\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[189,16],[197,17]]},{\&quot;method_name\&quot;:\&quot;isValid\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;boolean\&quot;,\&quot;scope\&quot;:[[257,8],[259,9]]},{\&quot;method_name\&quot;:\&quot;setValid\&quot;,\&quot;method_parameters\&quot;:\&quot;(boolean valid)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;boolean\&quot;,\&quot;name\&quot;:\&quot;valid\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[261,8],[263,9]]},{\&quot;method_name\&quot;:\&quot;getErrors\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[265,8],[267,9]]},{\&quot;method_name\&quot;:\&quot;setErrors\&quot;,\&quot;method_parameters\&quot;:\&quot;(List\\u003cString\\u003e errors)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;errors\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[269,8],[271,9]]},{\&quot;method_name\&quot;:\&quot;getParseTree\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Object\&quot;,\&quot;scope\&quot;:[[273,8],[275,9]]},{\&quot;method_name\&quot;:\&quot;setParseTree\&quot;,\&quot;method_parameters\&quot;:\&quot;(Object parseTree)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;Object\&quot;,\&quot;name\&quot;:\&quot;parseTree\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[277,8],[279,9]]},{\&quot;method_name\&quot;:\&quot;getGrammarName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[281,8],[283,9]]},{\&quot;method_name\&quot;:\&quot;setGrammarName\&quot;,\&quot;method_parameters\&quot;:\&quot;(String grammarName)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;String\&quot;,\&quot;name\&quot;:\&quot;grammarName\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[285,8],[287,9]]},{\&quot;method_name\&quot;:\&quot;toString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[289,8],[293,9]]}]},\&quot;/src/test/resources/flowscript-functions.yaml\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/resources/flowscript-functions.yaml\&quot;,\&quot;file_name\&quot;:\&quot;flowscript-functions.yaml\&quot;,\&quot;methods\&quot;:[]},\&quot;/src/test/resources/flowscript-processes.yaml\&quot;:{\&quot;file_path\&quot;:\&quot;/src/test/resources/flowscript-processes.yaml\&quot;,\&quot;file_name\&quot;:\&quot;flowscript-processes.yaml\&quot;,\&quot;methods\&quot;:[]},\&quot;/target/classes/css/base.css\&quot;:{\&quot;file_path\&quot;:\&quot;/target/classes/css/base.css\&quot;,\&quot;file_name\&quot;:\&quot;base.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/target/classes/css/console.css\&quot;:{\&quot;file_path\&quot;:\&quot;/target/classes/css/console.css\&quot;,\&quot;file_name\&quot;:\&quot;console.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/target/classes/css/dark-theme.css\&quot;:{\&quot;file_path\&quot;:\&quot;/target/classes/css/dark-theme.css\&quot;,\&quot;file_name\&quot;:\&quot;dark-theme.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/target/classes/css/light-theme.css\&quot;:{\&quot;file_path\&quot;:\&quot;/target/classes/css/light-theme.css\&quot;,\&quot;file_name\&quot;:\&quot;light-theme.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/target/classes/css/monokai-theme.css\&quot;:{\&quot;file_path\&quot;:\&quot;/target/classes/css/monokai-theme.css\&quot;,\&quot;file_name\&quot;:\&quot;monokai-theme.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/target/classes/css/syntax-highlighting.css\&quot;:{\&quot;file_path\&quot;:\&quot;/target/classes/css/syntax-highlighting.css\&quot;,\&quot;file_name\&quot;:\&quot;syntax-highlighting.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/target/classes/styles/token-table.css\&quot;:{\&quot;file_path\&quot;:\&quot;/target/classes/styles/token-table.css\&quot;,\&quot;file_name\&quot;:\&quot;token-table.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/target/generated-sources/antlr4/FlowScriptFunctionsBaseListener.java\&quot;:{\&quot;file_path\&quot;:\&quot;/target/generated-sources/antlr4/FlowScriptFunctionsBaseListener.java\&quot;,\&quot;file_name\&quot;:\&quot;FlowScriptFunctionsBaseListener.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;enterFunctionDeclaration\&quot;,\&quot;method_parameters\&quot;:\&quot;(FlowScriptFunctionsParser.FunctionDeclarationContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[21,1],[21,109]]},{\&quot;method_name\&quot;:\&quot;exitFunctionDeclaration\&quot;,\&quot;method_parameters\&quot;:\&quot;(FlowScriptFunctionsParser.FunctionDeclarationContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[27,1],[27,108]]},{\&quot;method_name\&quot;:\&quot;enterEveryRule\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserRuleContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserRuleContext\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[34,1],[34,64]]},{\&quot;method_name\&quot;:\&quot;exitEveryRule\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserRuleContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserRuleContext\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[40,1],[40,63]]},{\&quot;method_name\&quot;:\&quot;visitTerminal\&quot;,\&quot;method_parameters\&quot;:\&quot;(TerminalNode node)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;TerminalNode\&quot;,\&quot;name\&quot;:\&quot;node\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[46,1],[46,59]]},{\&quot;method_name\&quot;:\&quot;visitErrorNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ErrorNode node)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ErrorNode\&quot;,\&quot;name\&quot;:\&quot;node\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[52,1],[52,57]]}]},\&quot;/target/generated-sources/antlr4/FlowScriptFunctionsListener.java\&quot;:{\&quot;file_path\&quot;:\&quot;/target/generated-sources/antlr4/FlowScriptFunctionsListener.java\&quot;,\&quot;file_name\&quot;:\&quot;FlowScriptFunctionsListener.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;enterFunctionDeclaration\&quot;,\&quot;method_parameters\&quot;:\&quot;(FlowScriptFunctionsParser.FunctionDeclarationContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[15,1],[15,89]]},{\&quot;method_name\&quot;:\&quot;exitFunctionDeclaration\&quot;,\&quot;method_parameters\&quot;:\&quot;(FlowScriptFunctionsParser.FunctionDeclarationContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[20,1],[20,88]]}]},\&quot;/target/generated-sources/antlr4/FlowScriptFunctionsParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/target/generated-sources/antlr4/FlowScriptFunctionsParser.java\&quot;,\&quot;file_name\&quot;:\&quot;FlowScriptFunctionsParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;makeRuleNames\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[22,1],[26,2]]},{\&quot;method_name\&quot;:\&quot;makeLiteralNames\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[29,1],[32,2]]},{\&quot;method_name\&quot;:\&quot;makeSymbolicNames\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[34,1],[37,2]]},{\&quot;method_name\&quot;:\&quot;getTokenNames\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[60,1],[64,2]]},{\&quot;method_name\&quot;:\&quot;getVocabulary\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Vocabulary\&quot;,\&quot;scope\&quot;:[[66,1],[70,2]]},{\&quot;method_name\&quot;:\&quot;getGrammarFileName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[72,1],[73,72]]},{\&quot;method_name\&quot;:\&quot;getRuleNames\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[75,1],[76,53]]},{\&quot;method_name\&quot;:\&quot;getSerializedATN\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[78,1],[79,60]]},{\&quot;method_name\&quot;:\&quot;getATN\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ATN\&quot;,\&quot;scope\&quot;:[[81,1],[82,37]]},{\&quot;method_name\&quot;:\&quot;FlowScriptFunctionsParser\&quot;,\&quot;method_parameters\&quot;:\&quot;(TokenStream input)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;TokenStream\&quot;,\&quot;name\&quot;:\&quot;input\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[84,1],[87,2]]},{\&quot;method_name\&quot;:\&quot;EOF\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;TerminalNode\&quot;,\&quot;scope\&quot;:[[91,2],[91,82]]},{\&quot;method_name\&quot;:\&quot;FunctionDeclarationContext\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserRuleContext parent, int invokingState)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserRuleContext\&quot;,\&quot;name\&quot;:\&quot;parent\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;invokingState\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[92,2],[94,3]]},{\&quot;method_name\&quot;:\&quot;getRuleIndex\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[95,2],[95,74]]},{\&quot;method_name\&quot;:\&quot;enterRule\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParseTreeListener listener)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParseTreeListener\&quot;,\&quot;name\&quot;:\&quot;listener\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[96,2],[99,3]]},{\&quot;method_name\&quot;:\&quot;exitRule\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParseTreeListener listener)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParseTreeListener\&quot;,\&quot;name\&quot;:\&quot;listener\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[100,2],[103,3]]},{\&quot;method_name\&quot;:\&quot;functionDeclaration\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;FunctionDeclarationContext\&quot;,\&quot;scope\&quot;:[[106,1],[125,2]]}]},\&quot;/target/generated-sources/antlr4/FlowScriptProcessesBaseListener.java\&quot;:{\&quot;file_path\&quot;:\&quot;/target/generated-sources/antlr4/FlowScriptProcessesBaseListener.java\&quot;,\&quot;file_name\&quot;:\&quot;FlowScriptProcessesBaseListener.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;enterProgram\&quot;,\&quot;method_parameters\&quot;:\&quot;(FlowScriptProcessesParser.ProgramContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[21,1],[21,85]]},{\&quot;method_name\&quot;:\&quot;exitProgram\&quot;,\&quot;method_parameters\&quot;:\&quot;(FlowScriptProcessesParser.ProgramContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[27,1],[27,84]]},{\&quot;method_name\&quot;:\&quot;enterEveryRule\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserRuleContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserRuleContext\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[34,1],[34,64]]},{\&quot;method_name\&quot;:\&quot;exitEveryRule\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserRuleContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserRuleContext\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[40,1],[40,63]]},{\&quot;method_name\&quot;:\&quot;visitTerminal\&quot;,\&quot;method_parameters\&quot;:\&quot;(TerminalNode node)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;TerminalNode\&quot;,\&quot;name\&quot;:\&quot;node\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[46,1],[46,59]]},{\&quot;method_name\&quot;:\&quot;visitErrorNode\&quot;,\&quot;method_parameters\&quot;:\&quot;(ErrorNode node)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ErrorNode\&quot;,\&quot;name\&quot;:\&quot;node\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[52,1],[52,57]]}]},\&quot;/target/generated-sources/antlr4/FlowScriptProcessesListener.java\&quot;:{\&quot;file_path\&quot;:\&quot;/target/generated-sources/antlr4/FlowScriptProcessesListener.java\&quot;,\&quot;file_name\&quot;:\&quot;FlowScriptProcessesListener.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;enterProgram\&quot;,\&quot;method_parameters\&quot;:\&quot;(FlowScriptProcessesParser.ProgramContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[15,1],[15,65]]},{\&quot;method_name\&quot;:\&quot;exitProgram\&quot;,\&quot;method_parameters\&quot;:\&quot;(FlowScriptProcessesParser.ProgramContext ctx)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;ctx\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[20,1],[20,64]]}]},\&quot;/target/generated-sources/antlr4/FlowScriptProcessesParser.java\&quot;:{\&quot;file_path\&quot;:\&quot;/target/generated-sources/antlr4/FlowScriptProcessesParser.java\&quot;,\&quot;file_name\&quot;:\&quot;FlowScriptProcessesParser.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;makeRuleNames\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[22,1],[26,2]]},{\&quot;method_name\&quot;:\&quot;makeLiteralNames\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[29,1],[32,2]]},{\&quot;method_name\&quot;:\&quot;makeSymbolicNames\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[34,1],[37,2]]},{\&quot;method_name\&quot;:\&quot;getTokenNames\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[60,1],[64,2]]},{\&quot;method_name\&quot;:\&quot;getVocabulary\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Vocabulary\&quot;,\&quot;scope\&quot;:[[66,1],[70,2]]},{\&quot;method_name\&quot;:\&quot;getGrammarFileName\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[72,1],[73,72]]},{\&quot;method_name\&quot;:\&quot;getRuleNames\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[75,1],[76,53]]},{\&quot;method_name\&quot;:\&quot;getSerializedATN\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;String\&quot;,\&quot;scope\&quot;:[[78,1],[79,60]]},{\&quot;method_name\&quot;:\&quot;getATN\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ATN\&quot;,\&quot;scope\&quot;:[[81,1],[82,37]]},{\&quot;method_name\&quot;:\&quot;FlowScriptProcessesParser\&quot;,\&quot;method_parameters\&quot;:\&quot;(TokenStream input)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;TokenStream\&quot;,\&quot;name\&quot;:\&quot;input\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[84,1],[87,2]]},{\&quot;method_name\&quot;:\&quot;EOF\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;TerminalNode\&quot;,\&quot;scope\&quot;:[[91,2],[91,82]]},{\&quot;method_name\&quot;:\&quot;ProgramContext\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParserRuleContext parent, int invokingState)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParserRuleContext\&quot;,\&quot;name\&quot;:\&quot;parent\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;invokingState\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[92,2],[94,3]]},{\&quot;method_name\&quot;:\&quot;getRuleIndex\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[95,2],[95,62]]},{\&quot;method_name\&quot;:\&quot;enterRule\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParseTreeListener listener)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParseTreeListener\&quot;,\&quot;name\&quot;:\&quot;listener\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[96,2],[99,3]]},{\&quot;method_name\&quot;:\&quot;exitRule\&quot;,\&quot;method_parameters\&quot;:\&quot;(ParseTreeListener listener)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;ParseTreeListener\&quot;,\&quot;name\&quot;:\&quot;listener\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[100,2],[103,3]]},{\&quot;method_name\&quot;:\&quot;program\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;ProgramContext\&quot;,\&quot;scope\&quot;:[[106,1],[125,2]]}]},\&quot;/CLAUDE.md\&quot;:{\&quot;file_path\&quot;:\&quot;/CLAUDE.md\&quot;,\&quot;file_name\&quot;:\&quot;CLAUDE.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/README-TokenAnalysis.md\&quot;:{\&quot;file_path\&quot;:\&quot;/README-TokenAnalysis.md\&quot;,\&quot;file_name\&quot;:\&quot;README-TokenAnalysis.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/RUN_IDE.md\&quot;:{\&quot;file_path\&quot;:\&quot;/RUN_IDE.md\&quot;,\&quot;file_name\&quot;:\&quot;RUN_IDE.md\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>